# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Source(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Source - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'hidden': 'bool',
            'tags': 'dict(str, bool)',
            'created_epoch_millis': 'int',
            'updated_epoch_millis': 'int',
            'updater_id': 'str',
            'creator_id': 'str',
            'description': 'str',
            'source_name': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'hidden': 'hidden',
            'tags': 'tags',
            'created_epoch_millis': 'createdEpochMillis',
            'updated_epoch_millis': 'updatedEpochMillis',
            'updater_id': 'updaterId',
            'creator_id': 'creatorId',
            'description': 'description',
            'source_name': 'sourceName'
        }

        self._id = None
        self._hidden = None
        self._tags = None
        self._created_epoch_millis = None
        self._updated_epoch_millis = None
        self._updater_id = None
        self._creator_id = None
        self._description = None
        self._source_name = None

    @property
    def id(self):
        """
        Gets the id of this Source.
        id of this source, must be exactly equivalent to 'sourceName'

        :return: The id of this Source.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Source.
        id of this source, must be exactly equivalent to 'sourceName'

        :param id: The id of this Source.
        :type: str
        """
        self._id = id

    @property
    def hidden(self):
        """
        Gets the hidden of this Source.
        A derived field denoting whether this source has been hidden (e.g. excluding it from query autocomplete among other things)

        :return: The hidden of this Source.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this Source.
        A derived field denoting whether this source has been hidden (e.g. excluding it from query autocomplete among other things)

        :param hidden: The hidden of this Source.
        :type: bool
        """
        self._hidden = hidden

    @property
    def tags(self):
        """
        Gets the tags of this Source.
        A Map (String -> boolean) Representing the source tags associated with this source.  To create a tag, set it as a KEY in this map, with associated value equal to true

        :return: The tags of this Source.
        :rtype: dict(str, bool)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Source.
        A Map (String -> boolean) Representing the source tags associated with this source.  To create a tag, set it as a KEY in this map, with associated value equal to true

        :param tags: The tags of this Source.
        :type: dict(str, bool)
        """
        self._tags = tags

    @property
    def created_epoch_millis(self):
        """
        Gets the created_epoch_millis of this Source.


        :return: The created_epoch_millis of this Source.
        :rtype: int
        """
        return self._created_epoch_millis

    @created_epoch_millis.setter
    def created_epoch_millis(self, created_epoch_millis):
        """
        Sets the created_epoch_millis of this Source.


        :param created_epoch_millis: The created_epoch_millis of this Source.
        :type: int
        """
        self._created_epoch_millis = created_epoch_millis

    @property
    def updated_epoch_millis(self):
        """
        Gets the updated_epoch_millis of this Source.


        :return: The updated_epoch_millis of this Source.
        :rtype: int
        """
        return self._updated_epoch_millis

    @updated_epoch_millis.setter
    def updated_epoch_millis(self, updated_epoch_millis):
        """
        Sets the updated_epoch_millis of this Source.


        :param updated_epoch_millis: The updated_epoch_millis of this Source.
        :type: int
        """
        self._updated_epoch_millis = updated_epoch_millis

    @property
    def updater_id(self):
        """
        Gets the updater_id of this Source.


        :return: The updater_id of this Source.
        :rtype: str
        """
        return self._updater_id

    @updater_id.setter
    def updater_id(self, updater_id):
        """
        Sets the updater_id of this Source.


        :param updater_id: The updater_id of this Source.
        :type: str
        """
        self._updater_id = updater_id

    @property
    def creator_id(self):
        """
        Gets the creator_id of this Source.


        :return: The creator_id of this Source.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this Source.


        :param creator_id: The creator_id of this Source.
        :type: str
        """
        self._creator_id = creator_id

    @property
    def description(self):
        """
        Gets the description of this Source.
        Description of this source

        :return: The description of this Source.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Source.
        Description of this source

        :param description: The description of this Source.
        :type: str
        """
        self._description = description

    @property
    def source_name(self):
        """
        Gets the source_name of this Source.
        The name of the source, usually set by ingested telemetry

        :return: The source_name of this Source.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """
        Sets the source_name of this Source.
        The name of the source, usually set by ingested telemetry

        :param source_name: The source_name of this Source.
        :type: str
        """
        self._source_name = source_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

