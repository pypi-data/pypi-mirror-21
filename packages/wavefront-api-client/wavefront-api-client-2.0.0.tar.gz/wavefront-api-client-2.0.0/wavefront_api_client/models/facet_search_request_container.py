# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FacetSearchRequestContainer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FacetSearchRequestContainer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'limit': 'int',
            'offset': 'int',
            'query': 'list[SearchQuery]',
            'facet_query': 'str',
            'facet_query_matching_method': 'str'
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset',
            'query': 'query',
            'facet_query': 'facetQuery',
            'facet_query_matching_method': 'facetQueryMatchingMethod'
        }

        self._limit = None
        self._offset = None
        self._query = None
        self._facet_query = None
        self._facet_query_matching_method = None

    @property
    def limit(self):
        """
        Gets the limit of this FacetSearchRequestContainer.
        The number of results to return.  Default: 100

        :return: The limit of this FacetSearchRequestContainer.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this FacetSearchRequestContainer.
        The number of results to return.  Default: 100

        :param limit: The limit of this FacetSearchRequestContainer.
        :type: int
        """
        self._limit = limit

    @property
    def offset(self):
        """
        Gets the offset of this FacetSearchRequestContainer.
        The number of results to skip before returning values.  Default: 0

        :return: The offset of this FacetSearchRequestContainer.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this FacetSearchRequestContainer.
        The number of results to skip before returning values.  Default: 0

        :param offset: The offset of this FacetSearchRequestContainer.
        :type: int
        """
        self._offset = offset

    @property
    def query(self):
        """
        Gets the query of this FacetSearchRequestContainer.
        A list of queries by which to limit the search results.  Entities that match ALL queries in the list are returned

        :return: The query of this FacetSearchRequestContainer.
        :rtype: list[SearchQuery]
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this FacetSearchRequestContainer.
        A list of queries by which to limit the search results.  Entities that match ALL queries in the list are returned

        :param query: The query of this FacetSearchRequestContainer.
        :type: list[SearchQuery]
        """
        self._query = query

    @property
    def facet_query(self):
        """
        Gets the facet_query of this FacetSearchRequestContainer.
        A string against which facet results are compared.  If the facet result CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned.

        :return: The facet_query of this FacetSearchRequestContainer.
        :rtype: str
        """
        return self._facet_query

    @facet_query.setter
    def facet_query(self, facet_query):
        """
        Sets the facet_query of this FacetSearchRequestContainer.
        A string against which facet results are compared.  If the facet result CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned.

        :param facet_query: The facet_query of this FacetSearchRequestContainer.
        :type: str
        """
        self._facet_query = facet_query

    @property
    def facet_query_matching_method(self):
        """
        Gets the facet_query_matching_method of this FacetSearchRequestContainer.
        The matching method used to filter when 'facetQuery' is used. Defaults to CONTAINS.

        :return: The facet_query_matching_method of this FacetSearchRequestContainer.
        :rtype: str
        """
        return self._facet_query_matching_method

    @facet_query_matching_method.setter
    def facet_query_matching_method(self, facet_query_matching_method):
        """
        Sets the facet_query_matching_method of this FacetSearchRequestContainer.
        The matching method used to filter when 'facetQuery' is used. Defaults to CONTAINS.

        :param facet_query_matching_method: The facet_query_matching_method of this FacetSearchRequestContainer.
        :type: str
        """
        allowed_values = ["CONTAINS", "STARTSWITH", "EXACT", "TAGPATH"]
        if facet_query_matching_method not in allowed_values:
            raise ValueError(
                "Invalid value for `facet_query_matching_method`, must be one of {0}"
                .format(allowed_values)
            )
        self._facet_query_matching_method = facet_query_matching_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

