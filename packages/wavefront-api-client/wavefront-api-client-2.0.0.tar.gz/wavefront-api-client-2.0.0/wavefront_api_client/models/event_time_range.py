# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EventTimeRange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventTimeRange - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'earliest_start_time_epoch_millis': 'int',
            'latest_start_time_epoch_millis': 'int'
        }

        self.attribute_map = {
            'earliest_start_time_epoch_millis': 'earliestStartTimeEpochMillis',
            'latest_start_time_epoch_millis': 'latestStartTimeEpochMillis'
        }

        self._earliest_start_time_epoch_millis = None
        self._latest_start_time_epoch_millis = None

    @property
    def earliest_start_time_epoch_millis(self):
        """
        Gets the earliest_start_time_epoch_millis of this EventTimeRange.
        Start of search time window, in milliseconds since the Unix Epoch.  Events whose start time occurs after this value will be returned.  If no value is supplied, defaults to 2 hours prior the present time.

        :return: The earliest_start_time_epoch_millis of this EventTimeRange.
        :rtype: int
        """
        return self._earliest_start_time_epoch_millis

    @earliest_start_time_epoch_millis.setter
    def earliest_start_time_epoch_millis(self, earliest_start_time_epoch_millis):
        """
        Sets the earliest_start_time_epoch_millis of this EventTimeRange.
        Start of search time window, in milliseconds since the Unix Epoch.  Events whose start time occurs after this value will be returned.  If no value is supplied, defaults to 2 hours prior the present time.

        :param earliest_start_time_epoch_millis: The earliest_start_time_epoch_millis of this EventTimeRange.
        :type: int
        """
        self._earliest_start_time_epoch_millis = earliest_start_time_epoch_millis

    @property
    def latest_start_time_epoch_millis(self):
        """
        Gets the latest_start_time_epoch_millis of this EventTimeRange.
        End of the search time window, in milliseconds since the Unix Epoch.  Events whose start time occurs before this value will be returned.   If no value is supplied, defaults to now.

        :return: The latest_start_time_epoch_millis of this EventTimeRange.
        :rtype: int
        """
        return self._latest_start_time_epoch_millis

    @latest_start_time_epoch_millis.setter
    def latest_start_time_epoch_millis(self, latest_start_time_epoch_millis):
        """
        Sets the latest_start_time_epoch_millis of this EventTimeRange.
        End of the search time window, in milliseconds since the Unix Epoch.  Events whose start time occurs before this value will be returned.   If no value is supplied, defaults to now.

        :param latest_start_time_epoch_millis: The latest_start_time_epoch_millis of this EventTimeRange.
        :type: int
        """
        self._latest_start_time_epoch_millis = latest_start_time_epoch_millis

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

