# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Dashboard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Dashboard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'id': 'str',
            'parameters': 'dict(str, str)',
            'tags': 'WFTags',
            'created_epoch_millis': 'int',
            'updated_epoch_millis': 'int',
            'updater_id': 'str',
            'creator_id': 'str',
            'description': 'str',
            'customer': 'str',
            'url': 'str',
            'event_filter_type': 'str',
            'sections': 'list[DashboardSection]',
            'parameter_details': 'dict(str, DashboardParameterValue)',
            'display_description': 'bool',
            'display_section_table_of_contents': 'bool',
            'display_query_parameters': 'bool',
            'chart_title_scalar': 'int',
            'event_query': 'str',
            'chart_title_color': 'str',
            'chart_title_bg_color': 'str',
            'views_last_day': 'int',
            'views_last_week': 'int',
            'views_last_month': 'int',
            'deleted': 'bool',
            'system_owned': 'bool',
            'num_charts': 'int',
            'num_favorites': 'int',
            'favorite': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'parameters': 'parameters',
            'tags': 'tags',
            'created_epoch_millis': 'createdEpochMillis',
            'updated_epoch_millis': 'updatedEpochMillis',
            'updater_id': 'updaterId',
            'creator_id': 'creatorId',
            'description': 'description',
            'customer': 'customer',
            'url': 'url',
            'event_filter_type': 'eventFilterType',
            'sections': 'sections',
            'parameter_details': 'parameterDetails',
            'display_description': 'displayDescription',
            'display_section_table_of_contents': 'displaySectionTableOfContents',
            'display_query_parameters': 'displayQueryParameters',
            'chart_title_scalar': 'chartTitleScalar',
            'event_query': 'eventQuery',
            'chart_title_color': 'chartTitleColor',
            'chart_title_bg_color': 'chartTitleBgColor',
            'views_last_day': 'viewsLastDay',
            'views_last_week': 'viewsLastWeek',
            'views_last_month': 'viewsLastMonth',
            'deleted': 'deleted',
            'system_owned': 'systemOwned',
            'num_charts': 'numCharts',
            'num_favorites': 'numFavorites',
            'favorite': 'favorite'
        }

        self._name = None
        self._id = None
        self._parameters = None
        self._tags = None
        self._created_epoch_millis = None
        self._updated_epoch_millis = None
        self._updater_id = None
        self._creator_id = None
        self._description = None
        self._customer = None
        self._url = None
        self._event_filter_type = None
        self._sections = None
        self._parameter_details = None
        self._display_description = None
        self._display_section_table_of_contents = None
        self._display_query_parameters = None
        self._chart_title_scalar = None
        self._event_query = None
        self._chart_title_color = None
        self._chart_title_bg_color = None
        self._views_last_day = None
        self._views_last_week = None
        self._views_last_month = None
        self._deleted = None
        self._system_owned = None
        self._num_charts = None
        self._num_favorites = None
        self._favorite = None

    @property
    def name(self):
        """
        Gets the name of this Dashboard.
        Name of the dashboard

        :return: The name of this Dashboard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Dashboard.
        Name of the dashboard

        :param name: The name of this Dashboard.
        :type: str
        """
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :return: The id of this Dashboard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :param id: The id of this Dashboard.
        :type: str
        """
        self._id = id

    @property
    def parameters(self):
        """
        Gets the parameters of this Dashboard.
        Deprecated.  An obsolete representation of dashboard parameters

        :return: The parameters of this Dashboard.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Dashboard.
        Deprecated.  An obsolete representation of dashboard parameters

        :param parameters: The parameters of this Dashboard.
        :type: dict(str, str)
        """
        self._parameters = parameters

    @property
    def tags(self):
        """
        Gets the tags of this Dashboard.
        Tags assigned to this dashboard

        :return: The tags of this Dashboard.
        :rtype: WFTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Dashboard.
        Tags assigned to this dashboard

        :param tags: The tags of this Dashboard.
        :type: WFTags
        """
        self._tags = tags

    @property
    def created_epoch_millis(self):
        """
        Gets the created_epoch_millis of this Dashboard.


        :return: The created_epoch_millis of this Dashboard.
        :rtype: int
        """
        return self._created_epoch_millis

    @created_epoch_millis.setter
    def created_epoch_millis(self, created_epoch_millis):
        """
        Sets the created_epoch_millis of this Dashboard.


        :param created_epoch_millis: The created_epoch_millis of this Dashboard.
        :type: int
        """
        self._created_epoch_millis = created_epoch_millis

    @property
    def updated_epoch_millis(self):
        """
        Gets the updated_epoch_millis of this Dashboard.


        :return: The updated_epoch_millis of this Dashboard.
        :rtype: int
        """
        return self._updated_epoch_millis

    @updated_epoch_millis.setter
    def updated_epoch_millis(self, updated_epoch_millis):
        """
        Sets the updated_epoch_millis of this Dashboard.


        :param updated_epoch_millis: The updated_epoch_millis of this Dashboard.
        :type: int
        """
        self._updated_epoch_millis = updated_epoch_millis

    @property
    def updater_id(self):
        """
        Gets the updater_id of this Dashboard.


        :return: The updater_id of this Dashboard.
        :rtype: str
        """
        return self._updater_id

    @updater_id.setter
    def updater_id(self, updater_id):
        """
        Sets the updater_id of this Dashboard.


        :param updater_id: The updater_id of this Dashboard.
        :type: str
        """
        self._updater_id = updater_id

    @property
    def creator_id(self):
        """
        Gets the creator_id of this Dashboard.


        :return: The creator_id of this Dashboard.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this Dashboard.


        :param creator_id: The creator_id of this Dashboard.
        :type: str
        """
        self._creator_id = creator_id

    @property
    def description(self):
        """
        Gets the description of this Dashboard.
        Human-readable description of the dashboard

        :return: The description of this Dashboard.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Dashboard.
        Human-readable description of the dashboard

        :param description: The description of this Dashboard.
        :type: str
        """
        self._description = description

    @property
    def customer(self):
        """
        Gets the customer of this Dashboard.
        id of the customer to which this dashboard belongs

        :return: The customer of this Dashboard.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this Dashboard.
        id of the customer to which this dashboard belongs

        :param customer: The customer of this Dashboard.
        :type: str
        """
        self._customer = customer

    @property
    def url(self):
        """
        Gets the url of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :return: The url of this Dashboard.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Dashboard.
        Unique identifier, also URL slug, of the dashboard

        :param url: The url of this Dashboard.
        :type: str
        """
        self._url = url

    @property
    def event_filter_type(self):
        """
        Gets the event_filter_type of this Dashboard.
        How charts belonging to this dashboard should display events.  BYCHART is default if unspecified

        :return: The event_filter_type of this Dashboard.
        :rtype: str
        """
        return self._event_filter_type

    @event_filter_type.setter
    def event_filter_type(self, event_filter_type):
        """
        Sets the event_filter_type of this Dashboard.
        How charts belonging to this dashboard should display events.  BYCHART is default if unspecified

        :param event_filter_type: The event_filter_type of this Dashboard.
        :type: str
        """
        allowed_values = ["BYCHART", "AUTOMATIC", "ALL", "NONE", "BYDASHBOARD", "BYCHARTANDDASHBOARD"]
        if event_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_filter_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._event_filter_type = event_filter_type

    @property
    def sections(self):
        """
        Gets the sections of this Dashboard.
        Dashboard chart sections

        :return: The sections of this Dashboard.
        :rtype: list[DashboardSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """
        Sets the sections of this Dashboard.
        Dashboard chart sections

        :param sections: The sections of this Dashboard.
        :type: list[DashboardSection]
        """
        self._sections = sections

    @property
    def parameter_details(self):
        """
        Gets the parameter_details of this Dashboard.
        The current (as of Wavefront 4.0) JSON representation of dashboard parameters.  This is a map from a parameter name to its representation

        :return: The parameter_details of this Dashboard.
        :rtype: dict(str, DashboardParameterValue)
        """
        return self._parameter_details

    @parameter_details.setter
    def parameter_details(self, parameter_details):
        """
        Sets the parameter_details of this Dashboard.
        The current (as of Wavefront 4.0) JSON representation of dashboard parameters.  This is a map from a parameter name to its representation

        :param parameter_details: The parameter_details of this Dashboard.
        :type: dict(str, DashboardParameterValue)
        """
        self._parameter_details = parameter_details

    @property
    def display_description(self):
        """
        Gets the display_description of this Dashboard.
        Whether the dashboard description section is opened by default when the dashboard is shown

        :return: The display_description of this Dashboard.
        :rtype: bool
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """
        Sets the display_description of this Dashboard.
        Whether the dashboard description section is opened by default when the dashboard is shown

        :param display_description: The display_description of this Dashboard.
        :type: bool
        """
        self._display_description = display_description

    @property
    def display_section_table_of_contents(self):
        """
        Gets the display_section_table_of_contents of this Dashboard.
        Whether the \"pills\" quick-linked the sections of the dashboard are displayed by default when the dashboard is shown

        :return: The display_section_table_of_contents of this Dashboard.
        :rtype: bool
        """
        return self._display_section_table_of_contents

    @display_section_table_of_contents.setter
    def display_section_table_of_contents(self, display_section_table_of_contents):
        """
        Sets the display_section_table_of_contents of this Dashboard.
        Whether the \"pills\" quick-linked the sections of the dashboard are displayed by default when the dashboard is shown

        :param display_section_table_of_contents: The display_section_table_of_contents of this Dashboard.
        :type: bool
        """
        self._display_section_table_of_contents = display_section_table_of_contents

    @property
    def display_query_parameters(self):
        """
        Gets the display_query_parameters of this Dashboard.
        Whether the dashboard parameters section is opened by default when the dashboard is shown

        :return: The display_query_parameters of this Dashboard.
        :rtype: bool
        """
        return self._display_query_parameters

    @display_query_parameters.setter
    def display_query_parameters(self, display_query_parameters):
        """
        Sets the display_query_parameters of this Dashboard.
        Whether the dashboard parameters section is opened by default when the dashboard is shown

        :param display_query_parameters: The display_query_parameters of this Dashboard.
        :type: bool
        """
        self._display_query_parameters = display_query_parameters

    @property
    def chart_title_scalar(self):
        """
        Gets the chart_title_scalar of this Dashboard.
        Scale (normally 100) of chart title text size

        :return: The chart_title_scalar of this Dashboard.
        :rtype: int
        """
        return self._chart_title_scalar

    @chart_title_scalar.setter
    def chart_title_scalar(self, chart_title_scalar):
        """
        Sets the chart_title_scalar of this Dashboard.
        Scale (normally 100) of chart title text size

        :param chart_title_scalar: The chart_title_scalar of this Dashboard.
        :type: int
        """
        self._chart_title_scalar = chart_title_scalar

    @property
    def event_query(self):
        """
        Gets the event_query of this Dashboard.
        Event query to run on dashboard charts

        :return: The event_query of this Dashboard.
        :rtype: str
        """
        return self._event_query

    @event_query.setter
    def event_query(self, event_query):
        """
        Sets the event_query of this Dashboard.
        Event query to run on dashboard charts

        :param event_query: The event_query of this Dashboard.
        :type: str
        """
        self._event_query = event_query

    @property
    def chart_title_color(self):
        """
        Gets the chart_title_color of this Dashboard.
        Text color of the chart title text are, in rgba(rvalue,gvalue,bvalue,avalue)

        :return: The chart_title_color of this Dashboard.
        :rtype: str
        """
        return self._chart_title_color

    @chart_title_color.setter
    def chart_title_color(self, chart_title_color):
        """
        Sets the chart_title_color of this Dashboard.
        Text color of the chart title text are, in rgba(rvalue,gvalue,bvalue,avalue)

        :param chart_title_color: The chart_title_color of this Dashboard.
        :type: str
        """
        self._chart_title_color = chart_title_color

    @property
    def chart_title_bg_color(self):
        """
        Gets the chart_title_bg_color of this Dashboard.
        Background color of the chart title text area, in rgba(rvalue,gvalue,bvalue,avalue)

        :return: The chart_title_bg_color of this Dashboard.
        :rtype: str
        """
        return self._chart_title_bg_color

    @chart_title_bg_color.setter
    def chart_title_bg_color(self, chart_title_bg_color):
        """
        Sets the chart_title_bg_color of this Dashboard.
        Background color of the chart title text area, in rgba(rvalue,gvalue,bvalue,avalue)

        :param chart_title_bg_color: The chart_title_bg_color of this Dashboard.
        :type: str
        """
        self._chart_title_bg_color = chart_title_bg_color

    @property
    def views_last_day(self):
        """
        Gets the views_last_day of this Dashboard.


        :return: The views_last_day of this Dashboard.
        :rtype: int
        """
        return self._views_last_day

    @views_last_day.setter
    def views_last_day(self, views_last_day):
        """
        Sets the views_last_day of this Dashboard.


        :param views_last_day: The views_last_day of this Dashboard.
        :type: int
        """
        self._views_last_day = views_last_day

    @property
    def views_last_week(self):
        """
        Gets the views_last_week of this Dashboard.


        :return: The views_last_week of this Dashboard.
        :rtype: int
        """
        return self._views_last_week

    @views_last_week.setter
    def views_last_week(self, views_last_week):
        """
        Sets the views_last_week of this Dashboard.


        :param views_last_week: The views_last_week of this Dashboard.
        :type: int
        """
        self._views_last_week = views_last_week

    @property
    def views_last_month(self):
        """
        Gets the views_last_month of this Dashboard.


        :return: The views_last_month of this Dashboard.
        :rtype: int
        """
        return self._views_last_month

    @views_last_month.setter
    def views_last_month(self, views_last_month):
        """
        Sets the views_last_month of this Dashboard.


        :param views_last_month: The views_last_month of this Dashboard.
        :type: int
        """
        self._views_last_month = views_last_month

    @property
    def deleted(self):
        """
        Gets the deleted of this Dashboard.


        :return: The deleted of this Dashboard.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Dashboard.


        :param deleted: The deleted of this Dashboard.
        :type: bool
        """
        self._deleted = deleted

    @property
    def system_owned(self):
        """
        Gets the system_owned of this Dashboard.
        Whether this dashboard is system-owned and not writeable

        :return: The system_owned of this Dashboard.
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """
        Sets the system_owned of this Dashboard.
        Whether this dashboard is system-owned and not writeable

        :param system_owned: The system_owned of this Dashboard.
        :type: bool
        """
        self._system_owned = system_owned

    @property
    def num_charts(self):
        """
        Gets the num_charts of this Dashboard.


        :return: The num_charts of this Dashboard.
        :rtype: int
        """
        return self._num_charts

    @num_charts.setter
    def num_charts(self, num_charts):
        """
        Sets the num_charts of this Dashboard.


        :param num_charts: The num_charts of this Dashboard.
        :type: int
        """
        self._num_charts = num_charts

    @property
    def num_favorites(self):
        """
        Gets the num_favorites of this Dashboard.


        :return: The num_favorites of this Dashboard.
        :rtype: int
        """
        return self._num_favorites

    @num_favorites.setter
    def num_favorites(self, num_favorites):
        """
        Sets the num_favorites of this Dashboard.


        :param num_favorites: The num_favorites of this Dashboard.
        :type: int
        """
        self._num_favorites = num_favorites

    @property
    def favorite(self):
        """
        Gets the favorite of this Dashboard.


        :return: The favorite of this Dashboard.
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """
        Sets the favorite of this Dashboard.


        :param favorite: The favorite of this Dashboard.
        :type: bool
        """
        self._favorite = favorite

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

