# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MetricDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MetricDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host': 'str',
            'last_update': 'int',
            'tags': 'dict(str, str)'
        }

        self.attribute_map = {
            'host': 'host',
            'last_update': 'last_update',
            'tags': 'tags'
        }

        self._host = None
        self._last_update = None
        self._tags = None

    @property
    def host(self):
        """
        Gets the host of this MetricDetails.
        The source reporting this metric

        :return: The host of this MetricDetails.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this MetricDetails.
        The source reporting this metric

        :param host: The host of this MetricDetails.
        :type: str
        """
        self._host = host

    @property
    def last_update(self):
        """
        Gets the last_update of this MetricDetails.
        Approximate time of last reporting, in milliseconds since the Unix epoch

        :return: The last_update of this MetricDetails.
        :rtype: int
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """
        Sets the last_update of this MetricDetails.
        Approximate time of last reporting, in milliseconds since the Unix epoch

        :param last_update: The last_update of this MetricDetails.
        :type: int
        """
        self._last_update = last_update

    @property
    def tags(self):
        """
        Gets the tags of this MetricDetails.
        A key-value map of the point tags associated with this source

        :return: The tags of this MetricDetails.
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MetricDetails.
        A key-value map of the point tags associated with this source

        :param tags: The tags of this MetricDetails.
        :type: dict(str, str)
        """
        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

