# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EventSearchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventSearchRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cursor': 'str',
            'limit': 'int',
            'query': 'list[SearchQuery]',
            'time_range': 'EventTimeRange'
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'limit': 'limit',
            'query': 'query',
            'time_range': 'timeRange'
        }

        self._cursor = None
        self._limit = None
        self._query = None
        self._time_range = None

    @property
    def cursor(self):
        """
        Gets the cursor of this EventSearchRequest.
        The id (exclusive) from which search results resume returning.  Users should supply an entity 'id' to this property.  Its main purpose is to resume where a previous search left off because of the 'limit' parameter.  If a user supplies the last id in a set of results to cursor, while keeping the query the same, the system will return the next page of results

        :return: The cursor of this EventSearchRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """
        Sets the cursor of this EventSearchRequest.
        The id (exclusive) from which search results resume returning.  Users should supply an entity 'id' to this property.  Its main purpose is to resume where a previous search left off because of the 'limit' parameter.  If a user supplies the last id in a set of results to cursor, while keeping the query the same, the system will return the next page of results

        :param cursor: The cursor of this EventSearchRequest.
        :type: str
        """
        self._cursor = cursor

    @property
    def limit(self):
        """
        Gets the limit of this EventSearchRequest.


        :return: The limit of this EventSearchRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this EventSearchRequest.


        :param limit: The limit of this EventSearchRequest.
        :type: int
        """
        self._limit = limit

    @property
    def query(self):
        """
        Gets the query of this EventSearchRequest.
        A list of queries by which to limit the search results

        :return: The query of this EventSearchRequest.
        :rtype: list[SearchQuery]
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this EventSearchRequest.
        A list of queries by which to limit the search results

        :param query: The query of this EventSearchRequest.
        :type: list[SearchQuery]
        """
        self._query = query

    @property
    def time_range(self):
        """
        Gets the time_range of this EventSearchRequest.
        Time range for refining the event search.  Operates on the *starting time* of each event

        :return: The time_range of this EventSearchRequest.
        :rtype: EventTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """
        Sets the time_range of this EventSearchRequest.
        Time range for refining the event search.  Operates on the *starting time* of each event

        :param time_range: The time_range of this EventSearchRequest.
        :type: EventTimeRange
        """
        self._time_range = time_range

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

