# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AWSBaseCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AWSBaseCredentials - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'role_arn': 'str',
            'external_id': 'str'
        }

        self.attribute_map = {
            'role_arn': 'roleArn',
            'external_id': 'externalId'
        }

        self._role_arn = None
        self._external_id = None

    @property
    def role_arn(self):
        """
        Gets the role_arn of this AWSBaseCredentials.
        The Role ARN that the customer has created in AWS IAM to allow access to Wavefront

        :return: The role_arn of this AWSBaseCredentials.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """
        Sets the role_arn of this AWSBaseCredentials.
        The Role ARN that the customer has created in AWS IAM to allow access to Wavefront

        :param role_arn: The role_arn of this AWSBaseCredentials.
        :type: str
        """
        self._role_arn = role_arn

    @property
    def external_id(self):
        """
        Gets the external_id of this AWSBaseCredentials.
        The external id corresponding to the Role ARN

        :return: The external_id of this AWSBaseCredentials.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this AWSBaseCredentials.
        The external id corresponding to the Role ARN

        :param external_id: The external_id of this AWSBaseCredentials.
        :type: str
        """
        self._external_id = external_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

