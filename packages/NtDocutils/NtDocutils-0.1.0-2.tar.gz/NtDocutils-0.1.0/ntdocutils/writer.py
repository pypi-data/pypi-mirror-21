# NtDocutils https://ntrrg.github.io/NtDocutils/
# Copyright (c) 2017 Miguel Angel Rivera Notararigo
# Licensed under The MIT License. See LICENSE file for full licensing details.

"""NtDocutils writer.

Provides:

* :py:`class Writer`: NtDocutils basic writer.

* :py:`def apply_template`:
  :py:`docutils.writers._html_base.Writer.apply_template` overwriter.
"""

__docformat__ = "reStructuredText"

import re

from docutils.core import publish_cmdline
from docutils.writers._html_base import Writer as DocutilsWriter

from ntdocutils.cmdline import dict2args
from ntdocutils.exceptions import OfflineUnsupported


class Writer:
    """Create a basic structure for themes writers."""

    docutils_argv = {
        "report": "info",
        "strip-comments": True,
        "pep-references": True,
        "rfc-references": True,
        "syntax-highlight": "short",
        "tab-width": 4,
        "xml-declaration": True
    }
    """Options passed to Docutils."""

    def __init__(self, server=False):
        """
        ``theme`` ( :py:`str` )
          Theme to use.

        ``server`` ( :py:`str` )
          Server where assets are hosted. If ``file`` is passed as value, it
          will activate the offline mode.
        """

        if server:
            self.server = server

    def argv(self):
        """Generate the optionals arguments for Docutils.

        :py:`returns` ( :py:`list` )
          Arguments list for Docutils.
        """

        return dict2args(self.docutils_argv)

    def assets(self):
        """Generate the assets for the template.

        :py:`return` ( :py:`dict` )
          Assets to add at the template.

        See :py:`ntdocutils.writer.apply_template`.
        """

        return {}

    def offline_mode(self, destination):
        """Create offline assets in ``destination`` parent folder.

        ``destination`` ( :py:`str` )
          File generated by Doctuils.
        """

        raise OfflineUnsupported(self.theme)

    def write(self, source, destination, extra_argv=[]):
        """Generate the destination file.

        If offline mode is active, this will create a directory with the theme
        name in the ``destination`` parent folder and store the assets in
        there.

        ``source`` ( :py:`str` )
          File processed by Doctuils.

        ``destination`` ( :py:`str` )
          File generated by Doctuils.

        ``extra_argv`` ( :py:`list` )
          Docutils arguments captured from the command line.
        """

        extra_argv.extend((source, destination))

        if self.server == "file":
            self.offline_mode(destination)

        # Overwrite Docutils template processor
        DocutilsWriter.apply_template = apply_template(self.assets())

        # Launch ``rst2html5.py`` writer
        publish_cmdline(writer_name="html5", argv=self.argv() + extra_argv)


def apply_template(assets):
    """Process the template.

    Used for overwrite :py:`docutils.writers._html_base.Writer.apply_template`
    method.

    ``assets`` ( :py:`dict` )
      Assets to add at the template, see :py:`ntdocutils.writer.Writer.assets`
      .
    """

    def apply_template(self):
        template_file = open(self.document.settings.template, "rb")
        template = str(template_file.read(), "utf-8")
        template_file.close()

        # Escape ``%`` that don't are special fields
        pattern = r"%(?!\((" + "|".join(self.visitor_attributes) + r")\)s)"
        template = re.subn(pattern, "%%", template)[0]

        subs = self.interpolation_dict()
        return template.format(**assets) % subs

    return apply_template
