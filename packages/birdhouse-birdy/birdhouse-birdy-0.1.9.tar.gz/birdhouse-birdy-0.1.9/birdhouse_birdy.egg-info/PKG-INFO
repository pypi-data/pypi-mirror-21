Metadata-Version: 1.1
Name: birdhouse-birdy
Version: 0.1.9
Summary: Birdy provides a command-line tool to work with Web Processing Services (WPS).
Home-page: https://github.com/bird-house/birdy
Author: Birdhouse
Author-email: UNKNOWN
License: Apache License v2.0
Description: =====
        Birdy
        =====
        
        .. image:: https://travis-ci.org/bird-house/birdy.svg?branch=master
           :target: https://travis-ci.org/bird-house/birdy
           :alt: Travis Build
        
        
        Birdy (the bird)
           *Birdy is not a bird but likes to play with them.*
        
        Birdy is a Python package to provide a command-line tool to work with Web Processing Services (WPS). It is using OWSLib from the GeoPython project.
        
        Birdy is part of the `Birdhouse <http://bird-house.github.io/>`_ project.
        
        Install from Anaconda
        =====================
        
        .. image:: http://anaconda.org/birdhouse/birdhouse-birdy/badges/installer/conda.svg
           :target: http://anaconda.org/birdhouse/birdhouse-birdy
           :alt: Ananconda Install
        
        .. image:: http://anaconda.org/birdhouse/birdhouse-birdy/badges/build.svg
           :target: http://anaconda.org/birdhouse/birdhouse-birdy
           :alt: Anaconda Build
        
        .. image:: http://anaconda.org/birdhouse/birdhouse-birdy/badges/version.svg
           :target: http://anaconda.org/birdhouse/birdhouse-birdy
           :alt: Anaconda Version
        
        .. image:: http://anaconda.org/birdhouse/birdhouse-birdy/badges/downloads.svg
           :target: http://anaconda.org/birdhouse/birdhouse-birdy
           :alt: Anaconda Downloads
        
        .. code-block:: sh
        
           $ conda install -c birdhouse birdhouse-birdy
        
        Using the command line
        ======================
        
        Get a list of available processes on WPS with URL http://localhost:8094/wps:
        
        .. code-block:: sh
        
           # set WPS service
           $ export WPS_SERVICE=http://localhost:8094/wps
           
           # show available processes
           $ birdy -h
           usage: birdy [-h <command> [<args>]
            
           optional arguments:
             -h, --help            show this help message and exit
            
           command:
             List of available commands (wps processes)
            
             {helloworld,ultimatequestionprocess,wordcount,inout,multiplesources,chomsky,zonal_mean}
                                   Run "birdy <command> -h" to get additional help.
        
        Full `documentation <http://birdy.readthedocs.org/en/latest/>`_ is on ReadTheDocs.
        
        
        
        
        Authors
        *******
        
        Carsten Ehbrecht ehbrecht at dkrz.de
        
        Change History
        **************
        
        0.1.9 (2017-04-07)
        ==================
        
        * updated buildout and Makefile.
        * updated conda environment.
        * fixed tests.
        * replaced nose by pytest.
        * pep8.
        * fixed travis.
        * fixed ComplexData input.
        * show status message in log.
        
        0.1.8 (2016-05-02)
        ==================
        
        * added backward compatibility for owslib.wps without headers and verify parameter.
        
        0.1.7 (2016-05-02)
        ==================
        
        * added twitcher token parameter.
        * using ssl verify option again.
        
        0.1.6 (2016-03-22)
        ==================
        
        * added support for bbox parameters.
        
        0.1.5 (2016-03-15)
        ==================
        
        * fixed wps init (using standard owslib).
        * update makefile.
        
        0.1.4 (2015-10-29)
        ==================
        
        * using ssl verify option of WebProcessingSerivce
        * moved python requirements to requirements/deploy.txt
        
        0.1.3 (2015-08-20)
        ==================
        
        * more unit tests.
        * fixed unicode error in wps description.
        * using latest ComplexDataInput from owslib.wps. 
        
        0.1.2 (2015-08-14)
        ==================
        
        * fixed encoding of input text files.
        * more unit tests.
        
        0.1.1 (2015-08-13)
        ==================
        
        * allow local file path for complex inputs.
        * send complex data inline with requet to remote wps service.
        
        0.1.0 (2014-12-02)
        ==================
        
        * Initial Release.
        
Keywords: wps pywps python birdy netcdf esgf birdhouse anaconda
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: Atmospheric Science
