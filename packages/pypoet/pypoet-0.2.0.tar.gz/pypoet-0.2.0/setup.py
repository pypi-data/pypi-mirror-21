# -*- coding: utf-8 -*-

from setuptools import setup

kwargs = dict(
    name='pypoet',
    version='0.2.0',
    description='Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.',
    long_description='Poet\n====\n\nPoet helps you declare, manage and install dependencies of Python\nprojects, ensuring you have the right stack everywhere.\n\nThe package is **highly experimental** at the moment so expect things to\nchange and break. However, if you feel adventurous I\'d gladly appreciate\nfeedback and pull requests.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install pypoet\n\nIntroduction\n------------\n\n``poet`` is a tool to handle dependencies installation, building and\npackaging of Python packages. It only needs one file to do all of that:\n``poetry.toml``.\n\n.. code:: toml\n\n    [package]\n    name = "pypoet"\n    version = "0.1.0"\n    description = "Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere."\n\n    license = "MIT"\n\n    authors = [\n        "Sébastien Eustace <sebastien@eustace.io>"\n    ]\n\n    readme = \'README.md\'\n\n    repository = "https://github.com/sdispater/poet"\n    homepage = "https://github.com/sdispater/poet"\n\n    keywords = [\'packaging\', \'poet\']\n\n    include = [\'poet/**/*\', \'LICENSE\']\n\n    python = ["~2.7", "^3.2"]\n\n\n    [dependencies]\n    toml = "^0.9"\n    requests = "^2.13"\n    semantic_version = "^2.6"\n    pygments = "^2.2"\n    twine = "^1.8"\n    wheel = "^0.29"\n    pip-tools = "^1.8.2"\n    cleo = { git = "https://github.com/sdispater/cleo.git", branch = "master" }\n\n    [dev-dependencies]\n    pytest = "^3.0"\n    pytest-cov = "^2.4"\n    coverage = "<4.0"\n    httpretty = "^0.8.14"\n\n    [scripts]\n    poet = \'poet:app.run\'\n\nThere are some things we can notice here:\n\n-  It will try to enforce `semantic versioning <http://semver.org>`__ as\n   the best practice in version naming.\n-  You can specify the readme, included and excluded files: no more\n   ``MANIFEST.in``. ``poet`` will also use VCS ignore files (like\n   ``.gitignore``) to populate the ``exclude`` section.\n-  Keywords (up to 5) can be specified and will act as tags on the\n   packaging site.\n-  The dependencies sections support caret, tilde, wildcard, inequality\n   and multiple requirements.\n-  You must specify the python versions for which your package is\n   compatible.\n\n``poet`` will also detect if you are inside a virtualenv and install the\npackages accordingly. So, ``poet`` can be installed globally and used\neverywhere.\n\nWhy?\n----\n\nPackaging system and dependency management in Python is rather\nconvoluted and hard to understand for newcomers. Even for seasoned\ndevelopers it might be cumbersome at times to create all files needed in\na Python project: ``setup.py``, ``requirements.txt``, ``setup.cfg``,\n``MANIFEST.in``.\n\nSo I wanted a tool that would limit everything to a single configuration\nfile to do everything: dependency management, packaging and publishing.\n\nI takes inspiration in tools that exist in other languages, like\n``composer`` (PHP) or ``cargo`` (Rust).\n\nNote that there is no magic here, ``poet`` uses existing tools (``pip``,\n``twine``, ``setuptools``, ``distutils``, ``pip-tools``) under the hood\nto achieve that in a more intuitive way.\n\nCommands\n--------\n\ninit\n~~~~\n\nThis command will help you create a ``poetry.toml`` file interactively\nby prompting you to provide basic information about your package.\n\nIt will interactively ask you to fill in the fields, while using some\nsmart defaults.\n\n.. code:: bash\n\n    poet init\n\nOptions\n^^^^^^^\n\n-  ``--name``: Name of the package.\n-  ``--description``: Description of the package.\n-  ``--author``: Author of the package.\n-  ``--require``: Package to require with a version constraint. Should\n   be in format ``foo:1.0.0``.\n-  ``--require-dev``: Development requirements, see ``--require``.\n-  ``--index``: Index to use when searching for packages.\n\ninstall\n~~~~~~~\n\nThe ``install`` command reads the ``poetry.toml`` file from the current\ndirectory, resolves the dependencies, and installs them.\n\n.. code:: bash\n\n    poet install\n\nIf there is a ``poetry.lock`` file in the current directory, it will use\nthe exact versions from there instead of resolving them. This ensures\nthat everyone using the library will get the same versions of the\ndependencies.\n\nIf there is no ``poetry.lock`` file, Poet will create one after\ndependency resolution.\n\nOptions\n^^^^^^^\n\n-  ``--no-dev``: Do not install dev dependencies.\n-  ``--index``: The index to use when installing packages.\n\nupdate\n~~~~~~\n\nIn order to get the latest versions of the dependencies and to update\nthe ``poetry.lock`` file, you should use the ``update`` command.\n\n.. code:: bash\n\n    poet update\n\nThis will resolve all dependencies of the project and write the exact\nversions into ``poetry.lock``.\n\nIf you just want to update a few packages and not all, you can list them\nas such:\n\n.. code:: bash\n\n    poet update requests toml\n\nOptions\n^^^^^^^\n\n-  ``--index``: The index to use when installing packages.\n\npackage\n~~~~~~~\n\nThe ``package`` command builds the source and wheels archives.\n\nOptions\n^^^^^^^\n\n-  ``--no-universal``: Do not build a universal wheel.\n-  ``--no-wheels``: Build only the source package.\n-  ``-c|--clean``: Make a clean package.\n\npublish\n~~~~~~~\n\nThis command builds (if not already built) and publishes the package to\nthe remote repository.\n\nIt will automatically register the package before uploading if this is\nthe first time it is submitted.\n\nOptions\n^^^^^^^\n\n-  ``-r|--repository``: The repository to register the package to\n   (default: ``pypi``). Should match a section of your ``~/.pypirc``\n   file.\n\nsearch\n~~~~~~\n\nThis command searches for packages on a remote index.\n\n.. code:: bash\n\n    poet search requests pendulum\n\nOptions\n^^^^^^^\n\n-  ``-i|--index``: The index to use.\n-  ``-N|--only-name``: Search only in name.\n\nlock\n~~~~\n\nThis command locks (without installing) the dependencies specified in\n``poetry.toml``.\n\n.. code:: bash\n\n    poet lock\n\nOptions\n^^^^^^^\n\n-  ``-i|--index``: The index to use.\n-  ``-f|--force``: Force locking.\n\ncheck\n~~~~~\n\nThe ``check`` command will check if the ``poetry.toml`` file is valid.\n\n.. code:: bash\n\n    poet check\n\nThe ``poetry.toml`` file\n------------------------\n\nA ``poetry.toml`` file is composed of multiple sections.\n\npackage\n~~~~~~~\n\nThis section describes the specifics of the package\n\nname\n^^^^\n\nThe name of the package. **Required**\n\nversion\n^^^^^^^\n\nThe version of the package. **Required**\n\nThis should follow `semantic versioning <http://semver.org/>`__. However\nit will not be enforced and you remain free to follow another\nspecification.\n\ndescription\n^^^^^^^^^^^\n\nA short description of the package. **Required**\n\nlicense\n^^^^^^^\n\nThe license of the package.\n\nThe recommended notation for the most common licenses is (alphabetical):\n\n-  Apache-2.0\n-  BSD-2-Clause\n-  BSD-3-Clause\n-  BSD-4-Clause\n-  GPL-2.0\n-  GPL-2.0+\n-  GPL-3.0\n-  GPL-3.0+\n-  LGPL-2.1\n-  LGPL-2.1+\n-  LGPL-3.0\n-  LGPL-3.0+\n-  MIT\n\nOptional, but it is highly recommended to supply this. More identifiers\nare listed at the `SPDX Open Source License\nRegistry <https://www.spdx.org/licenses/>`__.\n\nauthors\n^^^^^^^\n\nThe authors of the package. This is a list of authors and should contain\nat least one author.\n\nAuthors must be in the form ``name <email>``.\n\nreadme\n^^^^^^\n\nThe readme file of the package. **Required**\n\nThe file can be either ``README.rst`` or ``README.md``. If it\'s a\nmarkdown file you have to install the\n`pandoc <https://github.com/jgm/pandoc>`__ utility so that it can be\nautomatically converted to a RestricturedText file.\n\nhomepage\n^^^^^^^^\n\nAn URL to the website of the project. **Optional**\n\nrepository\n^^^^^^^^^^\n\nAn URL to the repository of the project. **Optional**\n\ndocumentation\n^^^^^^^^^^^^^\n\nAn URL to the documentation of the project. **Optional**\n\nkeywords\n^^^^^^^^\n\nA list of keywords (max: 5) that the package is related to. **Optional**\n\npython\n^^^^^^\n\nA list of Python versions for which the package is compatible.\n**Required**\n\ninclude and exclude\n^^^^^^^^^^^^^^^^^^^\n\nA list of patterns that will be included in the final package.\n\nYou can explicitly specify to Poet that a set of globs should be ignored\nor included for the purposes of packaging. The globs specified in the\nexclude field identify a set of files that are not included when a\npackage is built.\n\nIf a VCS is being used for a package, the exclude field will be seeded\nwith the VCS’ ignore settings (``.gitignore`` for git for example).\n\n.. code:: toml\n\n    [package]\n    # ...\n    include = ["package/**/*.py", "package/**/.c"]\n\n.. code:: toml\n\n    exclude = ["package/excluded.py"]\n\n``dependencies`` and ``dev-dependencies``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPoet is configured to look for dependencies on\n`PyPi <https://pypi.python.org/pypi>`__ by default. Only the name and a\nversion string are required in this case.\n\n.. code:: toml\n\n    [dependencies]\n    requests = "^2.13.0"\n\nCaret requirement\n^^^^^^^^^^^^^^^^^\n\n**Caret requirements** allow SemVer compatible updates to a specified\nversion. An update is allowed if the new version number does not modify\nthe left-most non-zero digit in the major, minor, patch grouping. In\nthis case, if we ran ``poet update requests``, poet would update us to\nversion ``2.14.0`` if it was available, but would not update us to\n``3.0.0``. If instead we had specified the version string as\n``^0.1.13``, poet would update to ``0.1.14`` but not ``0.2.0``.\n``0.0.x`` is not considered compatible with any other version.\n\nHere are some more examples of caret requirements and the versions that\nwould be allowed with them:\n\n.. code:: text\n\n    ^1.2.3 := >=1.2.3 <2.0.0\n    ^1.2 := >=1.2.0 <2.0.0\n    ^1 := >=1.0.0 <2.0.0\n    ^0.2.3 := >=0.2.3 <0.3.0\n    ^0.0.3 := >=0.0.3 <0.0.4\n    ^0.0 := >=0.0.0 <0.1.0\n    ^0 := >=0.0.0 <1.0.0\n\nTilde requirements\n^^^^^^^^^^^^^^^^^^\n\n**Tilde requirements** specify a minimal version with some ability to\nupdate. If you specify a major, minor, and patch version or only a major\nand minor version, only patch-level changes are allowed. If you only\nspecify a major version, then minor- and patch-level changes are\nallowed.\n\n``~1.2.3`` is an example of a tilde requirement.\n\n.. code:: text\n\n    ~1.2.3 := >=1.2.3 <1.3.0\n    ~1.2 := >=1.2.0 <1.3.0\n    ~1 := >=1.0.0 <2.0.0\n\nWildcard requirements\n^^^^^^^^^^^^^^^^^^^^^\n\n**Wildcard requirements** allow for any version where the wildcard is\npositioned.\n\n``*``, ``1.*`` and ``1.2.*`` are examples of wildcard requirements.\n\n.. code:: text\n\n    * := >=0.0.0\n    1.* := >=1.0.0 <2.0.0\n    1.2.* := >=1.2.0 <1.3.0\n\nInequality requirements\n^^^^^^^^^^^^^^^^^^^^^^^\n\n**Inequality requirements** allow manually specifying a version range or\nan exact version to depend on.\n\nHere are some examples of inequality requirements:\n\n.. code:: text\n\n    >= 1.2.0\n    > 1\n    < 2\n    != 1.2.3\n\nMultiple requirements\n^^^^^^^^^^^^^^^^^^^^^\n\nMultiple version requirements can also be separated with a comma, e.g.\n``>= 1.2, < 1.5``.\n\n``git`` dependencies\n^^^^^^^^^^^^^^^^^^^^\n\nTo depend on a library located in a ``git`` repository, the minimum\ninformation you need to specify is the location of the repository with\nthe git key:\n\n.. code:: toml\n\n    [dependencies]\n    requests = { git = "https://github.com/kennethreitz/requests.git" }\n\nSince we haven’t specified any other information, Poet assumes that we\nintend to use the latest commit on the ``master`` branch to build our\nproject. You can combine the ``git`` key with the ``rev``, ``tag``, or\n``branch`` keys to specify something else. Here\'s an example of\nspecifying that you want to use the latest commit on a branch named\n``next``:\n\n.. code:: toml\n\n    [dependencies]\n    requests = { git = "https://github.com/kennethreitz/requests.git", branch = "next" }\n\n``scripts``\n~~~~~~~~~~~\n\nThis section describe the scripts or executable that will be installed\nwhen installing the package\n\n.. code:: toml\n\n    [scripts]\n    poet = \'poet:app.run\'\n\nHere, we will have the ``poet`` script installed which will execute\n``app.run`` in the ``poet`` package.\n\nResources\n---------\n\n-  `Official Website <https://github.com/sdispater/poet>`__\n-  `Issue Tracker <https://github.com/sdispater/poet/issues>`__\n',
    author='Sébastien Eustace',
    author_email='sebastien@eustace.io',
    url='https://github.com/sdispater/poet',
    license='MIT',
    keywords='packaging poet',
    classifiers=['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 2.7', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.5', 'Programming Language :: Python :: 3.6'],
    entry_points={'console_scripts': ['poet=poet:app.run']},
    install_requires=['cleo', 'pathlib2>=2.2.0,<3.0.0', 'pip-tools>=1.8.2,<2.0.0', 'pygments>=2.2.0,<3.0.0', 'requests>=2.13.0,<3.0.0', 'semantic_version>=2.6.0,<3.0.0', 'toml>=0.9.0,<0.10.0', 'twine>=1.8.0,<2.0.0', 'wheel>=0.29.0,<0.30.0'],
    packages=['poet', 'poet.build', 'poet.console', 'poet.exceptions', 'poet.package', 'poet.repositories', 'poet.utils', 'poet.console.commands', 'poet.console.commands.make'],
    py_modules=[],
    script_name='setup.py',
    include_package_data=True
)

setup(**kwargs)