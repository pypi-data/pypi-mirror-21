# -*- coding: utf-8 -*-

from setuptools import setup

kwargs = dict(
    name='pypoet',
    version='0.1.1',
    description='Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.',
    long_description='Poet\n====\n\nPoet helps you declare, manage and install dependencies of Python\nprojects, ensuring you have the right stack everywhere.\n\nThe package is **highly experimental** at the moment so expect things to\nchange and break. However, if you feel adventurous I\'d gladly appreciate\nfeedback and pull requests.\n\nIntroduction\n------------\n\n``poet`` is a tool to handle dependencies installation, building and\npackaging of Python packages. It only needs one file to do all of that:\n``poetry.toml``.\n\n.. code:: toml\n\n    [package]\n    name = "pypoet"\n    version = "0.1.0"\n    description = "Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere."\n\n    license = "MIT"\n\n    authors = [\n        "Sébastien Eustace <sebastien@eustace.io>"\n    ]\n\n    readme = \'README.md\'\n\n    repository = "https://github.com/sdispater/poet"\n    homepage = "https://poet.eustace.io"\n    documentation = "https://poet.eustace.io/docs"\n\n    keywords = [\'packaging\', \'poet\']\n\n    include = [\'poet/**/*\', \'LICENSE\']\n\n    python = ["~2.7", "^3.2"]\n\n\n    [dependencies]\n    toml = "^0.9"\n    requests = "^2.13"\n    semantic_version = "^2.6"\n    pygments = "^2.2"\n    twine = "^1.8"\n    wheel = "^0.29"\n    pip-tools = "^1.8.2"\n    cleo = { git = "https://github.com/sdispater/cleo.git", branch = "master" }\n\n    [dev-dependencies]\n    pytest = "^3.0"\n    pytest-cov = "^2.4"\n    coverage = "<4.0"\n    httpretty = "^0.8.14"\n\n    [scripts]\n    poet = \'poet:app.run\'\n\nThere are some things we can notice here:\n\n-  It will try to enforce `semantic versioning <http://semver.org>`__ as\n   the best practice in version naming.\n-  You can specify the readme, included and excluded files: no more\n   ``MANIFEST.in``. ``poet`` will also use VCS ignore files (like\n   ``.gitignore``) to populate the ``exclude`` section.\n-  Keywords (up to 5) can be specified and will act as tags on the\n   packaging site.\n-  The dependencies sections support caret, tilde, wildcard, inequality\n   and multiple requirements.\n-  You must specify the python versions for which your package is\n   compatible.\n\n``poet`` will also detect if you are inside a virtualenv and install the\npackages accordingly. So, ``poet`` can be installed globally and used\neverywhere.\n\nCommands\n--------\n\ninit\n~~~~\n\nThis command will help you create a ``poetry.toml`` file interactively\nby prompting you to provide basic information about your package.\n\nIt will interactively ask you to fill in the fields, while using some\nsmart defaults.\n\n.. code:: bash\n\n    poet init\n\nOptions\n^^^^^^^\n\n-  ``--name``: Name of the package.\n-  ``--description``: Description of the package.\n-  ``--author``: Author of the package.\n-  ``--require``: Package to require with a version constraint. Should\n   be in format ``foo:1.0.0``.\n-  ``--require-dev``: Development requirements, see ``--require``.\n-  ``--index``: Index to use when searching for packages.\n\ninstall\n~~~~~~~\n\nThe ``install`` command reads the ``poetry.toml`` file from the current\ndirectory, resolves the dependencies, and installs them.\n\n.. code:: bash\n\n    poet install\n\nIf there is a ``poetry.lock`` file in the current directory, it will use\nthe exact versions from there instead of resolving them. This ensures\nthat everyone using the library will get the same versions of the\ndependencies.\n\nIf there is no ``poetry.lock`` file, Poet will create one after\ndependency resolution.\n\nupdate\n~~~~~~\n\nIn order to get the latest versions of the dependencies and to update\nthe ``poetry.lock`` file, you should use the ``update`` command.\n\n.. code:: bash\n\n    poet update\n\nThis will resolve all dependencies of the project and write the exact\nversions into ``poetry.lock``.\n\nIf you just want to update a few packages and not all, you can list them\nas such:\n\n.. code:: bash\n\n    poet update requests toml\n\ncheck\n~~~~~\n\nThe ``check`` command will check if the ``poetry.toml`` file is valid.\n\n.. code:: bash\n\n    poet check\n\npackage\n~~~~~~~\n\nThe ``package`` command builds the source and wheels archives.\n\npublish\n~~~~~~~\n\nThis command builds (if not already built) and publishes the package to\nthe remote repository.\n',
    author='Sébastien Eustace',
    author_email='sebastien@eustace.io',
    url='https://github.com/sdispater/poet',
    license='MIT',
    keywords='packaging poet',
    classifiers=['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 2.7', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.5', 'Programming Language :: Python :: 3.6'],
    entry_points={'console_scripts': ['poet=poet:app.run']},
    install_requires=['cleo', 'pip-tools>=1.8.2,<2.0.0', 'pygments>=2.2.0,<3.0.0', 'requests>=2.13.0,<3.0.0', 'semantic_version>=2.6.0,<3.0.0', 'toml>=0.9.0,<0.10.0', 'twine>=1.8.0,<2.0.0', 'wheel>=0.29.0,<0.30.0'],
    packages=['poet', 'poet.build', 'poet.console', 'poet.exceptions', 'poet.package', 'poet.repositories', 'poet.utils', 'poet.console.commands', 'poet.console.commands.make'],
    py_modules=[],
    script_name='setup.py',
    include_package_data=True
)

setup(**kwargs)