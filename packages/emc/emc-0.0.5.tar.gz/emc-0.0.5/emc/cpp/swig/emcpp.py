# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_emcpp', [dirname(__file__)])
        except ImportError:
            import _emcpp
            return _emcpp
        if fp is not None:
            try:
                _mod = imp.load_module('_emcpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _emcpp = swig_import_helper()
    del swig_import_helper
else:
    import _emcpp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def randomByteArray(outp):
    return _emcpp.randomByteArray(outp)
randomByteArray = _emcpp.randomByteArray

def combineByteArray(inp1, inp2, inpl1, inpl2, max_cut_points):
    return _emcpp.combineByteArray(inp1, inp2, inpl1, inpl2, max_cut_points)
combineByteArray = _emcpp.combineByteArray

def mutateBytesInByteArray(inpl, max_randomizations):
    return _emcpp.mutateBytesInByteArray(inpl, max_randomizations)
mutateBytesInByteArray = _emcpp.mutateBytesInByteArray
class ComplementaryGenotypeSelector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplementaryGenotypeSelector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplementaryGenotypeSelector, name)
    __repr__ = _swig_repr

    def __init__(self, numUnits, numTests, minProb, survivalProb):
        this = _emcpp.new_ComplementaryGenotypeSelector(numUnits, numTests, minProb, survivalProb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_ComplementaryGenotypeSelector
    __del__ = lambda self: None

    def probabilityUsingMinimal(self, inp, outp):
        return _emcpp.ComplementaryGenotypeSelector_probabilityUsingMinimal(self, inp, outp)

    def chooseUnits(self, inp2d, inp, inp1, inp2, outp, maxAge):
        return _emcpp.ComplementaryGenotypeSelector_chooseUnits(self, inp2d, inp, inp1, inp2, outp, maxAge)

    def selectSurvivors(self, inp1, inp2, outp, maxAge):
        return _emcpp.ComplementaryGenotypeSelector_selectSurvivors(self, inp1, inp2, outp, maxAge)
ComplementaryGenotypeSelector_swigregister = _emcpp.ComplementaryGenotypeSelector_swigregister
ComplementaryGenotypeSelector_swigregister(ComplementaryGenotypeSelector)


def randf():
    return _emcpp.randf()
randf = _emcpp.randf

def cumulative(inpl):
    return _emcpp.cumulative(inpl)
cumulative = _emcpp.cumulative

def chooseOneFromCumulative(inp):
    return _emcpp.chooseOneFromCumulative(inp)
chooseOneFromCumulative = _emcpp.chooseOneFromCumulative

def chooseFromCumulative(inp, outp):
    return _emcpp.chooseFromCumulative(inp, outp)
chooseFromCumulative = _emcpp.chooseFromCumulative

_emcpp.NUM_DESCRIPTORS_swigconstant(_emcpp)
NUM_DESCRIPTORS = _emcpp.NUM_DESCRIPTORS
class DescriptorDirectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescriptorDirectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DescriptorDirectory, name)
    __repr__ = _swig_repr

    def __init__(self, numModels, numTracks, numBins, fourierSize, numClusters):
        this = _emcpp.new_DescriptorDirectory(numModels, numTracks, numBins, fourierSize, numClusters)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_DescriptorDirectory
    __del__ = lambda self: None

    def trackDescriptor(self, inp2d, outp):
        return _emcpp.DescriptorDirectory_trackDescriptor(self, inp2d, outp)

    def trackCorrelationsWithCentres(self, inp2d, trackIdx, outp):
        return _emcpp.DescriptorDirectory_trackCorrelationsWithCentres(self, inp2d, trackIdx, outp)

    def correlationsWithCentres(self, descriptor1, descriptor1_size, trackIdx, outp):
        return _emcpp.DescriptorDirectory_correlationsWithCentres(self, descriptor1, descriptor1_size, trackIdx, outp)

    def trackFitness(self, inp2d, trackIdx, outp, gamma):
        return _emcpp.DescriptorDirectory_trackFitness(self, inp2d, trackIdx, outp, gamma)

    def addDescriptor(self, inp2d, modelIdx, trackIdx):
        return _emcpp.DescriptorDirectory_addDescriptor(self, inp2d, modelIdx, trackIdx)

    def calculateCentreDescriptors(self):
        return _emcpp.DescriptorDirectory_calculateCentreDescriptors(self)

    def descriptors(self, outp):
        return _emcpp.DescriptorDirectory_descriptors(self, outp)

    def centreDescriptors(self, outp):
        return _emcpp.DescriptorDirectory_centreDescriptors(self, outp)

    def clusters(self, outp):
        return _emcpp.DescriptorDirectory_clusters(self, outp)

    def fourier(self, inpl, outp, normalize):
        return _emcpp.DescriptorDirectory_fourier(self, inpl, outp, normalize)

    def diffFourier(self, inpl, outp, normalize):
        return _emcpp.DescriptorDirectory_diffFourier(self, inpl, outp, normalize)
DescriptorDirectory_swigregister = _emcpp.DescriptorDirectory_swigregister
DescriptorDirectory_swigregister(DescriptorDirectory)


def normalize(inpl):
    return _emcpp.normalize(inpl)
normalize = _emcpp.normalize

def histogram(inp, output, output_size, normalize):
    return _emcpp.histogram(inp, output, output_size, normalize)
histogram = _emcpp.histogram

def diffHistogram(inp, output, output_size, normalize):
    return _emcpp.diffHistogram(inp, output, output_size, normalize)
diffHistogram = _emcpp.diffHistogram

def correlation(inp1, inp2, outp, num_bins):
    return _emcpp.correlation(inp1, inp2, outp, num_bins)
correlation = _emcpp.correlation

def fitness(inpl, gamma):
    return _emcpp.fitness(inpl, gamma)
fitness = _emcpp.fitness

def realignImportances(inpl, inp2d, alpha):
    return _emcpp.realignImportances(inpl, inp2d, alpha)
realignImportances = _emcpp.realignImportances

_emcpp.props_per_note_swigconstant(_emcpp)
props_per_note = _emcpp.props_per_note
class ModelBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelBuilder, name)
    __repr__ = _swig_repr

    def __init__(self, numTracks=4, restsEnabled=False, velocityEnabled=False, omitZeroDurations=True, omitZeroPitches=True, omitZeroVelocities=True, ioiMask=0xFF, durationMask=0xFF, pitchMask=0x7F, velocityMask=0x7F, debug=False):
        this = _emcpp.new_ModelBuilder(numTracks, restsEnabled, velocityEnabled, omitZeroDurations, omitZeroPitches, omitZeroVelocities, ioiMask, durationMask, pitchMask, velocityMask, debug)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_ModelBuilder
    __del__ = lambda self: None

    def addNotesFromBytes(self, inp):
        return _emcpp.ModelBuilder_addNotesFromBytes(self, inp)

    def clear(self):
        return _emcpp.ModelBuilder_clear(self)

    def numNotes(self, trackIdx):
        return _emcpp.ModelBuilder_numNotes(self, trackIdx)

    def length(self, *args):
        return _emcpp.ModelBuilder_length(self, *args)

    def bytesPerNote(self):
        return _emcpp.ModelBuilder_bytesPerNote(self)

    def notes(self, outp, trackIdx):
        return _emcpp.ModelBuilder_notes(self, outp, trackIdx)

    def setDebug(self, debug):
        return _emcpp.ModelBuilder_setDebug(self, debug)
ModelBuilder_swigregister = _emcpp.ModelBuilder_swigregister
ModelBuilder_swigregister(ModelBuilder)


def entropy(inp):
    return _emcpp.entropy(inp)
entropy = _emcpp.entropy
class ImmediateOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImmediateOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImmediateOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_ImmediateOci(ramSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_ImmediateOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.ImmediateOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.ImmediateOci_interpret(self)

    def interpretNext(self):
        return _emcpp.ImmediateOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.ImmediateOci_interpretN(self, n)
    counterSize = _emcpp.ImmediateOci_counterSize
    numRegisters = _emcpp.ImmediateOci_numRegisters
    numCategories = _emcpp.ImmediateOci_numCategories

    def geneticStringSize(self):
        return _emcpp.ImmediateOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.ImmediateOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.ImmediateOci_setCounter(self, counter)

    def registers(self, outp):
        return _emcpp.ImmediateOci_registers(self, outp)

    def registerAt(self, index):
        return _emcpp.ImmediateOci_registerAt(self, index)

    def setRegisters(self, inp):
        return _emcpp.ImmediateOci_setRegisters(self, inp)

    def setRegister(self, index, value):
        return _emcpp.ImmediateOci_setRegister(self, index, value)

    def acc(self):
        return _emcpp.ImmediateOci_acc(self)

    def setAcc(self, acc):
        return _emcpp.ImmediateOci_setAcc(self, acc)

    def dataPtr(self):
        return _emcpp.ImmediateOci_dataPtr(self)

    def setDataPtr(self, dataPtr):
        return _emcpp.ImmediateOci_setDataPtr(self, dataPtr)

    def flags(self):
        return _emcpp.ImmediateOci_flags(self)

    def setFlags(self, flags):
        return _emcpp.ImmediateOci_setFlags(self, flags)

    def stackPtr(self):
        return _emcpp.ImmediateOci_stackPtr(self)

    def setStackPtr(self, stackPtr):
        return _emcpp.ImmediateOci_setStackPtr(self, stackPtr)

    def ram(self, outp):
        return _emcpp.ImmediateOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.ImmediateOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.ImmediateOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.ImmediateOci_setRamAt(self, index, value)

    def stack(self, outp):
        return _emcpp.ImmediateOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.ImmediateOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.ImmediateOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.ImmediateOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.ImmediateOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.ImmediateOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.ImmediateOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.ImmediateOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.ImmediateOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.ImmediateOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.ImmediateOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.ImmediateOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.ImmediateOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.ImmediateOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.ImmediateOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.ImmediateOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.ImmediateOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.ImmediateOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.ImmediateOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.ImmediateOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.ImmediateOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.ImmediateOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.ImmediateOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.ImmediateOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.ImmediateOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.ImmediateOci_setTouchedAt(self, index, value)

    def movR_DH(self, r):
        return _emcpp.ImmediateOci_movR_DH(self, r)

    def movDH_R(self, r):
        return _emcpp.ImmediateOci_movDH_R(self, r)

    def movR_DL(self, r):
        return _emcpp.ImmediateOci_movR_DL(self, r)

    def movDL_R(self, r):
        return _emcpp.ImmediateOci_movDL_R(self, r)

    def movR_DPtr(self, r):
        return _emcpp.ImmediateOci_movR_DPtr(self, r)

    def moviR_DPtr(self, r):
        return _emcpp.ImmediateOci_moviR_DPtr(self, r)

    def movDPtr_R(self, r):
        return _emcpp.ImmediateOci_movDPtr_R(self, r)

    def moviDPtr_R(self, r):
        return _emcpp.ImmediateOci_moviDPtr_R(self, r)

    def movR_Next(self, r):
        return _emcpp.ImmediateOci_movR_Next(self, r)

    def movR_A(self, r):
        return _emcpp.ImmediateOci_movR_A(self, r)

    def movA_R(self, r):
        return _emcpp.ImmediateOci_movA_R(self, r)

    def xchA_R(self, r):
        return _emcpp.ImmediateOci_xchA_R(self, r)

    def movA_DH(self):
        return _emcpp.ImmediateOci_movA_DH(self)

    def movA_DL(self):
        return _emcpp.ImmediateOci_movA_DL(self)

    def movDH_A(self):
        return _emcpp.ImmediateOci_movDH_A(self)

    def movDL_A(self):
        return _emcpp.ImmediateOci_movDL_A(self)

    def movA_DPtr(self):
        return _emcpp.ImmediateOci_movA_DPtr(self)

    def moviA_DPtr(self):
        return _emcpp.ImmediateOci_moviA_DPtr(self)

    def movDPtr_A(self):
        return _emcpp.ImmediateOci_movDPtr_A(self)

    def moviDPtr_A(self):
        return _emcpp.ImmediateOci_moviDPtr_A(self)

    def xchA_DPtr(self):
        return _emcpp.ImmediateOci_xchA_DPtr(self)

    def xchiA_DPtr(self):
        return _emcpp.ImmediateOci_xchiA_DPtr(self)

    def movDPtr_Next(self):
        return _emcpp.ImmediateOci_movDPtr_Next(self)

    def movDH_Next(self):
        return _emcpp.ImmediateOci_movDH_Next(self)

    def movDL_Next(self):
        return _emcpp.ImmediateOci_movDL_Next(self)

    def movA_Next(self):
        return _emcpp.ImmediateOci_movA_Next(self)

    def cplC(self):
        return _emcpp.ImmediateOci_cplC(self)

    def inc_A(self):
        return _emcpp.ImmediateOci_inc_A(self)

    def inc_R(self, r):
        return _emcpp.ImmediateOci_inc_R(self, r)

    def dec_R(self, r):
        return _emcpp.ImmediateOci_dec_R(self, r)

    def dec_A(self):
        return _emcpp.ImmediateOci_dec_A(self)

    def inc_D(self):
        return _emcpp.ImmediateOci_inc_D(self)

    def dec_D(self):
        return _emcpp.ImmediateOci_dec_D(self)

    def cplA(self):
        return _emcpp.ImmediateOci_cplA(self)

    def anlA_Next(self):
        return _emcpp.ImmediateOci_anlA_Next(self)

    def orlA_Next(self):
        return _emcpp.ImmediateOci_orlA_Next(self)

    def anlA_DPtr(self):
        return _emcpp.ImmediateOci_anlA_DPtr(self)

    def orlA_DPtr(self):
        return _emcpp.ImmediateOci_orlA_DPtr(self)

    def anlA_R(self, r):
        return _emcpp.ImmediateOci_anlA_R(self, r)

    def orlA_R(self, r):
        return _emcpp.ImmediateOci_orlA_R(self, r)

    def addA_R(self, r):
        return _emcpp.ImmediateOci_addA_R(self, r)

    def addcA_R(self, r):
        return _emcpp.ImmediateOci_addcA_R(self, r)

    def subA_R(self, r):
        return _emcpp.ImmediateOci_subA_R(self, r)

    def subbA_R(self, r):
        return _emcpp.ImmediateOci_subbA_R(self, r)

    def addA_Next(self):
        return _emcpp.ImmediateOci_addA_Next(self)

    def addcA_Next(self):
        return _emcpp.ImmediateOci_addcA_Next(self)

    def subA_Next(self):
        return _emcpp.ImmediateOci_subA_Next(self)

    def subbA_Next(self):
        return _emcpp.ImmediateOci_subbA_Next(self)

    def addA_DPtr(self):
        return _emcpp.ImmediateOci_addA_DPtr(self)

    def addcA_DPtr(self):
        return _emcpp.ImmediateOci_addcA_DPtr(self)

    def subA_DPtr(self):
        return _emcpp.ImmediateOci_subA_DPtr(self)

    def subbA_DPtr(self):
        return _emcpp.ImmediateOci_subbA_DPtr(self)

    def rlA(self):
        return _emcpp.ImmediateOci_rlA(self)

    def rrA(self):
        return _emcpp.ImmediateOci_rrA(self)

    def rlcA(self):
        return _emcpp.ImmediateOci_rlcA(self)

    def rrcA(self):
        return _emcpp.ImmediateOci_rrcA(self)

    def pushDH(self):
        return _emcpp.ImmediateOci_pushDH(self)

    def popDH(self):
        return _emcpp.ImmediateOci_popDH(self)

    def pushDL(self):
        return _emcpp.ImmediateOci_pushDL(self)

    def popDL(self):
        return _emcpp.ImmediateOci_popDL(self)

    def pushA(self):
        return _emcpp.ImmediateOci_pushA(self)

    def popA(self):
        return _emcpp.ImmediateOci_popA(self)

    def sjmpNext(self):
        return _emcpp.ImmediateOci_sjmpNext(self)

    def jmpNext(self):
        return _emcpp.ImmediateOci_jmpNext(self)

    def jmpD(self):
        return _emcpp.ImmediateOci_jmpD(self)

    def callD(self):
        return _emcpp.ImmediateOci_callD(self)

    def callNext(self):
        return _emcpp.ImmediateOci_callNext(self)

    def ret(self):
        return _emcpp.ImmediateOci_ret(self)

    def jnc_D(self):
        return _emcpp.ImmediateOci_jnc_D(self)

    def jc_D(self):
        return _emcpp.ImmediateOci_jc_D(self)

    def sjnc_Next(self):
        return _emcpp.ImmediateOci_sjnc_Next(self)

    def sjc_Next(self):
        return _emcpp.ImmediateOci_sjc_Next(self)

    def jnc_Next(self):
        return _emcpp.ImmediateOci_jnc_Next(self)

    def jc_Next(self):
        return _emcpp.ImmediateOci_jc_Next(self)

    def jnzA_D(self):
        return _emcpp.ImmediateOci_jnzA_D(self)

    def jzA_D(self):
        return _emcpp.ImmediateOci_jzA_D(self)

    def sjnzA_Next(self):
        return _emcpp.ImmediateOci_sjnzA_Next(self)

    def sjzA_Next(self):
        return _emcpp.ImmediateOci_sjzA_Next(self)

    def jnzA_Next(self):
        return _emcpp.ImmediateOci_jnzA_Next(self)

    def jzA_Next(self):
        return _emcpp.ImmediateOci_jzA_Next(self)

    def csjneA_Next_Next(self):
        return _emcpp.ImmediateOci_csjneA_Next_Next(self)

    def cjneA_Next_Next(self):
        return _emcpp.ImmediateOci_cjneA_Next_Next(self)

    def cjneA_Next_D(self):
        return _emcpp.ImmediateOci_cjneA_Next_D(self)

    def halt(self):
        return _emcpp.ImmediateOci_halt(self)

    def outR(self, r):
        return _emcpp.ImmediateOci_outR(self, r)

    def outDPtr(self, n):
        return _emcpp.ImmediateOci_outDPtr(self, n)

    def outiDPtr(self, n):
        return _emcpp.ImmediateOci_outiDPtr(self, n)

    def outNext(self, n):
        return _emcpp.ImmediateOci_outNext(self, n)
ImmediateOci_swigregister = _emcpp.ImmediateOci_swigregister
ImmediateOci_swigregister(ImmediateOci)

class ImmediateHarvardOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImmediateHarvardOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImmediateHarvardOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, romSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_ImmediateHarvardOci(ramSize, romSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_ImmediateHarvardOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.ImmediateHarvardOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.ImmediateHarvardOci_interpret(self)

    def interpretNext(self):
        return _emcpp.ImmediateHarvardOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.ImmediateHarvardOci_interpretN(self, n)
    counterSize = _emcpp.ImmediateHarvardOci_counterSize
    numRegisters = _emcpp.ImmediateHarvardOci_numRegisters
    numCategories = _emcpp.ImmediateHarvardOci_numCategories

    def geneticStringSize(self):
        return _emcpp.ImmediateHarvardOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.ImmediateHarvardOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.ImmediateHarvardOci_setCounter(self, counter)

    def registers(self, outp):
        return _emcpp.ImmediateHarvardOci_registers(self, outp)

    def registerAt(self, index):
        return _emcpp.ImmediateHarvardOci_registerAt(self, index)

    def setRegisters(self, inp):
        return _emcpp.ImmediateHarvardOci_setRegisters(self, inp)

    def setRegister(self, index, value):
        return _emcpp.ImmediateHarvardOci_setRegister(self, index, value)

    def acc(self):
        return _emcpp.ImmediateHarvardOci_acc(self)

    def setAcc(self, acc):
        return _emcpp.ImmediateHarvardOci_setAcc(self, acc)

    def dataPtr(self):
        return _emcpp.ImmediateHarvardOci_dataPtr(self)

    def setDataPtr(self, dataPtr):
        return _emcpp.ImmediateHarvardOci_setDataPtr(self, dataPtr)

    def flags(self):
        return _emcpp.ImmediateHarvardOci_flags(self)

    def setFlags(self, flags):
        return _emcpp.ImmediateHarvardOci_setFlags(self, flags)

    def stackPtr(self):
        return _emcpp.ImmediateHarvardOci_stackPtr(self)

    def setStackPtr(self, stackPtr):
        return _emcpp.ImmediateHarvardOci_setStackPtr(self, stackPtr)

    def ram(self, outp):
        return _emcpp.ImmediateHarvardOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.ImmediateHarvardOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.ImmediateHarvardOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setRamAt(self, index, value)

    def rom(self, outp):
        return _emcpp.ImmediateHarvardOci_rom(self, outp)

    def romAt(self, index):
        return _emcpp.ImmediateHarvardOci_romAt(self, index)

    def setRom(self, inp):
        return _emcpp.ImmediateHarvardOci_setRom(self, inp)

    def setRomAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setRomAt(self, index, value)

    def stack(self, outp):
        return _emcpp.ImmediateHarvardOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.ImmediateHarvardOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.ImmediateHarvardOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.ImmediateHarvardOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.ImmediateHarvardOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.ImmediateHarvardOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.ImmediateHarvardOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.ImmediateHarvardOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.ImmediateHarvardOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.ImmediateHarvardOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.ImmediateHarvardOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.ImmediateHarvardOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.ImmediateHarvardOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.ImmediateHarvardOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.ImmediateHarvardOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.ImmediateHarvardOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.ImmediateHarvardOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.ImmediateHarvardOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.ImmediateHarvardOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.ImmediateHarvardOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.ImmediateHarvardOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.ImmediateHarvardOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.ImmediateHarvardOci_setTouchedAt(self, index, value)

    def movR_DH(self, r):
        return _emcpp.ImmediateHarvardOci_movR_DH(self, r)

    def movDH_R(self, r):
        return _emcpp.ImmediateHarvardOci_movDH_R(self, r)

    def movR_DL(self, r):
        return _emcpp.ImmediateHarvardOci_movR_DL(self, r)

    def movDL_R(self, r):
        return _emcpp.ImmediateHarvardOci_movDL_R(self, r)

    def movR_DPtr(self, r):
        return _emcpp.ImmediateHarvardOci_movR_DPtr(self, r)

    def moviR_DPtr(self, r):
        return _emcpp.ImmediateHarvardOci_moviR_DPtr(self, r)

    def movDPtr_R(self, r):
        return _emcpp.ImmediateHarvardOci_movDPtr_R(self, r)

    def moviDPtr_R(self, r):
        return _emcpp.ImmediateHarvardOci_moviDPtr_R(self, r)

    def movR_Next(self, r):
        return _emcpp.ImmediateHarvardOci_movR_Next(self, r)

    def movR_A(self, r):
        return _emcpp.ImmediateHarvardOci_movR_A(self, r)

    def movA_R(self, r):
        return _emcpp.ImmediateHarvardOci_movA_R(self, r)

    def xchA_R(self, r):
        return _emcpp.ImmediateHarvardOci_xchA_R(self, r)

    def movA_DH(self):
        return _emcpp.ImmediateHarvardOci_movA_DH(self)

    def movA_DL(self):
        return _emcpp.ImmediateHarvardOci_movA_DL(self)

    def movDH_A(self):
        return _emcpp.ImmediateHarvardOci_movDH_A(self)

    def movDL_A(self):
        return _emcpp.ImmediateHarvardOci_movDL_A(self)

    def movA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_movA_DPtr(self)

    def moviA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_moviA_DPtr(self)

    def movDPtr_A(self):
        return _emcpp.ImmediateHarvardOci_movDPtr_A(self)

    def moviDPtr_A(self):
        return _emcpp.ImmediateHarvardOci_moviDPtr_A(self)

    def xchA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_xchA_DPtr(self)

    def xchiA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_xchiA_DPtr(self)

    def movDPtr_Next(self):
        return _emcpp.ImmediateHarvardOci_movDPtr_Next(self)

    def movDH_Next(self):
        return _emcpp.ImmediateHarvardOci_movDH_Next(self)

    def movDL_Next(self):
        return _emcpp.ImmediateHarvardOci_movDL_Next(self)

    def movA_Next(self):
        return _emcpp.ImmediateHarvardOci_movA_Next(self)

    def cplC(self):
        return _emcpp.ImmediateHarvardOci_cplC(self)

    def inc_A(self):
        return _emcpp.ImmediateHarvardOci_inc_A(self)

    def inc_R(self, r):
        return _emcpp.ImmediateHarvardOci_inc_R(self, r)

    def dec_R(self, r):
        return _emcpp.ImmediateHarvardOci_dec_R(self, r)

    def dec_A(self):
        return _emcpp.ImmediateHarvardOci_dec_A(self)

    def inc_D(self):
        return _emcpp.ImmediateHarvardOci_inc_D(self)

    def dec_D(self):
        return _emcpp.ImmediateHarvardOci_dec_D(self)

    def cplA(self):
        return _emcpp.ImmediateHarvardOci_cplA(self)

    def anlA_Next(self):
        return _emcpp.ImmediateHarvardOci_anlA_Next(self)

    def orlA_Next(self):
        return _emcpp.ImmediateHarvardOci_orlA_Next(self)

    def anlA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_anlA_DPtr(self)

    def orlA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_orlA_DPtr(self)

    def anlA_R(self, r):
        return _emcpp.ImmediateHarvardOci_anlA_R(self, r)

    def orlA_R(self, r):
        return _emcpp.ImmediateHarvardOci_orlA_R(self, r)

    def addA_R(self, r):
        return _emcpp.ImmediateHarvardOci_addA_R(self, r)

    def addcA_R(self, r):
        return _emcpp.ImmediateHarvardOci_addcA_R(self, r)

    def subA_R(self, r):
        return _emcpp.ImmediateHarvardOci_subA_R(self, r)

    def subbA_R(self, r):
        return _emcpp.ImmediateHarvardOci_subbA_R(self, r)

    def addA_Next(self):
        return _emcpp.ImmediateHarvardOci_addA_Next(self)

    def addcA_Next(self):
        return _emcpp.ImmediateHarvardOci_addcA_Next(self)

    def subA_Next(self):
        return _emcpp.ImmediateHarvardOci_subA_Next(self)

    def subbA_Next(self):
        return _emcpp.ImmediateHarvardOci_subbA_Next(self)

    def addA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_addA_DPtr(self)

    def addcA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_addcA_DPtr(self)

    def subA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_subA_DPtr(self)

    def subbA_DPtr(self):
        return _emcpp.ImmediateHarvardOci_subbA_DPtr(self)

    def rlA(self):
        return _emcpp.ImmediateHarvardOci_rlA(self)

    def rrA(self):
        return _emcpp.ImmediateHarvardOci_rrA(self)

    def rlcA(self):
        return _emcpp.ImmediateHarvardOci_rlcA(self)

    def rrcA(self):
        return _emcpp.ImmediateHarvardOci_rrcA(self)

    def pushDH(self):
        return _emcpp.ImmediateHarvardOci_pushDH(self)

    def popDH(self):
        return _emcpp.ImmediateHarvardOci_popDH(self)

    def pushDL(self):
        return _emcpp.ImmediateHarvardOci_pushDL(self)

    def popDL(self):
        return _emcpp.ImmediateHarvardOci_popDL(self)

    def pushA(self):
        return _emcpp.ImmediateHarvardOci_pushA(self)

    def popA(self):
        return _emcpp.ImmediateHarvardOci_popA(self)

    def sjmpNext(self):
        return _emcpp.ImmediateHarvardOci_sjmpNext(self)

    def jmpNext(self):
        return _emcpp.ImmediateHarvardOci_jmpNext(self)

    def jmpD(self):
        return _emcpp.ImmediateHarvardOci_jmpD(self)

    def callD(self):
        return _emcpp.ImmediateHarvardOci_callD(self)

    def callNext(self):
        return _emcpp.ImmediateHarvardOci_callNext(self)

    def ret(self):
        return _emcpp.ImmediateHarvardOci_ret(self)

    def jnc_D(self):
        return _emcpp.ImmediateHarvardOci_jnc_D(self)

    def jc_D(self):
        return _emcpp.ImmediateHarvardOci_jc_D(self)

    def sjnc_Next(self):
        return _emcpp.ImmediateHarvardOci_sjnc_Next(self)

    def sjc_Next(self):
        return _emcpp.ImmediateHarvardOci_sjc_Next(self)

    def jnc_Next(self):
        return _emcpp.ImmediateHarvardOci_jnc_Next(self)

    def jc_Next(self):
        return _emcpp.ImmediateHarvardOci_jc_Next(self)

    def jnzA_D(self):
        return _emcpp.ImmediateHarvardOci_jnzA_D(self)

    def jzA_D(self):
        return _emcpp.ImmediateHarvardOci_jzA_D(self)

    def sjnzA_Next(self):
        return _emcpp.ImmediateHarvardOci_sjnzA_Next(self)

    def sjzA_Next(self):
        return _emcpp.ImmediateHarvardOci_sjzA_Next(self)

    def jnzA_Next(self):
        return _emcpp.ImmediateHarvardOci_jnzA_Next(self)

    def jzA_Next(self):
        return _emcpp.ImmediateHarvardOci_jzA_Next(self)

    def csjneA_Next_Next(self):
        return _emcpp.ImmediateHarvardOci_csjneA_Next_Next(self)

    def cjneA_Next_Next(self):
        return _emcpp.ImmediateHarvardOci_cjneA_Next_Next(self)

    def cjneA_Next_D(self):
        return _emcpp.ImmediateHarvardOci_cjneA_Next_D(self)

    def halt(self):
        return _emcpp.ImmediateHarvardOci_halt(self)

    def outR(self, r):
        return _emcpp.ImmediateHarvardOci_outR(self, r)

    def outDPtr(self, n):
        return _emcpp.ImmediateHarvardOci_outDPtr(self, n)

    def outiDPtr(self, n):
        return _emcpp.ImmediateHarvardOci_outiDPtr(self, n)

    def outNext(self, n):
        return _emcpp.ImmediateHarvardOci_outNext(self, n)
ImmediateHarvardOci_swigregister = _emcpp.ImmediateHarvardOci_swigregister
ImmediateHarvardOci_swigregister(ImmediateHarvardOci)

class IndirectOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndirectOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndirectOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_IndirectOci(ramSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_IndirectOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.IndirectOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.IndirectOci_interpret(self)

    def interpretNext(self):
        return _emcpp.IndirectOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.IndirectOci_interpretN(self, n)
    counterSize = _emcpp.IndirectOci_counterSize
    numRegisters = _emcpp.IndirectOci_numRegisters
    numCategories = _emcpp.IndirectOci_numCategories

    def geneticStringSize(self):
        return _emcpp.IndirectOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.IndirectOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.IndirectOci_setCounter(self, counter)

    def registers(self, outp):
        return _emcpp.IndirectOci_registers(self, outp)

    def registerAt(self, index):
        return _emcpp.IndirectOci_registerAt(self, index)

    def setRegisters(self, inp):
        return _emcpp.IndirectOci_setRegisters(self, inp)

    def setRegister(self, index, value):
        return _emcpp.IndirectOci_setRegister(self, index, value)

    def acc(self):
        return _emcpp.IndirectOci_acc(self)

    def setAcc(self, acc):
        return _emcpp.IndirectOci_setAcc(self, acc)

    def dataPtr(self):
        return _emcpp.IndirectOci_dataPtr(self)

    def setDataPtr(self, dataPtr):
        return _emcpp.IndirectOci_setDataPtr(self, dataPtr)

    def flags(self):
        return _emcpp.IndirectOci_flags(self)

    def setFlags(self, flags):
        return _emcpp.IndirectOci_setFlags(self, flags)

    def stackPtr(self):
        return _emcpp.IndirectOci_stackPtr(self)

    def setStackPtr(self, stackPtr):
        return _emcpp.IndirectOci_setStackPtr(self, stackPtr)

    def ram(self, outp):
        return _emcpp.IndirectOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.IndirectOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.IndirectOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.IndirectOci_setRamAt(self, index, value)

    def stack(self, outp):
        return _emcpp.IndirectOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.IndirectOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.IndirectOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.IndirectOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.IndirectOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.IndirectOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.IndirectOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.IndirectOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.IndirectOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.IndirectOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.IndirectOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.IndirectOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.IndirectOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.IndirectOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.IndirectOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.IndirectOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.IndirectOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.IndirectOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.IndirectOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.IndirectOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.IndirectOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.IndirectOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.IndirectOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.IndirectOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.IndirectOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.IndirectOci_setTouchedAt(self, index, value)

    def movR_DH(self, r):
        return _emcpp.IndirectOci_movR_DH(self, r)

    def movDH_R(self, r):
        return _emcpp.IndirectOci_movDH_R(self, r)

    def movR_DL(self, r):
        return _emcpp.IndirectOci_movR_DL(self, r)

    def movDL_R(self, r):
        return _emcpp.IndirectOci_movDL_R(self, r)

    def movR_DPtr(self, r):
        return _emcpp.IndirectOci_movR_DPtr(self, r)

    def movDPtr_R(self, r):
        return _emcpp.IndirectOci_movDPtr_R(self, r)

    def movR_A(self, r):
        return _emcpp.IndirectOci_movR_A(self, r)

    def movA_R(self, r):
        return _emcpp.IndirectOci_movA_R(self, r)

    def xchA_R(self, r):
        return _emcpp.IndirectOci_xchA_R(self, r)

    def movA_DH(self):
        return _emcpp.IndirectOci_movA_DH(self)

    def movA_DL(self):
        return _emcpp.IndirectOci_movA_DL(self)

    def movDH_A(self):
        return _emcpp.IndirectOci_movDH_A(self)

    def movDL_A(self):
        return _emcpp.IndirectOci_movDL_A(self)

    def movA_DPtr(self):
        return _emcpp.IndirectOci_movA_DPtr(self)

    def movDPtr_A(self):
        return _emcpp.IndirectOci_movDPtr_A(self)

    def cplC(self):
        return _emcpp.IndirectOci_cplC(self)

    def inc_A(self):
        return _emcpp.IndirectOci_inc_A(self)

    def dec_A(self):
        return _emcpp.IndirectOci_dec_A(self)

    def inc_D(self):
        return _emcpp.IndirectOci_inc_D(self)

    def dec_D(self):
        return _emcpp.IndirectOci_dec_D(self)

    def cplA(self):
        return _emcpp.IndirectOci_cplA(self)

    def anlA_RPtr(self, rp):
        return _emcpp.IndirectOci_anlA_RPtr(self, rp)

    def anlA_R(self, r):
        return _emcpp.IndirectOci_anlA_R(self, r)

    def orlA_R(self, r):
        return _emcpp.IndirectOci_orlA_R(self, r)

    def addA_R(self, r):
        return _emcpp.IndirectOci_addA_R(self, r)

    def addcA_R(self, r):
        return _emcpp.IndirectOci_addcA_R(self, r)

    def subA_R(self, r):
        return _emcpp.IndirectOci_subA_R(self, r)

    def subbA_R(self, r):
        return _emcpp.IndirectOci_subbA_R(self, r)

    def orlA_RPtr(self, rp):
        return _emcpp.IndirectOci_orlA_RPtr(self, rp)

    def anlA_DPtr(self):
        return _emcpp.IndirectOci_anlA_DPtr(self)

    def orlA_DPtr(self):
        return _emcpp.IndirectOci_orlA_DPtr(self)

    def addA_DPtr(self):
        return _emcpp.IndirectOci_addA_DPtr(self)

    def addcA_DPtr(self):
        return _emcpp.IndirectOci_addcA_DPtr(self)

    def addA_RPtr(self, rp):
        return _emcpp.IndirectOci_addA_RPtr(self, rp)

    def addcA_RPtr(self, rp):
        return _emcpp.IndirectOci_addcA_RPtr(self, rp)

    def subA_RPtr(self, rp):
        return _emcpp.IndirectOci_subA_RPtr(self, rp)

    def subbA_RPtr(self, rp):
        return _emcpp.IndirectOci_subbA_RPtr(self, rp)

    def subA_DPtr(self):
        return _emcpp.IndirectOci_subA_DPtr(self)

    def subbA_DPtr(self):
        return _emcpp.IndirectOci_subbA_DPtr(self)

    def rlA(self):
        return _emcpp.IndirectOci_rlA(self)

    def rrA(self):
        return _emcpp.IndirectOci_rrA(self)

    def rlcA(self):
        return _emcpp.IndirectOci_rlcA(self)

    def rrcA(self):
        return _emcpp.IndirectOci_rrcA(self)

    def pushDH(self):
        return _emcpp.IndirectOci_pushDH(self)

    def popDH(self):
        return _emcpp.IndirectOci_popDH(self)

    def pushDL(self):
        return _emcpp.IndirectOci_pushDL(self)

    def popDL(self):
        return _emcpp.IndirectOci_popDL(self)

    def pushA(self):
        return _emcpp.IndirectOci_pushA(self)

    def popA(self):
        return _emcpp.IndirectOci_popA(self)

    def pushR(self, r):
        return _emcpp.IndirectOci_pushR(self, r)

    def popR(self, r):
        return _emcpp.IndirectOci_popR(self, r)

    def sjmpR(self, r):
        return _emcpp.IndirectOci_sjmpR(self, r)

    def jmpR(self, rp):
        return _emcpp.IndirectOci_jmpR(self, rp)

    def jmpD(self):
        return _emcpp.IndirectOci_jmpD(self)

    def callD(self):
        return _emcpp.IndirectOci_callD(self)

    def ret(self):
        return _emcpp.IndirectOci_ret(self)

    def jnc_D(self):
        return _emcpp.IndirectOci_jnc_D(self)

    def scallR(self, r):
        return _emcpp.IndirectOci_scallR(self, r)

    def callR(self, rp):
        return _emcpp.IndirectOci_callR(self, rp)

    def jc_D(self):
        return _emcpp.IndirectOci_jc_D(self)

    def jnzA_D(self):
        return _emcpp.IndirectOci_jnzA_D(self)

    def jzA_D(self):
        return _emcpp.IndirectOci_jzA_D(self)

    def halt(self):
        return _emcpp.IndirectOci_halt(self)

    def sjnc_R(self, r):
        return _emcpp.IndirectOci_sjnc_R(self, r)

    def sjc_R(self, r):
        return _emcpp.IndirectOci_sjc_R(self, r)

    def jnc_R(self, rp):
        return _emcpp.IndirectOci_jnc_R(self, rp)

    def jc_R(self, rp):
        return _emcpp.IndirectOci_jc_R(self, rp)

    def sjnzA_R(self, r):
        return _emcpp.IndirectOci_sjnzA_R(self, r)

    def sjzA_R(self, r):
        return _emcpp.IndirectOci_sjzA_R(self, r)

    def jnzA_R(self, rp):
        return _emcpp.IndirectOci_jnzA_R(self, rp)

    def jzA_R(self, rp):
        return _emcpp.IndirectOci_jzA_R(self, rp)

    def outRPtr(self, rp):
        return _emcpp.IndirectOci_outRPtr(self, rp)

    def outR(self, r):
        return _emcpp.IndirectOci_outR(self, r)

    def outDPtr(self, n):
        return _emcpp.IndirectOci_outDPtr(self, n)
IndirectOci_swigregister = _emcpp.IndirectOci_swigregister
IndirectOci_swigregister(IndirectOci)

class TestOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TestOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_TestOci(ramSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_TestOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.TestOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.TestOci_interpret(self)

    def interpretNext(self):
        return _emcpp.TestOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.TestOci_interpretN(self, n)
    counterSize = _emcpp.TestOci_counterSize
    numRegisters = _emcpp.TestOci_numRegisters
    numCategories = _emcpp.TestOci_numCategories

    def geneticStringSize(self):
        return _emcpp.TestOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.TestOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.TestOci_setCounter(self, counter)

    def registers(self, outp):
        return _emcpp.TestOci_registers(self, outp)

    def registerAt(self, index):
        return _emcpp.TestOci_registerAt(self, index)

    def setRegisters(self, inp):
        return _emcpp.TestOci_setRegisters(self, inp)

    def setRegister(self, index, value):
        return _emcpp.TestOci_setRegister(self, index, value)

    def acc(self):
        return _emcpp.TestOci_acc(self)

    def setAcc(self, acc):
        return _emcpp.TestOci_setAcc(self, acc)

    def dptr(self):
        return _emcpp.TestOci_dptr(self)

    def setDptr(self, dptr):
        return _emcpp.TestOci_setDptr(self, dptr)

    def ram(self, outp):
        return _emcpp.TestOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.TestOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.TestOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.TestOci_setRamAt(self, index, value)

    def stack(self, outp):
        return _emcpp.TestOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.TestOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.TestOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.TestOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.TestOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.TestOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.TestOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.TestOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.TestOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.TestOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.TestOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.TestOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.TestOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.TestOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.TestOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.TestOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.TestOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.TestOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.TestOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.TestOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.TestOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.TestOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.TestOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.TestOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.TestOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.TestOci_setTouchedAt(self, index, value)

    def a(self):
        return _emcpp.TestOci_a(self)

    def b(self, r1):
        return _emcpp.TestOci_b(self, r1)

    def c(self):
        return _emcpp.TestOci_c(self)

    def d(self):
        return _emcpp.TestOci_d(self)

    def e(self):
        return _emcpp.TestOci_e(self)

    def f(self, r1):
        return _emcpp.TestOci_f(self, r1)

    def g(self):
        return _emcpp.TestOci_g(self)

    def h(self, r1):
        return _emcpp.TestOci_h(self, r1)
TestOci_swigregister = _emcpp.TestOci_swigregister
TestOci_swigregister(TestOci)

class LoadStoreOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadStoreOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadStoreOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_LoadStoreOci(ramSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_LoadStoreOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.LoadStoreOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.LoadStoreOci_interpret(self)

    def interpretNext(self):
        return _emcpp.LoadStoreOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.LoadStoreOci_interpretN(self, n)
    counterSize = _emcpp.LoadStoreOci_counterSize
    numRegisters = _emcpp.LoadStoreOci_numRegisters
    numCategories = _emcpp.LoadStoreOci_numCategories

    def geneticStringSize(self):
        return _emcpp.LoadStoreOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.LoadStoreOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.LoadStoreOci_setCounter(self, counter)

    def a(self):
        return _emcpp.LoadStoreOci_a(self)

    def setA(self, a):
        return _emcpp.LoadStoreOci_setA(self, a)

    def b(self):
        return _emcpp.LoadStoreOci_b(self)

    def setB(self, b):
        return _emcpp.LoadStoreOci_setB(self, b)

    def flags(self):
        return _emcpp.LoadStoreOci_flags(self)

    def setFlags(self, flags):
        return _emcpp.LoadStoreOci_setFlags(self, flags)

    def addr(self):
        return _emcpp.LoadStoreOci_addr(self)

    def setAddr(self, addr):
        return _emcpp.LoadStoreOci_setAddr(self, addr)

    def ram(self, outp):
        return _emcpp.LoadStoreOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.LoadStoreOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.LoadStoreOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.LoadStoreOci_setRamAt(self, index, value)

    def output(self, outp):
        return _emcpp.LoadStoreOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.LoadStoreOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.LoadStoreOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.LoadStoreOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.LoadStoreOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.LoadStoreOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.LoadStoreOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.LoadStoreOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.LoadStoreOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.LoadStoreOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.LoadStoreOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.LoadStoreOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.LoadStoreOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.LoadStoreOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.LoadStoreOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.LoadStoreOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.LoadStoreOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.LoadStoreOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.LoadStoreOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.LoadStoreOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.LoadStoreOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.LoadStoreOci_setTouchedAt(self, index, value)

    def mov_a_addr(self):
        return _emcpp.LoadStoreOci_mov_a_addr(self)

    def mov_b_addr(self):
        return _emcpp.LoadStoreOci_mov_b_addr(self)

    def mov_addr_a(self):
        return _emcpp.LoadStoreOci_mov_addr_a(self)

    def mov_addr_b(self):
        return _emcpp.LoadStoreOci_mov_addr_b(self)

    def mov_addrl_a(self):
        return _emcpp.LoadStoreOci_mov_addrl_a(self)

    def mov_addrh_a(self):
        return _emcpp.LoadStoreOci_mov_addrh_a(self)

    def jnc_addr(self):
        return _emcpp.LoadStoreOci_jnc_addr(self)

    def subb(self):
        return _emcpp.LoadStoreOci_subb(self)

    def cpl_a(self):
        return _emcpp.LoadStoreOci_cpl_a(self)

    def clr_c(self):
        return _emcpp.LoadStoreOci_clr_c(self)

    def cpl_c(self):
        return _emcpp.LoadStoreOci_cpl_c(self)

    def andl(self):
        return _emcpp.LoadStoreOci_andl(self)

    def norl(self):
        return _emcpp.LoadStoreOci_norl(self)

    def out_a(self):
        return _emcpp.LoadStoreOci_out_a(self)
LoadStoreOci_swigregister = _emcpp.LoadStoreOci_swigregister
LoadStoreOci_swigregister(LoadStoreOci)

class StackOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StackOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StackOci, name)
    __repr__ = _swig_repr

    def __init__(self, stackSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_StackOci(stackSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_StackOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.StackOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.StackOci_interpret(self)

    def interpretNext(self):
        return _emcpp.StackOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.StackOci_interpretN(self, n)
    counterSize = _emcpp.StackOci_counterSize
    numRegisters = _emcpp.StackOci_numRegisters
    numCategories = _emcpp.StackOci_numCategories

    def geneticStringSize(self):
        return _emcpp.StackOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.StackOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.StackOci_setCounter(self, counter)

    def sp(self):
        return _emcpp.StackOci_sp(self)

    def setSp(self, sp):
        return _emcpp.StackOci_setSp(self, sp)

    def stack(self, outp):
        return _emcpp.StackOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.StackOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.StackOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.StackOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.StackOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.StackOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.StackOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.StackOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.StackOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.StackOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.StackOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.StackOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.StackOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.StackOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.StackOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.StackOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.StackOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.StackOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.StackOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.StackOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.StackOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.StackOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.StackOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.StackOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.StackOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.StackOci_setTouchedAt(self, index, value)

    def dup(self):
        return _emcpp.StackOci_dup(self)

    def one(self):
        return _emcpp.StackOci_one(self)

    def zero(self):
        return _emcpp.StackOci_zero(self)

    def load(self):
        return _emcpp.StackOci_load(self)

    def pop(self):
        return _emcpp.StackOci_pop(self)

    def sub(self):
        return _emcpp.StackOci_sub(self)

    def jpos(self):
        return _emcpp.StackOci_jpos(self)

    def out(self):
        return _emcpp.StackOci_out(self)
StackOci_swigregister = _emcpp.StackOci_swigregister
StackOci_swigregister(StackOci)

class StackHarvardOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StackHarvardOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StackHarvardOci, name)
    __repr__ = _swig_repr

    def __init__(self, romSize, stackSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_StackHarvardOci(romSize, stackSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_StackHarvardOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.StackHarvardOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.StackHarvardOci_interpret(self)

    def interpretNext(self):
        return _emcpp.StackHarvardOci_interpretNext(self)

    def interpretN(self, n):
        return _emcpp.StackHarvardOci_interpretN(self, n)
    counterSize = _emcpp.StackHarvardOci_counterSize
    numRegisters = _emcpp.StackHarvardOci_numRegisters
    numCategories = _emcpp.StackHarvardOci_numCategories

    def geneticStringSize(self):
        return _emcpp.StackHarvardOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.StackHarvardOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.StackHarvardOci_setCounter(self, counter)

    def sp(self):
        return _emcpp.StackHarvardOci_sp(self)

    def setSp(self, sp):
        return _emcpp.StackHarvardOci_setSp(self, sp)

    def rom(self, outp):
        return _emcpp.StackHarvardOci_rom(self, outp)

    def romAt(self, index):
        return _emcpp.StackHarvardOci_romAt(self, index)

    def setRom(self, inp):
        return _emcpp.StackHarvardOci_setRom(self, inp)

    def setRomAt(self, index, value):
        return _emcpp.StackHarvardOci_setRomAt(self, index, value)

    def stack(self, outp):
        return _emcpp.StackHarvardOci_stack(self, outp)

    def stackAt(self, index):
        return _emcpp.StackHarvardOci_stackAt(self, index)

    def setStack(self, inp):
        return _emcpp.StackHarvardOci_setStack(self, inp)

    def setStackAt(self, index, value):
        return _emcpp.StackHarvardOci_setStackAt(self, index, value)

    def output(self, outp):
        return _emcpp.StackHarvardOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.StackHarvardOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.StackHarvardOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.StackHarvardOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.StackHarvardOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.StackHarvardOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.StackHarvardOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.StackHarvardOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.StackHarvardOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.StackHarvardOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.StackHarvardOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.StackHarvardOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.StackHarvardOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.StackHarvardOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.StackHarvardOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.StackHarvardOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.StackHarvardOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.StackHarvardOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.StackHarvardOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.StackHarvardOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.StackHarvardOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.StackHarvardOci_setTouchedAt(self, index, value)

    def dup(self):
        return _emcpp.StackHarvardOci_dup(self)

    def one(self):
        return _emcpp.StackHarvardOci_one(self)

    def zero(self):
        return _emcpp.StackHarvardOci_zero(self)

    def load(self):
        return _emcpp.StackHarvardOci_load(self)

    def pop(self):
        return _emcpp.StackHarvardOci_pop(self)

    def sub(self):
        return _emcpp.StackHarvardOci_sub(self)

    def jpos(self):
        return _emcpp.StackHarvardOci_jpos(self)

    def out(self):
        return _emcpp.StackHarvardOci_out(self)
StackHarvardOci_swigregister = _emcpp.StackHarvardOci_swigregister
StackHarvardOci_swigregister(StackHarvardOci)

class SbnzOiscOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SbnzOiscOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SbnzOiscOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_SbnzOiscOci(ramSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_SbnzOiscOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.SbnzOiscOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.SbnzOiscOci_interpret(self)

    def interpretN(self, n):
        return _emcpp.SbnzOiscOci_interpretN(self, n)
    counterSize = _emcpp.SbnzOiscOci_counterSize
    numRegisters = _emcpp.SbnzOiscOci_numRegisters
    numCategories = _emcpp.SbnzOiscOci_numCategories

    def geneticStringSize(self):
        return _emcpp.SbnzOiscOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.SbnzOiscOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.SbnzOiscOci_setCounter(self, counter)

    def ram(self, outp):
        return _emcpp.SbnzOiscOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.SbnzOiscOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.SbnzOiscOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.SbnzOiscOci_setRamAt(self, index, value)

    def output(self, outp):
        return _emcpp.SbnzOiscOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.SbnzOiscOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.SbnzOiscOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.SbnzOiscOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.SbnzOiscOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.SbnzOiscOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.SbnzOiscOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.SbnzOiscOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.SbnzOiscOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.SbnzOiscOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.SbnzOiscOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.SbnzOiscOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.SbnzOiscOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.SbnzOiscOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.SbnzOiscOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.SbnzOiscOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.SbnzOiscOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.SbnzOiscOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.SbnzOiscOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.SbnzOiscOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.SbnzOiscOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.SbnzOiscOci_setTouchedAt(self, index, value)

    def sbnz(self):
        return _emcpp.SbnzOiscOci_sbnz(self)
SbnzOiscOci_swigregister = _emcpp.SbnzOiscOci_swigregister
SbnzOiscOci_swigregister(SbnzOiscOci)

class SbnzOiscHarvardOci(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SbnzOiscHarvardOci, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SbnzOiscHarvardOci, name)
    __repr__ = _swig_repr

    def __init__(self, ramSize, romSize, maxCommands, maxOutputs, haltAllowed):
        this = _emcpp.new_SbnzOiscHarvardOci(ramSize, romSize, maxCommands, maxOutputs, haltAllowed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _emcpp.delete_SbnzOiscHarvardOci
    __del__ = lambda self: None

    def setFromGeneticString(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setFromGeneticString(self, inp)

    def interpret(self):
        return _emcpp.SbnzOiscHarvardOci_interpret(self)

    def interpretN(self, n):
        return _emcpp.SbnzOiscHarvardOci_interpretN(self, n)
    counterSize = _emcpp.SbnzOiscHarvardOci_counterSize
    numRegisters = _emcpp.SbnzOiscHarvardOci_numRegisters
    numCategories = _emcpp.SbnzOiscHarvardOci_numCategories

    def geneticStringSize(self):
        return _emcpp.SbnzOiscHarvardOci_geneticStringSize(self)

    def counter(self):
        return _emcpp.SbnzOiscHarvardOci_counter(self)

    def setCounter(self, counter):
        return _emcpp.SbnzOiscHarvardOci_setCounter(self, counter)

    def ram(self, outp):
        return _emcpp.SbnzOiscHarvardOci_ram(self, outp)

    def ramAt(self, index):
        return _emcpp.SbnzOiscHarvardOci_ramAt(self, index)

    def setRam(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setRam(self, inp)

    def setRamAt(self, index, value):
        return _emcpp.SbnzOiscHarvardOci_setRamAt(self, index, value)

    def rom(self, outp):
        return _emcpp.SbnzOiscHarvardOci_rom(self, outp)

    def romAt(self, index):
        return _emcpp.SbnzOiscHarvardOci_romAt(self, index)

    def setRom(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setRom(self, inp)

    def setRomAt(self, index, value):
        return _emcpp.SbnzOiscHarvardOci_setRomAt(self, index, value)

    def output(self, outp):
        return _emcpp.SbnzOiscHarvardOci_output(self, outp)

    def outputAt(self, index):
        return _emcpp.SbnzOiscHarvardOci_outputAt(self, index)

    def setOutput(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setOutput(self, inp)

    def setOutputAt(self, index, value):
        return _emcpp.SbnzOiscHarvardOci_setOutputAt(self, index, value)

    def outputPtr(self):
        return _emcpp.SbnzOiscHarvardOci_outputPtr(self)

    def setOutputPtr(self, outputPtr):
        return _emcpp.SbnzOiscHarvardOci_setOutputPtr(self, outputPtr)

    def debug(self):
        return _emcpp.SbnzOiscHarvardOci_debug(self)

    def setDebug(self, debug):
        return _emcpp.SbnzOiscHarvardOci_setDebug(self, debug)

    def countOccurrences(self):
        return _emcpp.SbnzOiscHarvardOci_countOccurrences(self)

    def setCountOccurrences(self, countOccurrences):
        return _emcpp.SbnzOiscHarvardOci_setCountOccurrences(self, countOccurrences)

    def countTouched(self):
        return _emcpp.SbnzOiscHarvardOci_countTouched(self)

    def setCountTouched(self, countTouched):
        return _emcpp.SbnzOiscHarvardOci_setCountTouched(self, countTouched)

    def numTouched(self):
        return _emcpp.SbnzOiscHarvardOci_numTouched(self)

    def setNumTouched(self, numTouched):
        return _emcpp.SbnzOiscHarvardOci_setNumTouched(self, numTouched)

    def occurrences(self, outp):
        return _emcpp.SbnzOiscHarvardOci_occurrences(self, outp)

    def occurrencesAt(self, index):
        return _emcpp.SbnzOiscHarvardOci_occurrencesAt(self, index)

    def setOccurrences(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setOccurrences(self, inp)

    def setOccurrencesAt(self, index, value):
        return _emcpp.SbnzOiscHarvardOci_setOccurrencesAt(self, index, value)

    def touched(self, outp):
        return _emcpp.SbnzOiscHarvardOci_touched(self, outp)

    def touchedAt(self, index):
        return _emcpp.SbnzOiscHarvardOci_touchedAt(self, index)

    def setTouched(self, inp):
        return _emcpp.SbnzOiscHarvardOci_setTouched(self, inp)

    def setTouchedAt(self, index, value):
        return _emcpp.SbnzOiscHarvardOci_setTouchedAt(self, index, value)

    def sbnz(self):
        return _emcpp.SbnzOiscHarvardOci_sbnz(self)
SbnzOiscHarvardOci_swigregister = _emcpp.SbnzOiscHarvardOci_swigregister
SbnzOiscHarvardOci_swigregister(SbnzOiscHarvardOci)

# This file is compatible with both classic and new-style classes.


