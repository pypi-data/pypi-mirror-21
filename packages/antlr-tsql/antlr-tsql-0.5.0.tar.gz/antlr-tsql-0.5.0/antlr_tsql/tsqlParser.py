# Generated from antlr_tsql/tsql.g4 by ANTLR 4.6.1
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u01b9")
        buf.write("\u0c2f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\3\2\7\2\u0150\n\2\f\2\16\2\u0153\13\2\3\2\3\2")
        buf.write("\3\3\3\3\5\3\u0159\n\3\3\4\3\4\5\4\u015d\n\4\6\4\u015f")
        buf.write("\n\4\r\4\16\4\u0160\3\5\3\5\3\5\3\5\5\5\u0167\n\5\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u016d\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u017e\n\7\3\b\3\b")
        buf.write("\5\b\u0182\n\b\3\b\5\b\u0185\n\b\3\b\3\b\5\b\u0189\n\b")
        buf.write("\3\b\3\b\5\b\u018d\n\b\3\b\3\b\5\b\u0191\n\b\3\b\3\b\3")
        buf.write("\b\5\b\u0196\n\b\3\b\3\b\3\b\5\b\u019b\n\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u01a2\n\b\3\b\5\b\u01a5\n\b\3\b\3\b\5\b\u01a9")
        buf.write("\n\b\3\b\5\b\u01ac\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01b4")
        buf.write("\n\b\3\b\5\b\u01b7\n\b\3\b\3\b\3\b\5\b\u01bc\n\b\3\b\5")
        buf.write("\b\u01bf\n\b\3\b\3\b\3\b\5\b\u01c4\n\b\3\b\3\b\3\b\5\b")
        buf.write("\u01c9\n\b\3\b\5\b\u01cc\n\b\3\b\3\b\3\b\5\b\u01d1\n\b")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u01d7\n\b\3\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u01de\n\b\3\b\3\b\5\b\u01e2\n\b\5\b\u01e4\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u01e9\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\7\b\u01f4\n\b\f\b\16\b\u01f7\13\b\3\b\3\b\5\b\u01fb\n")
        buf.write("\b\5\b\u01fd\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0206")
        buf.write("\n\t\3\n\5\n\u0209\n\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0211")
        buf.write("\n\n\5\n\u0213\n\n\3\n\5\n\u0216\n\n\3\n\3\n\5\n\u021a")
        buf.write("\n\n\3\n\5\n\u021d\n\n\3\n\3\n\5\n\u0221\n\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u0228\n\n\3\n\3\n\5\n\u022c\n\n\5\n\u022e")
        buf.write("\n\n\5\n\u0230\n\n\3\n\5\n\u0233\n\n\3\n\5\n\u0236\n\n")
        buf.write("\3\n\5\n\u0239\n\n\3\13\3\13\5\13\u023d\n\13\3\13\3\13")
        buf.write("\3\13\5\13\u0242\n\13\3\f\5\f\u0245\n\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\5\f\u024d\n\f\5\f\u024f\n\f\3\f\5\f\u0252\n")
        buf.write("\f\3\f\3\f\5\f\u0256\n\f\3\f\5\f\u0259\n\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u025f\n\f\3\f\5\f\u0262\n\f\3\f\3\f\5\f\u0266")
        buf.write("\n\f\3\f\5\f\u0269\n\f\3\f\5\f\u026c\n\f\3\r\3\r\3\r\3")
        buf.write("\r\3\r\5\r\u0273\n\r\3\16\5\16\u0276\n\16\3\16\3\16\5")
        buf.write("\16\u027a\n\16\3\16\5\16\u027d\n\16\3\16\5\16\u0280\n")
        buf.write("\16\3\16\5\16\u0283\n\16\3\17\5\17\u0286\n\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u028e\n\17\5\17\u0290\n\17\3")
        buf.write("\17\3\17\5\17\u0294\n\17\3\17\5\17\u0297\n\17\3\17\3\17")
        buf.write("\3\17\3\17\7\17\u029d\n\17\f\17\16\17\u02a0\13\17\3\17")
        buf.write("\5\17\u02a3\n\17\3\17\3\17\5\17\u02a7\n\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\5\17\u02ae\n\17\3\17\3\17\5\17\u02b2\n\17")
        buf.write("\5\17\u02b4\n\17\5\17\u02b6\n\17\3\17\5\17\u02b9\n\17")
        buf.write("\3\17\5\17\u02bc\n\17\3\17\5\17\u02bf\n\17\3\20\3\20\3")
        buf.write("\20\3\20\7\20\u02c5\n\20\f\20\16\20\u02c8\13\20\3\20\3")
        buf.write("\20\3\20\5\20\u02cd\n\20\3\20\3\20\3\20\3\20\5\20\u02d3")
        buf.write("\n\20\5\20\u02d5\n\20\3\21\3\21\5\21\u02d9\n\21\3\21\5")
        buf.write("\21\u02dc\n\21\3\21\5\21\u02df\n\21\3\22\3\22\3\22\5\22")
        buf.write("\u02e4\n\22\3\22\3\22\3\22\5\22\u02e9\n\22\3\22\5\22\u02ec")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02f4\n\23\3")
        buf.write("\23\3\23\5\23\u02f8\n\23\3\23\3\23\3\23\7\23\u02fd\n\23")
        buf.write("\f\23\16\23\u0300\13\23\5\23\u0302\n\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u0309\n\23\f\23\16\23\u030c\13\23\5\23")
        buf.write("\u030e\n\23\3\23\3\23\5\23\u0312\n\23\3\23\3\23\3\23\3")
        buf.write("\23\7\23\u0318\n\23\f\23\16\23\u031b\13\23\5\23\u031d")
        buf.write("\n\23\3\24\3\24\5\24\u0321\n\24\3\24\5\24\u0324\n\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u032d\n\24\3\24")
        buf.write("\3\24\5\24\u0331\n\24\3\24\3\24\5\24\u0335\n\24\3\24\5")
        buf.write("\24\u0338\n\24\3\25\3\25\3\25\3\25\3\25\5\25\u033f\n\25")
        buf.write("\3\25\5\25\u0342\n\25\3\25\3\25\3\25\7\25\u0347\n\25\f")
        buf.write("\25\16\25\u034a\13\25\3\25\5\25\u034d\n\25\5\25\u034f")
        buf.write("\n\25\3\25\3\25\3\25\3\25\7\25\u0355\n\25\f\25\16\25\u0358")
        buf.write("\13\25\5\25\u035a\n\25\3\25\3\25\5\25\u035e\n\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u0367\n\26\3\26\5")
        buf.write("\26\u036a\n\26\3\26\3\26\5\26\u036e\n\26\3\26\3\26\5\26")
        buf.write("\u0372\n\26\3\26\5\26\u0375\n\26\3\27\3\27\3\27\5\27\u037a")
        buf.write("\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u038a\n\30\3\30\3\30\5\30\u038e")
        buf.write("\n\30\3\30\3\30\3\30\3\30\5\30\u0394\n\30\5\30\u0396\n")
        buf.write("\30\3\30\5\30\u0399\n\30\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u03a1\n\31\3\31\3\31\3\31\3\31\5\31\u03a7\n\31\3")
        buf.write("\31\3\31\3\31\5\31\u03ac\n\31\3\31\5\31\u03af\n\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u03b8\n\32\3\32\3")
        buf.write("\32\3\32\3\32\7\32\u03be\n\32\f\32\16\32\u03c1\13\32\5")
        buf.write("\32\u03c3\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u03ca\n\32")
        buf.write("\3\32\5\32\u03cd\n\32\3\33\3\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u03f2\n\34\3")
        buf.write("\34\5\34\u03f5\n\34\3\35\3\35\3\35\3\35\5\35\u03fb\n\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35")
        buf.write("\u0407\n\35\5\35\u0409\n\35\3\35\5\35\u040c\n\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u0424\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\5\37\u042f\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0437\n\37\3 \3 \3 \3 \3 \3 \3 \7 \u0440\n \f \16 \u0443")
        buf.write("\13 \7 \u0445\n \f \16 \u0448\13 \5 \u044a\n \3!\3!\3")
        buf.write("!\3!\3!\3!\5!\u0452\n!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\5#")
        buf.write("\u045c\n#\3$\3$\3$\3%\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)")
        buf.write("\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0476\n*\3*\3*\3*\3")
        buf.write("*\5*\u047c\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0487\n*\3")
        buf.write("+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-\5-\u0495\n-\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u049d\n.\3/\3/\3/\3/\3/\5/\u04a4\n/\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u04bb")
        buf.write("\n\60\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\5\62\u04c8\n\62\3\63\3\63\3\63\3\63\5\63\u04ce\n")
        buf.write("\63\3\63\3\63\3\63\5\63\u04d3\n\63\3\63\5\63\u04d6\n\63")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u04dc\n\64\3\64\3\64\5\64\u04e0")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\5\65\u04e7\n\65\3\65\3")
        buf.write("\65\3\65\3\66\3\66\3\66\3\66\5\66\u04f0\n\66\3\66\3\66")
        buf.write("\5\66\u04f4\n\66\3\67\3\67\3\67\3\67\5\67\u04fa\n\67\3")
        buf.write("\67\3\67\3\67\7\67\u04ff\n\67\f\67\16\67\u0502\13\67\3")
        buf.write("\67\5\67\u0505\n\67\38\38\38\38\38\38\38\39\39\39\39\5")
        buf.write("9\u0512\n9\39\39\3:\3:\5:\u0518\n:\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0529\n<\3<\3<\5<\u052d\n")
        buf.write("<\3<\3<\3<\3=\3=\3=\5=\u0535\n=\3=\3=\5=\u0539\n=\3=\3")
        buf.write("=\3=\3=\7=\u053f\n=\f=\16=\u0542\13=\3=\5=\u0545\n=\5")
        buf.write("=\u0547\n=\3>\3>\5>\u054b\n>\3>\3>\5>\u054f\n>\3>\3>\5")
        buf.write(">\u0553\n>\3>\3>\5>\u0557\n>\3>\3>\3>\3>\5>\u055d\n>\3")
        buf.write(">\3>\5>\u0561\n>\5>\u0563\n>\3?\3?\3?\5?\u0568\n?\3?\3")
        buf.write("?\3?\3?\7?\u056e\n?\f?\16?\u0571\13?\5?\u0573\n?\3?\5")
        buf.write("?\u0576\n?\3?\3?\3?\3?\3?\7?\u057d\n?\f?\16?\u0580\13")
        buf.write("?\3?\3?\5?\u0584\n?\3?\3?\3?\5?\u0589\n?\3?\5?\u058c\n")
        buf.write("?\5?\u058e\n?\3@\3@\5@\u0592\n@\3@\3@\5@\u0596\n@\3@\5")
        buf.write("@\u0599\n@\3@\3@\5@\u059d\n@\3A\3A\3B\3B\5B\u05a3\nB\3")
        buf.write("B\3B\3B\5B\u05a8\nB\3B\3B\3B\3B\3B\5B\u05af\nB\5B\u05b1")
        buf.write("\nB\3B\3B\5B\u05b5\nB\3B\3B\3B\3B\3B\5B\u05bc\nB\3B\3")
        buf.write("B\5B\u05c0\nB\3B\5B\u05c3\nB\3B\3B\3B\3B\3B\3B\3B\5B\u05cc")
        buf.write("\nB\3B\5B\u05cf\nB\5B\u05d1\nB\3C\3C\3C\3C\3C\3C\3C\5")
        buf.write("C\u05da\nC\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u05e5\nC\3C\3")
        buf.write("C\5C\u05e9\nC\5C\u05eb\nC\5C\u05ed\nC\3D\3D\3D\3D\5D\u05f3")
        buf.write("\nD\3D\3D\3D\5D\u05f8\nD\3D\3D\3D\3D\3D\5D\u05ff\nD\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u060c\nD\5D\u060e\n")
        buf.write("D\5D\u0610\nD\3D\5D\u0613\nD\3D\5D\u0616\nD\3E\3E\3E\3")
        buf.write("E\3E\5E\u061d\nE\3E\5E\u0620\nE\3E\3E\3E\3E\5E\u0626\n")
        buf.write("E\3E\3E\3E\5E\u062b\nE\5E\u062d\nE\3E\5E\u0630\nE\3E\3")
        buf.write("E\3E\3E\5E\u0636\nE\3E\3E\3E\3E\3E\3E\5E\u063e\nE\5E\u0640")
        buf.write("\nE\3E\5E\u0643\nE\3E\3E\5E\u0647\nE\3E\5E\u064a\nE\3")
        buf.write("E\3E\3E\3E\5E\u0650\nE\3E\5E\u0653\nE\3E\3E\5E\u0657\n")
        buf.write("E\3E\5E\u065a\nE\3E\3E\3E\3E\5E\u0660\nE\3E\5E\u0663\n")
        buf.write("E\5E\u0665\nE\3F\3F\5F\u0669\nF\3G\3G\3G\5G\u066e\nG\3")
        buf.write("H\3H\3H\3H\3I\3I\5I\u0676\nI\3I\3I\3I\5I\u067b\nI\3J\3")
        buf.write("J\3J\3J\3J\3K\3K\5K\u0684\nK\3K\7K\u0687\nK\fK\16K\u068a")
        buf.write("\13K\3L\3L\5L\u068e\nL\3M\3M\3M\3M\5M\u0694\nM\3M\3M\5")
        buf.write("M\u0698\nM\3M\5M\u069b\nM\3M\3M\5M\u069f\nM\3M\3M\3M\3")
        buf.write("M\5M\u06a5\nM\3M\3M\3M\3M\3M\3M\5M\u06ad\nM\3M\3M\3M\5")
        buf.write("M\u06b2\nM\5M\u06b4\nM\3M\5M\u06b7\nM\3M\7M\u06ba\nM\f")
        buf.write("M\16M\u06bd\13M\3N\3N\5N\u06c1\nN\3N\5N\u06c4\nN\3N\3")
        buf.write("N\3N\5N\u06c9\nN\3N\5N\u06cc\nN\3N\5N\u06cf\nN\3N\3N\3")
        buf.write("N\3N\5N\u06d5\nN\3N\3N\3N\3N\5N\u06db\nN\3O\3O\5O\u06df")
        buf.write("\nO\3O\3O\3O\5O\u06e4\nO\3O\5O\u06e7\nO\3O\3O\3O\5O\u06ec")
        buf.write("\nO\3O\3O\5O\u06f0\nO\3O\3O\5O\u06f4\nO\3O\3O\3O\3O\5")
        buf.write("O\u06fa\nO\3O\3O\3O\3O\5O\u0700\nO\3P\3P\3P\3P\3P\7P\u0707")
        buf.write("\nP\fP\16P\u070a\13P\3P\3P\3Q\3Q\3Q\3Q\3Q\5Q\u0713\nQ")
        buf.write("\3R\3R\3R\3R\3R\3R\3R\3R\5R\u071d\nR\5R\u071f\nR\5R\u0721")
        buf.write("\nR\3R\5R\u0724\nR\3R\5R\u0727\nR\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u0732\nR\5R\u0734\nR\5R\u0736\nR\3R\5R\u0739")
        buf.write("\nR\3S\5S\u073c\nS\3S\5S\u073f\nS\3S\5S\u0742\nS\3S\5")
        buf.write("S\u0745\nS\3S\5S\u0748\nS\3S\3S\3S\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\5T\u0754\nT\3T\5T\u0757\nT\3T\5T\u075a\nT\3T\3T\3T\3")
        buf.write("T\3T\7T\u0761\nT\fT\16T\u0764\13T\5T\u0766\nT\3T\5T\u0769")
        buf.write("\nT\3U\3U\3U\3U\3U\5U\u0770\nU\3U\5U\u0773\nU\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0781\nU\3U\5U\u0784\n")
        buf.write("U\3U\3U\3U\3U\3U\5U\u078b\nU\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\5U\u0796\nU\3V\3V\5V\u079a\nV\3W\3W\3W\3W\3W\3W\3W\3")
        buf.write("W\3W\6W\u07a5\nW\rW\16W\u07a6\3W\3W\5W\u07ab\nW\3W\3W")
        buf.write("\3W\3W\6W\u07b1\nW\rW\16W\u07b2\3W\3W\5W\u07b7\nW\3W\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u07c9\n")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\7W\u07d8\nW\f")
        buf.write("W\16W\u07db\13W\3X\3X\3X\3X\3X\3X\3X\3X\5X\u07e5\nX\3")
        buf.write("Y\3Y\3Z\3Z\3Z\5Z\u07ec\nZ\3Z\3Z\3Z\7Z\u07f1\nZ\fZ\16Z")
        buf.write("\u07f4\13Z\3[\3[\3[\3[\3[\5[\u07fb\n[\3[\3[\3[\3[\3[\3")
        buf.write("\\\3\\\5\\\u0804\n\\\3\\\3\\\5\\\u0808\n\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\5\\\u0812\n\\\3]\3]\3]\7]\u0817\n")
        buf.write("]\f]\16]\u081a\13]\3^\3^\3^\3^\3^\3^\3^\3^\3^\7^\u0825")
        buf.write("\n^\f^\16^\u0828\13^\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_")
        buf.write("\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u083e\n_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\5_\u0847\n_\3_\3_\3_\3_\5_\u084d\n_\3_\3_\3_\3")
        buf.write("_\5_\u0853\n_\3_\3_\3_\3_\5_\u0859\n_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\5_\u0864\n_\3`\3`\3`\3`\3`\3`\5`\u086c\n`\3")
        buf.write("`\3`\3`\3`\7`\u0872\n`\f`\16`\u0875\13`\3a\3a\5a\u0879")
        buf.write("\na\3a\3a\5a\u087d\na\3b\3b\5b\u0881\nb\3b\5b\u0884\n")
        buf.write("b\3b\3b\3b\5b\u0889\nb\3b\3b\5b\u088d\nb\3b\3b\5b\u0891")
        buf.write("\nb\3b\3b\3b\3b\3b\7b\u0898\nb\fb\16b\u089b\13b\5b\u089d")
        buf.write("\nb\3b\3b\5b\u08a1\nb\3c\3c\3c\5c\u08a6\nc\3c\3c\5c\u08aa")
        buf.write("\nc\3d\3d\3d\3d\3d\7d\u08b1\nd\fd\16d\u08b4\13d\3d\3d")
        buf.write("\3d\3d\5d\u08ba\nd\5d\u08bc\nd\3e\3e\3e\3e\3e\3e\3f\3")
        buf.write("f\3f\3f\3f\3f\5f\u08ca\nf\3f\3f\3f\3f\3f\3f\5f\u08d2\n")
        buf.write("f\3f\5f\u08d5\nf\5f\u08d7\nf\3g\3g\3g\3g\3g\5g\u08de\n")
        buf.write("g\3h\3h\5h\u08e2\nh\3i\3i\3j\3j\3j\3j\3j\7j\u08eb\nj\f")
        buf.write("j\16j\u08ee\13j\3j\3j\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3")
        buf.write("k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\7k\u090d")
        buf.write("\nk\fk\16k\u0910\13k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k")
        buf.write("\3k\3k\5k\u091f\nk\3l\3l\3l\3l\5l\u0925\nl\3m\3m\3m\7")
        buf.write("m\u092a\nm\fm\16m\u092d\13m\3n\3n\3n\5n\u0932\nn\3n\3")
        buf.write("n\3n\5n\u0937\nn\3n\3n\3n\3n\3n\3n\5n\u093f\nn\3n\5n\u0942")
        buf.write("\nn\5n\u0944\nn\3o\3o\3o\7o\u0949\no\fo\16o\u094c\13o")
        buf.write("\3p\3p\3p\3p\3p\3p\5p\u0954\np\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\7p\u0965\np\fp\16p\u0968\13p\3")
        buf.write("q\3q\5q\u096c\nq\3q\5q\u096f\nq\3q\3q\5q\u0973\nq\3q\3")
        buf.write("q\3q\5q\u0978\nq\5q\u097a\nq\3q\3q\5q\u097e\nq\3q\3q\5")
        buf.write("q\u0982\nq\3q\3q\5q\u0986\nq\3q\3q\3q\3q\3q\5q\u098d\n")
        buf.write("q\5q\u098f\nq\5q\u0991\nq\3r\5r\u0994\nr\3r\3r\3s\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3t\5t\u09a1\nt\3t\3t\5t\u09a5\nt\5t\u09a7")
        buf.write("\nt\3t\5t\u09aa\nt\3u\3u\5u\u09ae\nu\3v\3v\3v\3v\3v\3")
        buf.write("v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\7v\u09c0\nv\fv\16v\u09c3")
        buf.write("\13v\3v\5v\u09c6\nv\3v\3v\5v\u09ca\nv\3w\3w\3w\3w\3x\3")
        buf.write("x\3x\3x\3x\5x\u09d5\nx\3y\3y\3y\3y\3y\5y\u09dc\ny\3y\3")
        buf.write("y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\5y\u09f2\ny\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\5y\u0a26\ny\3y\3y\5y\u0a2a\ny\3y\3y\3y\3y\3y\3y\3y\3")
        buf.write("y\3y\3y\3y\3y\5y\u0a38\ny\3z\3z\3z\3z\3z\3{\3{\3{\3{\3")
        buf.write("{\3|\5|\u0a45\n|\3|\3|\3|\3|\7|\u0a4b\n|\f|\16|\u0a4e")
        buf.write("\13|\3|\3|\3}\3}\3}\3}\3}\7}\u0a57\n}\f}\16}\u0a5a\13")
        buf.write("}\3}\3}\3~\5~\u0a5f\n~\3~\3~\3~\3~\3~\7~\u0a66\n~\f~\16")
        buf.write("~\u0a69\13~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\7~\u0a77")
        buf.write("\n~\f~\16~\u0a7a\13~\3~\3~\3~\5~\u0a7f\n~\3~\3~\3~\3~")
        buf.write("\3~\3~\5~\u0a87\n~\3\177\3\177\5\177\u0a8b\n\177\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\7\u0080\u0a91\n\u0080\f\u0080")
        buf.write("\16\u0080\u0a94\13\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write("\5\u0081\u0a9a\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\7\u0083\u0aa7\n\u0083\f\u0083\16\u0083\u0aaa\13\u0083")
        buf.write("\3\u0084\3\u0084\3\u0084\7\u0084\u0aaf\n\u0084\f\u0084")
        buf.write("\16\u0084\u0ab2\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085")
        buf.write("\u0abe\n\u0085\3\u0086\3\u0086\3\u0086\5\u0086\u0ac3\n")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0ac8\n\u0086\3")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0ace\n\u0086\3")
        buf.write("\u0086\5\u0086\u0ad1\n\u0086\3\u0086\3\u0086\5\u0086\u0ad5")
        buf.write("\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0ada\n\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0ae9\n\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\5\u0088\u0af2\n\u0088\3\u0088\5\u0088")
        buf.write("\u0af5\n\u0088\3\u0088\5\u0088\u0af8\n\u0088\3\u0088\3")
        buf.write("\u0088\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\5\u008a\u0b05\n\u008a\3\u008b")
        buf.write("\3\u008b\5\u008b\u0b09\n\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\5\u008c\u0b11\n\u008c\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\5\u008d\u0b17\n\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\7\u008e\u0b1d\n\u008e\f\u008e")
        buf.write("\16\u008e\u0b20\13\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u0b26\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u0b2c\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\5\u008e\u0b3b\n\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b44")
        buf.write("\n\u008f\3\u008f\3\u008f\3\u0090\3\u0090\5\u0090\u0b4a")
        buf.write("\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b50")
        buf.write("\n\u0091\3\u0091\5\u0091\u0b53\n\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0b57\n\u0091\3\u0091\3\u0091\3\u0091\7\u0091")
        buf.write("\u0b5c\n\u0091\f\u0091\16\u0091\u0b5f\13\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0b66\n\u0092")
        buf.write("\3\u0092\5\u0092\u0b69\n\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0b6f\n\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0b75\n\u0092\5\u0092\u0b77\n\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0b7d\n\u0092\3")
        buf.write("\u0092\5\u0092\u0b80\n\u0092\5\u0092\u0b82\n\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\5\u0092\u0b88\n\u0092\5\u0092")
        buf.write("\u0b8a\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0b98\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\5\u0093\u0b9f\n\u0093\3\u0093\3\u0093\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u0ba6\n\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\5\u0094\u0bad\n\u0094\3\u0094")
        buf.write("\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0bb4\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\5\u0096\u0bbb")
        buf.write("\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0bc2\n\u0096\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097")
        buf.write("\u0bc8\n\u0097\3\u0098\3\u0098\3\u0098\5\u0098\u0bcd\n")
        buf.write("\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\7\u0099")
        buf.write("\u0bd4\n\u0099\f\u0099\16\u0099\u0bd7\13\u0099\3\u009a")
        buf.write("\3\u009a\5\u009a\u0bdb\n\u009a\3\u009b\3\u009b\3\u009c")
        buf.write("\3\u009c\3\u009d\5\u009d\u0be2\n\u009d\3\u009d\3\u009d")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0beb")
        buf.write("\n\u009e\3\u009f\3\u009f\5\u009f\u0bef\n\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\5\u009f\u0bf5\n\u009f\3\u009f")
        buf.write("\5\u009f\u0bf8\n\u009f\3\u00a0\3\u00a0\5\u00a0\u0bfc\n")
        buf.write("\u00a0\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c01\n\u00a1\3")
        buf.write("\u00a1\3\u00a1\5\u00a1\u0c05\n\u00a1\3\u00a1\3\u00a1\5")
        buf.write("\u00a1\u0c09\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c0d\n\u00a1")
        buf.write("\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0c14")
        buf.write("\n\u00a3\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c27\n\u00a5")
        buf.write("\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u0c2d\n\u00a7")
        buf.write("\3\u00a7\2\6\u00ac\u00ba\u00be\u00de\u00a8\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\2=\3\2\u0194\u0195\4\2\u0194\u0194\u0197\u0197\4\2\u00f2")
        buf.write("\u00f2\u017a\u017a\4\2\u0194\u0195\u0197\u0197\4\2ll~")
        buf.write("~\4\2\n\n\65\65\3\2\u0085\u0086\4\2\u0144\u0145\u0151")
        buf.write("\u0151\4\2\177\177\u0160\u0160\5\2\u00fd\u00fd\u0163\u0163")
        buf.write("\u018a\u018a\5\2\u00a6\u00a6\u00cd\u00cd\u00f7\u00f7\4")
        buf.write("\2qqss\5\2\u00ee\u00ee\u0113\u0113\u012d\u012d\4\2\u010c")
        buf.write("\u010c\u0121\u0121\5\2\u00fb\u00fb\u013e\u013e\u0140\u0140")
        buf.write("\3\2\u0153\u0154\5\2\u0131\u0131\u015b\u015b\u016b\u016b")
        buf.write("\5\2\u00c5\u00c5\u00f8\u00f8\u0108\u0108\4\2\u0108\u0108")
        buf.write("\u016a\u016a\5\2OO\u00d7\u00d7\u016a\u016a\5\2ll\u00dd")
        buf.write("\u00dd\u017b\u017b\4\2\u012d\u012d\u0166\u0166\4\2\u00b8")
        buf.write("\u00b8\u0123\u0123\3\2\u0144\u0145\4\2\u00a6\u00a6\u00bb")
        buf.write("\u00bb\3\2\u00ac\u00ad\6\2\u00d8\u00d8\u0146\u0146\u0167")
        buf.write("\u0167\u0197\u0197\4\2\u0109\u0109\u0164\u0164\6\2\u00fa")
        buf.write("\u00fa\u0101\u0101\u011e\u011e\u016f\u016f\5\2\u0142\u0142")
        buf.write("\u0153\u0153\u0165\u0165\4\2\u00c3\u00c3\u0158\u0158\3")
        buf.write("\2\u01b4\u01b5\3\2\u01b1\u01b3\4\2\u01b4\u01b5\u01b7\u01b9")
        buf.write("\5\2\5\5\b\b\u00a3\u00a3\4\2\5\5\67\67\4\2\u015e\u015e")
        buf.write("\u0160\u0160\4\2\u0105\u0105\u0135\u0135\4\2{{\u0111\u0111")
        buf.write("\5\2hh\u00e1\u00e1\u0111\u0111\5\2hh\u0111\u0111\u0124")
        buf.write("\u0124\4\2UU\u015f\u015f\4\2\'\'||\4\2nn\u0194\u0195\5")
        buf.write("\2OOcc\u0093\u0093\6\2hh\u0111\u0111\u0124\u0124\u0159")
        buf.write("\u0159\4\2\u0195\u0195\u0197\u0197\5\2\u00f5\u00f5\u0150")
        buf.write("\u0150\u0161\u0161\7\2\u00d4\u00d4\u0126\u0126\u012c\u012c")
        buf.write("\u0171\u0173\u0187\u0188\3\2\u00e5\u00e6\4\2\u014f\u014f")
        buf.write("\u0160\u0160\5\2OOqq\u0153\u0153\4\2\32\32kk\4\2\u0126")
        buf.write("\u0126\u0195\u0195\3\2\u0199\u019a\4\2\u0195\u0195\u0199")
        buf.write("\u0199-\2JJ\u00c3\u00c3\u00cb\u00cb\u00cd\u00cd\u00d4")
        buf.write("\u00d5\u00d8\u00da\u00de\u00df\u00e1\u00e1\u00e3\u00e6")
        buf.write("\u00f2\u00f2\u00f4\u00f5\u00f7\u00f7\u00fa\u00fa\u00fd")
        buf.write("\u00fd\u00ff\u0101\u0105\u010a\u010c\u010f\u0111\u0111")
        buf.write("\u0114\u0114\u0116\u0116\u0118\u011a\u011c\u0128\u012c")
        buf.write("\u012c\u0130\u0130\u0132\u0132\u0135\u0137\u0139\u0139")
        buf.write("\u013b\u013c\u013f\u0146\u0148\u014d\u014f\u0151\u0153")
        buf.write("\u0153\u0155\u0155\u0158\u015a\u015c\u0165\u0167\u0168")
        buf.write("\u016a\u016a\u016c\u0173\u0177\u017a\u017e\u017e\u0180")
        buf.write("\u0184\u0186\u018d\u0196\u0196\3\2\u019f\u01a6\7\2\u010b")
        buf.write("\u010b\u011b\u011b\u012a\u012a\u0176\u0176\u01b3\u01b3")
        buf.write("\u0e38\2\u0151\3\2\2\2\4\u0156\3\2\2\2\6\u015e\3\2\2\2")
        buf.write("\b\u0166\3\2\2\2\n\u016c\3\2\2\2\f\u017d\3\2\2\2\16\u01fc")
        buf.write("\3\2\2\2\20\u0205\3\2\2\2\22\u0208\3\2\2\2\24\u0241\3")
        buf.write("\2\2\2\26\u0244\3\2\2\2\30\u0272\3\2\2\2\32\u0275\3\2")
        buf.write("\2\2\34\u0285\3\2\2\2\36\u02c0\3\2\2\2 \u02d8\3\2\2\2")
        buf.write("\"\u02eb\3\2\2\2$\u02ed\3\2\2\2&\u031e\3\2\2\2(\u0339")
        buf.write("\3\2\2\2*\u0362\3\2\2\2,\u0379\3\2\2\2.\u037b\3\2\2\2")
        buf.write("\60\u039a\3\2\2\2\62\u03b0\3\2\2\2\64\u03ce\3\2\2\2\66")
        buf.write("\u03d0\3\2\2\28\u03f6\3\2\2\2:\u0423\3\2\2\2<\u0436\3")
        buf.write("\2\2\2>\u0438\3\2\2\2@\u0451\3\2\2\2B\u0453\3\2\2\2D\u045b")
        buf.write("\3\2\2\2F\u045d\3\2\2\2H\u0460\3\2\2\2J\u0463\3\2\2\2")
        buf.write("L\u0465\3\2\2\2N\u0467\3\2\2\2P\u0469\3\2\2\2R\u0486\3")
        buf.write("\2\2\2T\u0488\3\2\2\2V\u048b\3\2\2\2X\u0494\3\2\2\2Z\u049c")
        buf.write("\3\2\2\2\\\u04a3\3\2\2\2^\u04ba\3\2\2\2`\u04bc\3\2\2\2")
        buf.write("b\u04c7\3\2\2\2d\u04c9\3\2\2\2f\u04d7\3\2\2\2h\u04e1\3")
        buf.write("\2\2\2j\u04eb\3\2\2\2l\u04f5\3\2\2\2n\u0506\3\2\2\2p\u050d")
        buf.write("\3\2\2\2r\u0517\3\2\2\2t\u0519\3\2\2\2v\u0520\3\2\2\2")
        buf.write("x\u0546\3\2\2\2z\u0562\3\2\2\2|\u058d\3\2\2\2~\u0591\3")
        buf.write("\2\2\2\u0080\u059e\3\2\2\2\u0082\u05d0\3\2\2\2\u0084\u05ec")
        buf.write("\3\2\2\2\u0086\u0615\3\2\2\2\u0088\u0664\3\2\2\2\u008a")
        buf.write("\u0666\3\2\2\2\u008c\u066a\3\2\2\2\u008e\u066f\3\2\2\2")
        buf.write("\u0090\u0673\3\2\2\2\u0092\u067c\3\2\2\2\u0094\u0681\3")
        buf.write("\2\2\2\u0096\u068d\3\2\2\2\u0098\u068f\3\2\2\2\u009a\u06c0")
        buf.write("\3\2\2\2\u009c\u06de\3\2\2\2\u009e\u0701\3\2\2\2\u00a0")
        buf.write("\u070d\3\2\2\2\u00a2\u0714\3\2\2\2\u00a4\u073b\3\2\2\2")
        buf.write("\u00a6\u074c\3\2\2\2\u00a8\u0795\3\2\2\2\u00aa\u0799\3")
        buf.write("\2\2\2\u00ac\u07c8\3\2\2\2\u00ae\u07e4\3\2\2\2\u00b0\u07e6")
        buf.write("\3\2\2\2\u00b2\u07e8\3\2\2\2\u00b4\u07f5\3\2\2\2\u00b6")
        buf.write("\u0811\3\2\2\2\u00b8\u0813\3\2\2\2\u00ba\u081b\3\2\2\2")
        buf.write("\u00bc\u0863\3\2\2\2\u00be\u086b\3\2\2\2\u00c0\u087c\3")
        buf.write("\2\2\2\u00c2\u087e\3\2\2\2\u00c4\u08a2\3\2\2\2\u00c6\u08ab")
        buf.write("\3\2\2\2\u00c8\u08bd\3\2\2\2\u00ca\u08d6\3\2\2\2\u00cc")
        buf.write("\u08d8\3\2\2\2\u00ce\u08df\3\2\2\2\u00d0\u08e3\3\2\2\2")
        buf.write("\u00d2\u08e5\3\2\2\2\u00d4\u091e\3\2\2\2\u00d6\u0920\3")
        buf.write("\2\2\2\u00d8\u0926\3\2\2\2\u00da\u0943\3\2\2\2\u00dc\u0945")
        buf.write("\3\2\2\2\u00de\u0953\3\2\2\2\u00e0\u0990\3\2\2\2\u00e2")
        buf.write("\u0993\3\2\2\2\u00e4\u0997\3\2\2\2\u00e6\u09a6\3\2\2\2")
        buf.write("\u00e8\u09ab\3\2\2\2\u00ea\u09c9\3\2\2\2\u00ec\u09cb\3")
        buf.write("\2\2\2\u00ee\u09d4\3\2\2\2\u00f0\u0a37\3\2\2\2\u00f2\u0a39")
        buf.write("\3\2\2\2\u00f4\u0a3e\3\2\2\2\u00f6\u0a44\3\2\2\2\u00f8")
        buf.write("\u0a51\3\2\2\2\u00fa\u0a5e\3\2\2\2\u00fc\u0a8a\3\2\2\2")
        buf.write("\u00fe\u0a8c\3\2\2\2\u0100\u0a99\3\2\2\2\u0102\u0a9b\3")
        buf.write("\2\2\2\u0104\u0a9d\3\2\2\2\u0106\u0aab\3\2\2\2\u0108\u0abd")
        buf.write("\3\2\2\2\u010a\u0ae8\3\2\2\2\u010c\u0aea\3\2\2\2\u010e")
        buf.write("\u0aec\3\2\2\2\u0110\u0afb\3\2\2\2\u0112\u0b04\3\2\2\2")
        buf.write("\u0114\u0b08\3\2\2\2\u0116\u0b10\3\2\2\2\u0118\u0b16\3")
        buf.write("\2\2\2\u011a\u0b3a\3\2\2\2\u011c\u0b3c\3\2\2\2\u011e\u0b49")
        buf.write("\3\2\2\2\u0120\u0b4b\3\2\2\2\u0122\u0b60\3\2\2\2\u0124")
        buf.write("\u0b9e\3\2\2\2\u0126\u0bac\3\2\2\2\u0128\u0bb3\3\2\2\2")
        buf.write("\u012a\u0bc1\3\2\2\2\u012c\u0bc7\3\2\2\2\u012e\u0bcc\3")
        buf.write("\2\2\2\u0130\u0bd0\3\2\2\2\u0132\u0bda\3\2\2\2\u0134\u0bdc")
        buf.write("\3\2\2\2\u0136\u0bde\3\2\2\2\u0138\u0be1\3\2\2\2\u013a")
        buf.write("\u0bea\3\2\2\2\u013c\u0bec\3\2\2\2\u013e\u0bfb\3\2\2\2")
        buf.write("\u0140\u0c0c\3\2\2\2\u0142\u0c0e\3\2\2\2\u0144\u0c13\3")
        buf.write("\2\2\2\u0146\u0c15\3\2\2\2\u0148\u0c26\3\2\2\2\u014a\u0c28")
        buf.write("\3\2\2\2\u014c\u0c2a\3\2\2\2\u014e\u0150\5\4\3\2\u014f")
        buf.write("\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2")
        buf.write("\u0151\u0152\3\2\2\2\u0152\u0154\3\2\2\2\u0153\u0151\3")
        buf.write("\2\2\2\u0154\u0155\7\2\2\3\u0155\3\3\2\2\2\u0156\u0158")
        buf.write("\5\6\4\2\u0157\u0159\5\u008aF\2\u0158\u0157\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\5\3\2\2\2\u015a\u015c\5\b\5\2\u015b")
        buf.write("\u015d\7\u01af\2\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2")
        buf.write("\2\2\u015d\u015f\3\2\2\2\u015e\u015a\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\7\3\2\2\2\u0162\u0167\5\n\6\2\u0163\u0167\5\f\7\2\u0164")
        buf.write("\u0167\5\16\b\2\u0165\u0167\5\20\t\2\u0166\u0162\3\2\2")
        buf.write("\2\u0166\u0163\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0165")
        buf.write("\3\2\2\2\u0167\t\3\2\2\2\u0168\u016d\5\22\n\2\u0169\u016d")
        buf.write("\5\26\f\2\u016a\u016d\5\32\16\2\u016b\u016d\5\34\17\2")
        buf.write("\u016c\u0168\3\2\2\2\u016c\u0169\3\2\2\2\u016c\u016a\3")
        buf.write("\2\2\2\u016c\u016b\3\2\2\2\u016d\13\3\2\2\2\u016e\u017e")
        buf.write("\5$\23\2\u016f\u017e\5&\24\2\u0170\u017e\5(\25\2\u0171")
        buf.write("\u017e\5.\30\2\u0172\u017e\5\60\31\2\u0173\u017e\5n8\2")
        buf.write("\u0174\u017e\5\62\32\2\u0175\u017e\5\66\34\2\u0176\u017e")
        buf.write("\58\35\2\u0177\u017e\5d\63\2\u0178\u017e\5f\64\2\u0179")
        buf.write("\u017e\5h\65\2\u017a\u017e\5j\66\2\u017b\u017e\5p9\2\u017c")
        buf.write("\u017e\5l\67\2\u017d\u016e\3\2\2\2\u017d\u016f\3\2\2\2")
        buf.write("\u017d\u0170\3\2\2\2\u017d\u0171\3\2\2\2\u017d\u0172\3")
        buf.write("\2\2\2\u017d\u0173\3\2\2\2\u017d\u0174\3\2\2\2\u017d\u0175")
        buf.write("\3\2\2\2\u017d\u0176\3\2\2\2\u017d\u0177\3\2\2\2\u017d")
        buf.write("\u0178\3\2\2\2\u017d\u0179\3\2\2\2\u017d\u017a\3\2\2\2")
        buf.write("\u017d\u017b\3\2\2\2\u017d\u017c\3\2\2\2\u017e\r\3\2\2")
        buf.write("\2\u017f\u0181\7\r\2\2\u0180\u0182\7\u01af\2\2\u0181\u0180")
        buf.write("\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183")
        buf.write("\u0185\5\6\4\2\u0184\u0183\3\2\2\2\u0184\u0185\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0188\7=\2\2\u0187\u0189\7")
        buf.write("\u01af\2\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u01fd\3\2\2\2\u018a\u018c\7\17\2\2\u018b\u018d\7\u01af")
        buf.write("\2\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u01fd")
        buf.write("\3\2\2\2\u018e\u0190\7$\2\2\u018f\u0191\7\u01af\2\2\u0190")
        buf.write("\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u01fd\3\2\2\2")
        buf.write("\u0192\u0193\7Q\2\2\u0193\u0195\5\u0144\u00a3\2\u0194")
        buf.write("\u0196\7\u01af\2\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2")
        buf.write("\2\2\u0196\u01fd\3\2\2\2\u0197\u0198\5\u0144\u00a3\2\u0198")
        buf.write("\u019a\7\u01b0\2\2\u0199\u019b\7\u01af\2\2\u019a\u0199")
        buf.write("\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u01fd\3\2\2\2\u019c")
        buf.write("\u019d\7X\2\2\u019d\u019e\5\u00ba^\2\u019e\u01a1\5\b\5")
        buf.write("\2\u019f\u01a0\7<\2\2\u01a0\u01a2\5\b\5\2\u01a1\u019f")
        buf.write("\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3")
        buf.write("\u01a5\7\u01af\2\2\u01a4\u01a3\3\2\2\2\u01a4\u01a5\3\2")
        buf.write("\2\2\u01a5\u01fd\3\2\2\2\u01a6\u01a8\7\u0090\2\2\u01a7")
        buf.write("\u01a9\5\u00acW\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9\3\2")
        buf.write("\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01ac\7\u01af\2\2\u01ab")
        buf.write("\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01fd\3\2\2\2")
        buf.write("\u01ad\u01b3\7\u0178\2\2\u01ae\u01af\t\2\2\2\u01af\u01b0")
        buf.write("\7\u01ae\2\2\u01b0\u01b1\t\3\2\2\u01b1\u01b2\7\u01ae\2")
        buf.write("\2\u01b2\u01b4\t\2\2\2\u01b3\u01ae\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01b6\3\2\2\2\u01b5\u01b7\7\u01af\2\2\u01b6")
        buf.write("\u01b5\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01fd\3\2\2\2")
        buf.write("\u01b8\u01b9\7\r\2\2\u01b9\u01bb\7\u017e\2\2\u01ba\u01bc")
        buf.write("\7\u01af\2\2\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc")
        buf.write("\u01be\3\2\2\2\u01bd\u01bf\5\6\4\2\u01be\u01bd\3\2\2\2")
        buf.write("\u01be\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\7")
        buf.write("=\2\2\u01c1\u01c3\7\u017e\2\2\u01c2\u01c4\7\u01af\2\2")
        buf.write("\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\3")
        buf.write("\2\2\2\u01c5\u01c6\7\r\2\2\u01c6\u01c8\7\u00da\2\2\u01c7")
        buf.write("\u01c9\7\u01af\2\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2")
        buf.write("\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01cc\5\6\4\2\u01cb\u01ca")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01ce\7=\2\2\u01ce\u01d0\7\u00da\2\2\u01cf\u01d1\7\u01af")
        buf.write("\2\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01fd")
        buf.write("\3\2\2\2\u01d2\u01d3\7\u00bc\2\2\u01d3\u01d4\t\4\2\2\u01d4")
        buf.write("\u01d6\5\u00acW\2\u01d5\u01d7\7\u01af\2\2\u01d6\u01d5")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01fd\3\2\2\2\u01d8")
        buf.write("\u01d9\7\u00bf\2\2\u01d9\u01e3\5\u00ba^\2\u01da\u01e4")
        buf.write("\5\b\5\2\u01db\u01dd\7\17\2\2\u01dc\u01de\7\u01af\2\2")
        buf.write("\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e4\3")
        buf.write("\2\2\2\u01df\u01e1\7$\2\2\u01e0\u01e2\7\u01af\2\2\u01e1")
        buf.write("\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2")
        buf.write("\u01e3\u01da\3\2\2\2\u01e3\u01db\3\2\2\2\u01e3\u01df\3")
        buf.write("\2\2\2\u01e4\u01fd\3\2\2\2\u01e5\u01e6\7\u0084\2\2\u01e6")
        buf.write("\u01e8\5\u00acW\2\u01e7\u01e9\7\u01af\2\2\u01e8\u01e7")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01fd\3\2\2\2\u01ea")
        buf.write("\u01eb\7\u0088\2\2\u01eb\u01ec\7\u01ac\2\2\u01ec\u01ed")
        buf.write("\t\5\2\2\u01ed\u01ee\7\u01ae\2\2\u01ee\u01ef\5\u00aaV")
        buf.write("\2\u01ef\u01f0\7\u01ae\2\2\u01f0\u01f5\5\u00aaV\2\u01f1")
        buf.write("\u01f2\7\u01ae\2\2\u01f2\u01f4\5\u00aaV\2\u01f3\u01f1")
        buf.write("\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u01f8\3\2\2\2\u01f7\u01f5\3\2\2\2")
        buf.write("\u01f8\u01fa\7\u01ad\2\2\u01f9\u01fb\7\u01af\2\2\u01fa")
        buf.write("\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3\2\2\2")
        buf.write("\u01fc\u017f\3\2\2\2\u01fc\u018a\3\2\2\2\u01fc\u018e\3")
        buf.write("\2\2\2\u01fc\u0192\3\2\2\2\u01fc\u0197\3\2\2\2\u01fc\u019c")
        buf.write("\3\2\2\2\u01fc\u01a6\3\2\2\2\u01fc\u01ad\3\2\2\2\u01fc")
        buf.write("\u01b8\3\2\2\2\u01fc\u01d2\3\2\2\2\u01fc\u01d8\3\2\2\2")
        buf.write("\u01fc\u01e5\3\2\2\2\u01fc\u01ea\3\2\2\2\u01fd\17\3\2")
        buf.write("\2\2\u01fe\u0206\5x=\2\u01ff\u0206\5z>\2\u0200\u0206\5")
        buf.write("|?\2\u0201\u0206\5\u0082B\2\u0202\u0206\5\u0086D\2\u0203")
        buf.write("\u0206\5\u0088E\2\u0204\u0206\5\u008cG\2\u0205\u01fe\3")
        buf.write("\2\2\2\u0205\u01ff\3\2\2\2\u0205\u0200\3\2\2\2\u0205\u0201")
        buf.write("\3\2\2\2\u0205\u0202\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write("\u0204\3\2\2\2\u0206\21\3\2\2\2\u0207\u0209\5\u00b2Z\2")
        buf.write("\u0208\u0207\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a\3")
        buf.write("\2\2\2\u020a\u0212\7\63\2\2\u020b\u020c\7\u00ab\2\2\u020c")
        buf.write("\u020d\7\u01ac\2\2\u020d\u020e\5\u00acW\2\u020e\u0210")
        buf.write("\7\u01ad\2\2\u020f\u0211\7\177\2\2\u0210\u020f\3\2\2\2")
        buf.write("\u0210\u0211\3\2\2\2\u0211\u0213\3\2\2\2\u0212\u020b\3")
        buf.write("\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\3\2\2\2\u0214\u0216")
        buf.write("\7N\2\2\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u0219\5\24\13\2\u0218\u021a\5\u00f8")
        buf.write("}\2\u0219\u0218\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c")
        buf.write("\3\2\2\2\u021b\u021d\5\36\20\2\u021c\u021b\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021f\7N\2\2")
        buf.write("\u021f\u0221\5\u00dco\2\u0220\u021e\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u022f\3\2\2\2\u0222\u022d\7\u00be\2\2\u0223")
        buf.write("\u022e\5\u00ba^\2\u0224\u0225\7(\2\2\u0225\u022b\7p\2")
        buf.write("\2\u0226\u0228\7\u010c\2\2\u0227\u0226\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022c\5\u0132\u009a")
        buf.write("\2\u022a\u022c\7\u0194\2\2\u022b\u0227\3\2\2\2\u022b\u022a")
        buf.write("\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u0223\3\2\2\2\u022d")
        buf.write("\u0224\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0222\3\2\2\2")
        buf.write("\u022f\u0230\3\2\2\2\u0230\u0232\3\2\2\2\u0231\u0233\5")
        buf.write("\u00caf\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("\u0235\3\2\2\2\u0234\u0236\5\u00d2j\2\u0235\u0234\3\2")
        buf.write("\2\2\u0235\u0236\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0239")
        buf.write("\7\u01af\2\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239")
        buf.write("\23\3\2\2\2\u023a\u023c\5\u0144\u00a3\2\u023b\u023d\5")
        buf.write("\u00f6|\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("\u0242\3\2\2\2\u023e\u0242\5\u012c\u0097\2\u023f\u0242")
        buf.write("\5r:\2\u0240\u0242\7\u0194\2\2\u0241\u023a\3\2\2\2\u0241")
        buf.write("\u023e\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0240\3\2\2\2")
        buf.write("\u0242\25\3\2\2\2\u0243\u0245\5\u00b2Z\2\u0244\u0243\3")
        buf.write("\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u024e")
        buf.write("\7\\\2\2\u0247\u0248\7\u00ab\2\2\u0248\u0249\7\u01ac\2")
        buf.write("\2\u0249\u024a\5\u00acW\2\u024a\u024c\7\u01ad\2\2\u024b")
        buf.write("\u024d\7\177\2\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2")
        buf.write("\2\u024d\u024f\3\2\2\2\u024e\u0247\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0251\3\2\2\2\u0250\u0252\7^\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0255\3\2\2\2")
        buf.write("\u0253\u0256\5\u012c\u0097\2\u0254\u0256\5r:\2\u0255\u0253")
        buf.write("\3\2\2\2\u0255\u0254\3\2\2\2\u0256\u0258\3\2\2\2\u0257")
        buf.write("\u0259\5\u00f8}\2\u0258\u0257\3\2\2\2\u0258\u0259\3\2")
        buf.write("\2\2\u0259\u025e\3\2\2\2\u025a\u025b\7\u01ac\2\2\u025b")
        buf.write("\u025c\5\u0130\u0099\2\u025c\u025d\7\u01ad\2\2\u025d\u025f")
        buf.write("\3\2\2\2\u025e\u025a\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0261\3\2\2\2\u0260\u0262\5\36\20\2\u0261\u0260\3\2\2")
        buf.write("\2\u0261\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265")
        buf.write("\5\30\r\2\u0264\u0266\5\u00caf\2\u0265\u0264\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u0268\3\2\2\2\u0267\u0269\5\u00d2")
        buf.write("j\2\u0268\u0267\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b")
        buf.write("\3\2\2\2\u026a\u026c\7\u01af\2\2\u026b\u026a\3\2\2\2\u026b")
        buf.write("\u026c\3\2\2\2\u026c\27\3\2\2\2\u026d\u0273\5\u0104\u0083")
        buf.write("\2\u026e\u0273\5\u00eex\2\u026f\u0273\5|?\2\u0270\u0271")
        buf.write("\7\62\2\2\u0271\u0273\7\u00b9\2\2\u0272\u026d\3\2\2\2")
        buf.write("\u0272\u026e\3\2\2\2\u0272\u026f\3\2\2\2\u0272\u0270\3")
        buf.write("\2\2\2\u0273\31\3\2\2\2\u0274\u0276\5\u00b2Z\2\u0275\u0274")
        buf.write("\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("\u0279\5\u00be`\2\u0278\u027a\5\u00c6d\2\u0279\u0278\3")
        buf.write("\2\2\2\u0279\u027a\3\2\2\2\u027a\u027c\3\2\2\2\u027b\u027d")
        buf.write("\5\u00caf\2\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d")
        buf.write("\u027f\3\2\2\2\u027e\u0280\5\u00d2j\2\u027f\u027e\3\2")
        buf.write("\2\2\u027f\u0280\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u0283")
        buf.write("\7\u01af\2\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\33\3\2\2\2\u0284\u0286\5\u00b2Z\2\u0285\u0284\3\2\2\2")
        buf.write("\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u028f\7")
        buf.write("\u00b5\2\2\u0288\u0289\7\u00ab\2\2\u0289\u028a\7\u01ac")
        buf.write("\2\2\u028a\u028b\5\u00acW\2\u028b\u028d\7\u01ad\2\2\u028c")
        buf.write("\u028e\7\177\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2")
        buf.write("\2\u028e\u0290\3\2\2\2\u028f\u0288\3\2\2\2\u028f\u0290")
        buf.write("\3\2\2\2\u0290\u0293\3\2\2\2\u0291\u0294\5\u012c\u0097")
        buf.write("\2\u0292\u0294\5r:\2\u0293\u0291\3\2\2\2\u0293\u0292\3")
        buf.write("\2\2\2\u0294\u0296\3\2\2\2\u0295\u0297\5\u00f6|\2\u0296")
        buf.write("\u0295\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u0299\7\u00a0\2\2\u0299\u029e\5\u00b6\\\2\u029a")
        buf.write("\u029b\7\u01ae\2\2\u029b\u029d\5\u00b6\\\2\u029c\u029a")
        buf.write("\3\2\2\2\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a1\u02a3\5\36\20\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3\u02a6\3\2\2\2\u02a4\u02a5\7N\2\2\u02a5")
        buf.write("\u02a7\5\u00dco\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2")
        buf.write("\2\2\u02a7\u02b5\3\2\2\2\u02a8\u02b3\7\u00be\2\2\u02a9")
        buf.write("\u02b4\5\u00b8]\2\u02aa\u02ab\7(\2\2\u02ab\u02b1\7p\2")
        buf.write("\2\u02ac\u02ae\7\u010c\2\2\u02ad\u02ac\3\2\2\2\u02ad\u02ae")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b2\5\u0132\u009a")
        buf.write("\2\u02b0\u02b2\7\u0194\2\2\u02b1\u02ad\3\2\2\2\u02b1\u02b0")
        buf.write("\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02a9\3\2\2\2\u02b3")
        buf.write("\u02aa\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02a8\3\2\2\2")
        buf.write("\u02b5\u02b6\3\2\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b9\5")
        buf.write("\u00caf\2\u02b8\u02b7\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02bb\3\2\2\2\u02ba\u02bc\5\u00d2j\2\u02bb\u02ba\3\2")
        buf.write("\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2\u02bd\u02bf")
        buf.write("\7\u01af\2\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf")
        buf.write("\35\3\2\2\2\u02c0\u02c1\7\u0145\2\2\u02c1\u02c6\5 \21")
        buf.write("\2\u02c2\u02c3\7\u01ae\2\2\u02c3\u02c5\5 \21\2\u02c4\u02c2")
        buf.write("\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6")
        buf.write("\u02c7\3\2\2\2\u02c7\u02d4\3\2\2\2\u02c8\u02c6\3\2\2\2")
        buf.write("\u02c9\u02cc\7^\2\2\u02ca\u02cd\7\u0194\2\2\u02cb\u02cd")
        buf.write("\5\u0126\u0094\2\u02cc\u02ca\3\2\2\2\u02cc\u02cb\3\2\2")
        buf.write("\2\u02cd\u02d2\3\2\2\2\u02ce\u02cf\7\u01ac\2\2\u02cf\u02d0")
        buf.write("\5\u0130\u0099\2\u02d0\u02d1\7\u01ad\2\2\u02d1\u02d3\3")
        buf.write("\2\2\2\u02d2\u02ce\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5")
        buf.write("\3\2\2\2\u02d4\u02c9\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\37\3\2\2\2\u02d6\u02d9\5\"\22\2\u02d7\u02d9\5\u00acW")
        buf.write("\2\u02d8\u02d6\3\2\2\2\u02d8\u02d7\3\2\2\2\u02d9\u02de")
        buf.write("\3\2\2\2\u02da\u02dc\7\t\2\2\u02db\u02da\3\2\2\2\u02db")
        buf.write("\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02df\5\u0100")
        buf.write("\u0081\2\u02de\u02db\3\2\2\2\u02de\u02df\3\2\2\2\u02df")
        buf.write("!\3\2\2\2\u02e0\u02e4\7\u00f4\2\2\u02e1\u02e4\7\u0119")
        buf.write("\2\2\u02e2\u02e4\5\u0126\u0094\2\u02e3\u02e0\3\2\2\2\u02e3")
        buf.write("\u02e1\3\2\2\2\u02e3\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2")
        buf.write("\u02e5\u02e8\7\u01a7\2\2\u02e6\u02e9\7\u01b1\2\2\u02e7")
        buf.write("\u02e9\5\u0144\u00a3\2\u02e8\u02e6\3\2\2\2\u02e8\u02e7")
        buf.write("\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02ec\7\u018e\2\2\u02eb")
        buf.write("\u02e3\3\2\2\2\u02eb\u02ea\3\2\2\2\u02ec#\3\2\2\2\u02ed")
        buf.write("\u02ee\7&\2\2\u02ee\u02ef\7.\2\2\u02ef\u02f3\5\u0144\u00a3")
        buf.write("\2\u02f0\u02f1\7!\2\2\u02f1\u02f2\7\u019b\2\2\u02f2\u02f4")
        buf.write("\t\6\2\2\u02f3\u02f0\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write("\u0301\3\2\2\2\u02f5\u02f7\7s\2\2\u02f6\u02f8\7\u0083")
        buf.write("\2\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9")
        buf.write("\3\2\2\2\u02f9\u02fe\5\u011e\u0090\2\u02fa\u02fb\7\u01ae")
        buf.write("\2\2\u02fb\u02fd\5\u011e\u0090\2\u02fc\u02fa\3\2\2\2\u02fd")
        buf.write("\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2")
        buf.write("\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\u02f5\3")
        buf.write("\2\2\2\u0301\u0302\3\2\2\2\u0302\u030d\3\2\2\2\u0303\u0304")
        buf.write("\7g\2\2\u0304\u0305\7s\2\2\u0305\u030a\5\u011e\u0090\2")
        buf.write("\u0306\u0307\7\u01ae\2\2\u0307\u0309\5\u011e\u0090\2\u0308")
        buf.write("\u0306\3\2\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3\2\2\2")
        buf.write("\u030a\u030b\3\2\2\2\u030b\u030e\3\2\2\2\u030c\u030a\3")
        buf.write("\2\2\2\u030d\u0303\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0311")
        buf.write("\3\2\2\2\u030f\u0310\7\34\2\2\u0310\u0312\5\u0144\u00a3")
        buf.write("\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u031c")
        buf.write("\3\2\2\2\u0313\u0314\7\u00c0\2\2\u0314\u0319\5\u011a\u008e")
        buf.write("\2\u0315\u0316\7\u01ae\2\2\u0316\u0318\5\u011a\u008e\2")
        buf.write("\u0317\u0315\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3")
        buf.write("\2\2\2\u0319\u031a\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319")
        buf.write("\3\2\2\2\u031c\u0313\3\2\2\2\u031c\u031d\3\2\2\2\u031d")
        buf.write("%\3\2\2\2\u031e\u0320\7&\2\2\u031f\u0321\7\u00b3\2\2\u0320")
        buf.write("\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2")
        buf.write("\u0322\u0324\5\u0136\u009c\2\u0323\u0322\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\7Z\2\2")
        buf.write("\u0326\u0327\5\u0144\u00a3\2\u0327\u0328\7s\2\2\u0328")
        buf.write("\u0329\5\u00e8u\2\u0329\u032a\7\u01ac\2\2\u032a\u032c")
        buf.write("\5\u0130\u0099\2\u032b\u032d\t\7\2\2\u032c\u032b\3\2\2")
        buf.write("\2\u032c\u032d\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0330")
        buf.write("\7\u01ad\2\2\u032f\u0331\5\u009eP\2\u0330\u032f\3\2\2")
        buf.write("\2\u0330\u0331\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0333")
        buf.write("\7s\2\2\u0333\u0335\5\u0144\u00a3\2\u0334\u0332\3\2\2")
        buf.write("\2\u0334\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0338")
        buf.write("\7\u01af\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338")
        buf.write("\'\3\2\2\2\u0339\u033a\7&\2\2\u033a\u033b\t\b\2\2\u033b")
        buf.write("\u033e\5\u012a\u0096\2\u033c\u033d\7\u01af\2\2\u033d\u033f")
        buf.write("\7\u0195\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u034e\3\2\2\2\u0340\u0342\7\u01ac\2\2\u0341\u0340\3\2")
        buf.write("\2\2\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0348")
        buf.write("\5*\26\2\u0344\u0345\7\u01ae\2\2\u0345\u0347\5*\26\2\u0346")
        buf.write("\u0344\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2")
        buf.write("\u0348\u0349\3\2\2\2\u0349\u034c\3\2\2\2\u034a\u0348\3")
        buf.write("\2\2\2\u034b\u034d\7\u01ad\2\2\u034c\u034b\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e\u0341\3\2\2\2")
        buf.write("\u034e\u034f\3\2\2\2\u034f\u0359\3\2\2\2\u0350\u0351\7")
        buf.write("\u00c0\2\2\u0351\u0356\5,\27\2\u0352\u0353\7\u01ae\2\2")
        buf.write("\u0353\u0355\5,\27\2\u0354\u0352\3\2\2\2\u0355\u0358\3")
        buf.write("\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u035a")
        buf.write("\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u0350\3\2\2\2\u0359")
        buf.write("\u035a\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u035c\7I\2\2")
        buf.write("\u035c\u035e\7\u008d\2\2\u035d\u035b\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\7\t\2\2\u0360")
        buf.write("\u0361\5\6\4\2\u0361)\3\2\2\2\u0362\u0366\7\u0194\2\2")
        buf.write("\u0363\u0364\5\u0144\u00a3\2\u0364\u0365\7\u01a7\2\2\u0365")
        buf.write("\u0367\3\2\2\2\u0366\u0363\3\2\2\2\u0366\u0367\3\2\2\2")
        buf.write("\u0367\u0369\3\2\2\2\u0368\u036a\7\t\2\2\u0369\u0368\3")
        buf.write("\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d")
        buf.write("\5\u013c\u009f\2\u036c\u036e\7\u00ba\2\2\u036d\u036c\3")
        buf.write("\2\2\2\u036d\u036e\3\2\2\2\u036e\u0371\3\2\2\2\u036f\u0370")
        buf.write("\7\u019b\2\2\u0370\u0372\5\u013e\u00a0\2\u0371\u036f\3")
        buf.write("\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374\3\2\2\2\u0373\u0375")
        buf.write("\t\t\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("+\3\2\2\2\u0376\u037a\7\u00fd\2\2\u0377\u037a\7\u0155")
        buf.write("\2\2\u0378\u037a\5\u008eH\2\u0379\u0376\3\2\2\2\u0379")
        buf.write("\u0377\3\2\2\2\u0379\u0378\3\2\2\2\u037a-\3\2\2\2\u037b")
        buf.write("\u037c\7&\2\2\u037c\u037d\7\u00a4\2\2\u037d\u037e\5\u0144")
        buf.write("\u00a3\2\u037e\u037f\7s\2\2\u037f\u0380\5\u00e8u\2\u0380")
        buf.write("\u0381\7\u01ac\2\2\u0381\u0382\5\u0130\u0099\2\u0382\u0395")
        buf.write("\7\u01ad\2\2\u0383\u0389\7\u00c0\2\2\u0384\u038a\7\u010a")
        buf.write("\2\2\u0385\u0386\7\u0162\2\2\u0386\u0387\7\u0195\2\2\u0387")
        buf.write("\u038a\t\n\2\2\u0388\u038a\7\u0170\2\2\u0389\u0384\3\2")
        buf.write("\2\2\u0389\u0385\3\2\2\2\u0389\u0388\3\2\2\2\u038a\u038d")
        buf.write("\3\2\2\2\u038b\u038c\7\u01ae\2\2\u038c\u038e\7\u0139\2")
        buf.write("\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0393")
        buf.write("\3\2\2\2\u038f\u0390\7\u01ae\2\2\u0390\u0391\7\u0117\2")
        buf.write("\2\u0391\u0392\7\u019b\2\2\u0392\u0394\5\u0134\u009b\2")
        buf.write("\u0393\u038f\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396\3")
        buf.write("\2\2\2\u0395\u0383\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398")
        buf.write("\3\2\2\2\u0397\u0399\7\u01af\2\2\u0398\u0397\3\2\2\2\u0398")
        buf.write("\u0399\3\2\2\2\u0399/\3\2\2\2\u039a\u039b\7&\2\2\u039b")
        buf.write("\u039c\7\u00a6\2\2\u039c\u039d\5\u0126\u0094\2\u039d\u039e")
        buf.write("\7\u01ac\2\2\u039e\u03a0\5\u0094K\2\u039f\u03a1\7\u01ae")
        buf.write("\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u03a6\7\u01ad\2\2\u03a3\u03a4\7s\2\2\u03a4")
        buf.write("\u03a7\5\u0144\u00a3\2\u03a5\u03a7\7\62\2\2\u03a6\u03a3")
        buf.write("\3\2\2\2\u03a6\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03ab\3\2\2\2\u03a8\u03a9\7\u0177\2\2\u03a9\u03ac\5\u0144")
        buf.write("\u00a3\2\u03aa\u03ac\7\62\2\2\u03ab\u03a8\3\2\2\2\u03ab")
        buf.write("\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2")
        buf.write("\u03ad\u03af\7\u01af\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af")
        buf.write("\3\2\2\2\u03af\61\3\2\2\2\u03b0\u03b1\7&\2\2\u03b1\u03b2")
        buf.write("\7\u00bb\2\2\u03b2\u03b7\5\u0128\u0095\2\u03b3\u03b4\7")
        buf.write("\u01ac\2\2\u03b4\u03b5\5\u0130\u0099\2\u03b5\u03b6\7\u01ad")
        buf.write("\2\2\u03b6\u03b8\3\2\2\2\u03b7\u03b3\3\2\2\2\u03b7\u03b8")
        buf.write("\3\2\2\2\u03b8\u03c2\3\2\2\2\u03b9\u03ba\7\u00c0\2\2\u03ba")
        buf.write("\u03bf\5\64\33\2\u03bb\u03bc\7\u01ae\2\2\u03bc\u03be\5")
        buf.write("\64\33\2\u03bd\u03bb\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf")
        buf.write("\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c3\3\2\2\2")
        buf.write("\u03c1\u03bf\3\2\2\2\u03c2\u03b9\3\2\2\2\u03c2\u03c3\3")
        buf.write("\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\7\t\2\2\u03c5\u03c9")
        buf.write("\5\32\16\2\u03c6\u03c7\7\u00c0\2\2\u03c7\u03c8\7\27\2")
        buf.write("\2\u03c8\u03ca\7y\2\2\u03c9\u03c6\3\2\2\2\u03c9\u03ca")
        buf.write("\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03cd\7\u01af\2\2\u03cc")
        buf.write("\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\63\3\2\2\2\u03ce")
        buf.write("\u03cf\t\13\2\2\u03cf\65\3\2\2\2\u03d0\u03d1\7\6\2\2\u03d1")
        buf.write("\u03d2\7\u00a6\2\2\u03d2\u03f1\5\u0126\u0094\2\u03d3\u03d4")
        buf.write("\7\u00a0\2\2\u03d4\u03d5\7\u01ac\2\2\u03d5\u03d6\7\u0122")
        buf.write("\2\2\u03d6\u03d7\7\u019b\2\2\u03d7\u03d8\t\f\2\2\u03d8")
        buf.write("\u03f2\7\u01ad\2\2\u03d9\u03da\7\4\2\2\u03da\u03f2\5\u0096")
        buf.write("L\2\u03db\u03dc\7:\2\2\u03dc\u03dd\7 \2\2\u03dd\u03f2")
        buf.write("\5\u0144\u00a3\2\u03de\u03df\7\u00c0\2\2\u03df\u03e0\7")
        buf.write("\27\2\2\u03e0\u03e1\7\4\2\2\u03e1\u03e2\7 \2\2\u03e2\u03e3")
        buf.write("\5\u0144\u00a3\2\u03e3\u03e4\7K\2\2\u03e4\u03e5\7a\2\2")
        buf.write("\u03e5\u03e6\7\u01ac\2\2\u03e6\u03e7\5\u0130\u0099\2\u03e7")
        buf.write("\u03e8\7\u01ad\2\2\u03e8\u03e9\7\u008c\2\2\u03e9\u03ea")
        buf.write("\5\u0126\u0094\2\u03ea\u03eb\7\u01ac\2\2\u03eb\u03ec\5")
        buf.write("\u0130\u0099\2\u03ec\u03ed\7\u01ad\2\2\u03ed\u03f2\3\2")
        buf.write("\2\2\u03ee\u03ef\7\27\2\2\u03ef\u03f0\7 \2\2\u03f0\u03f2")
        buf.write("\5\u0144\u00a3\2\u03f1\u03d3\3\2\2\2\u03f1\u03d9\3\2\2")
        buf.write("\2\u03f1\u03db\3\2\2\2\u03f1\u03de\3\2\2\2\u03f1\u03ee")
        buf.write("\3\2\2\2\u03f2\u03f4\3\2\2\2\u03f3\u03f5\7\u01af\2\2\u03f4")
        buf.write("\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\67\3\2\2\2\u03f6")
        buf.write("\u03f7\7\6\2\2\u03f7\u03fa\7.\2\2\u03f8\u03fb\5\u0144")
        buf.write("\u00a3\2\u03f9\u03fb\7(\2\2\u03fa\u03f8\3\2\2\2\u03fa")
        buf.write("\u03f9\3\2\2\2\u03fb\u0408\3\2\2\2\u03fc\u03fd\7\u0130")
        buf.write("\2\2\u03fd\u03fe\7\u0132\2\2\u03fe\u03ff\7\u019b\2\2\u03ff")
        buf.write("\u0409\5\u0144\u00a3\2\u0400\u0401\7\34\2\2\u0401\u0409")
        buf.write("\5\u0144\u00a3\2\u0402\u0403\7\u00a0\2\2\u0403\u0406\5")
        buf.write(":\36\2\u0404\u0405\7\u00c0\2\2\u0405\u0407\5b\62\2\u0406")
        buf.write("\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2")
        buf.write("\u0408\u03fc\3\2\2\2\u0408\u0400\3\2\2\2\u0408\u0402\3")
        buf.write("\2\2\2\u0409\u040b\3\2\2\2\u040a\u040c\7\u01af\2\2\u040b")
        buf.write("\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c9\3\2\2\2\u040d")
        buf.write("\u0424\5<\37\2\u040e\u0424\5> \2\u040f\u0424\5B\"\2\u0410")
        buf.write("\u0424\5D#\2\u0411\u0424\5F$\2\u0412\u0424\5H%\2\u0413")
        buf.write("\u0424\5J&\2\u0414\u0424\5L\'\2\u0415\u0424\5N(\2\u0416")
        buf.write("\u0424\5P)\2\u0417\u0424\5R*\2\u0418\u0419\7\u0104\2\2")
        buf.write("\u0419\u0424\5\u011c\u008f\2\u041a\u0424\7\3\2\2\u041b")
        buf.write("\u0424\5T+\2\u041c\u0424\5V,\2\u041d\u0424\5X-\2\u041e")
        buf.write("\u0424\5Z.\2\u041f\u0424\5\\/\2\u0420\u0424\5^\60\2\u0421")
        buf.write("\u0424\5`\61\2\u0422\u0424\5b\62\2\u0423\u040d\3\2\2\2")
        buf.write("\u0423\u040e\3\2\2\2\u0423\u040f\3\2\2\2\u0423\u0410\3")
        buf.write("\2\2\2\u0423\u0411\3\2\2\2\u0423\u0412\3\2\2\2\u0423\u0413")
        buf.write("\3\2\2\2\u0423\u0414\3\2\2\2\u0423\u0415\3\2\2\2\u0423")
        buf.write("\u0416\3\2\2\2\u0423\u0417\3\2\2\2\u0423\u0418\3\2\2\2")
        buf.write("\u0423\u041a\3\2\2\2\u0423\u041b\3\2\2\2\u0423\u041c\3")
        buf.write("\2\2\2\u0423\u041d\3\2\2\2\u0423\u041e\3\2\2\2\u0423\u041f")
        buf.write("\3\2\2\2\u0423\u0420\3\2\2\2\u0423\u0421\3\2\2\2\u0423")
        buf.write("\u0422\3\2\2\2\u0424;\3\2\2\2\u0425\u0426\7\u00cf\2\2")
        buf.write("\u0426\u0437\5\u0134\u009b\2\u0427\u0428\7\u00d0\2\2\u0428")
        buf.write("\u0437\7q\2\2\u0429\u042e\7s\2\2\u042a\u042b\7\u0117\2")
        buf.write("\2\u042b\u042c\7\u019b\2\2\u042c\u042f\7s\2\2\u042d\u042f")
        buf.write("\7q\2\2\u042e\u042a\3\2\2\2\u042e\u042d\3\2\2\2\u042f")
        buf.write("\u0437\3\2\2\2\u0430\u0431\7\u00d1\2\2\u0431\u0437\5\u0134")
        buf.write("\u009b\2\u0432\u0433\7\u00d2\2\2\u0433\u0437\5\u0134\u009b")
        buf.write("\2\u0434\u0435\7\u00d3\2\2\u0435\u0437\t\r\2\2\u0436\u0425")
        buf.write("\3\2\2\2\u0436\u0427\3\2\2\2\u0436\u0429\3\2\2\2\u0436")
        buf.write("\u0430\3\2\2\2\u0436\u0432\3\2\2\2\u0436\u0434\3\2\2\2")
        buf.write("\u0437=\3\2\2\2\u0438\u0439\7\u00dc\2\2\u0439\u0449\7")
        buf.write("\u019b\2\2\u043a\u044a\7q\2\2\u043b\u0446\7s\2\2\u043c")
        buf.write("\u0441\5@!\2\u043d\u043e\7\u01ae\2\2\u043e\u0440\5@!\2")
        buf.write("\u043f\u043d\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3")
        buf.write("\2\2\2\u0441\u0442\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441")
        buf.write("\3\2\2\2\u0444\u043c\3\2\2\2\u0445\u0448\3\2\2\2\u0446")
        buf.write("\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u044a\3\2\2\2")
        buf.write("\u0448\u0446\3\2\2\2\u0449\u043a\3\2\2\2\u0449\u043b\3")
        buf.write("\2\2\2\u044a?\3\2\2\2\u044b\u044c\7\u00ce\2\2\u044c\u044d")
        buf.write("\7\u019b\2\2\u044d\u0452\5\u0134\u009b\2\u044e\u044f\7")
        buf.write("\u00db\2\2\u044f\u0450\7\u019b\2\2\u0450\u0452\t\16\2")
        buf.write("\2\u0451\u044b\3\2\2\2\u0451\u044e\3\2\2\2\u0452A\3\2")
        buf.write("\2\2\u0453\u0454\7!\2\2\u0454\u0455\7\u019b\2\2\u0455")
        buf.write("\u0456\t\6\2\2\u0456C\3\2\2\2\u0457\u0458\7\u00e7\2\2")
        buf.write("\u0458\u045c\5\u0134\u009b\2\u0459\u045a\7\u00e8\2\2\u045a")
        buf.write("\u045c\t\17\2\2\u045b\u0457\3\2\2\2\u045b\u0459\3\2\2")
        buf.write("\2\u045cE\3\2\2\2\u045d\u045e\7\u00ed\2\2\u045e\u045f")
        buf.write("\5\u0134\u009b\2\u045fG\3\2\2\2\u0460\u0461\7\u00fd\2")
        buf.write("\2\u0461\u0462\5\u0134\u009b\2\u0462I\3\2\2\2\u0463\u0464")
        buf.write("\t\20\2\2\u0464K\3\2\2\2\u0465\u0466\t\21\2\2\u0466M\3")
        buf.write("\2\2\2\u0467\u0468\t\22\2\2\u0468O\3\2\2\2\u0469\u046a")
        buf.write("\7\u00f3\2\2\u046a\u046b\7\u019b\2\2\u046b\u046c\t\23")
        buf.write("\2\2\u046cQ\3\2\2\2\u046d\u046e\7\u00ef\2\2\u046e\u0487")
        buf.write("\5\u0134\u009b\2\u046f\u0470\7\u017d\2\2\u0470\u0487\5")
        buf.write("\u0134\u009b\2\u0471\u0472\7\u00f1\2\2\u0472\u0475\7\u019b")
        buf.write("\2\2\u0473\u0476\5\u0144\u00a3\2\u0474\u0476\7\u0197\2")
        buf.write("\2\u0475\u0473\3\2\2\2\u0475\u0474\3\2\2\2\u0476\u0487")
        buf.write("\3\2\2\2\u0477\u0478\7\u00f0\2\2\u0478\u047b\7\u019b\2")
        buf.write("\2\u0479\u047c\5\u0144\u00a3\2\u047a\u047c\7\u0197\2\2")
        buf.write("\u047b\u0479\3\2\2\2\u047b\u047a\3\2\2\2\u047c\u0487\3")
        buf.write("\2\2\2\u047d\u047e\7\u0133\2\2\u047e\u047f\7\u019b\2\2")
        buf.write("\u047f\u0487\t\r\2\2\u0480\u0481\7\u017c\2\2\u0481\u0482")
        buf.write("\7\u019b\2\2\u0482\u0487\t\r\2\2\u0483\u0484\7\u017f\2")
        buf.write("\2\u0484\u0485\7\u019b\2\2\u0485\u0487\7\u0195\2\2\u0486")
        buf.write("\u046d\3\2\2\2\u0486\u046f\3\2\2\2\u0486\u0471\3\2\2\2")
        buf.write("\u0486\u0477\3\2\2\2\u0486\u047d\3\2\2\2\u0486\u0480\3")
        buf.write("\2\2\2\u0486\u0483\3\2\2\2\u0487S\3\2\2\2\u0488\u0489")
        buf.write("\7\u012f\2\2\u0489\u048a\t\r\2\2\u048aU\3\2\2\2\u048b")
        buf.write("\u048c\7\u0148\2\2\u048c\u048d\t\24\2\2\u048dW\3\2\2\2")
        buf.write("\u048e\u048f\7\u0156\2\2\u048f\u0495\t\25\2\2\u0490\u0491")
        buf.write("\7\u017b\2\2\u0491\u0495\5\u0134\u009b\2\u0492\u0493\7")
        buf.write("\u0147\2\2\u0493\u0495\t\26\2\2\u0494\u048e\3\2\2\2\u0494")
        buf.write("\u0490\3\2\2\2\u0494\u0492\3\2\2\2\u0495Y\3\2\2\2\u0496")
        buf.write("\u049d\7\u00fc\2\2\u0497\u049d\7\u00f9\2\2\u0498\u049d")
        buf.write("\7\u0134\2\2\u0499\u049d\7\u00fe\2\2\u049a\u049b\7\u0112")
        buf.write("\2\2\u049b\u049d\5\u0134\u009b\2\u049c\u0496\3\2\2\2\u049c")
        buf.write("\u0497\3\2\2\2\u049c\u0498\3\2\2\2\u049c\u0499\3\2\2\2")
        buf.write("\u049c\u049a\3\2\2\2\u049d[\3\2\2\2\u049e\u049f\7\u00c6")
        buf.write("\2\2\u049f\u04a4\5\u0134\u009b\2\u04a0\u04a1\7\u0152\2")
        buf.write("\2\u04a1\u04a4\t\r\2\2\u04a2\u04a4\t\r\2\2\u04a3\u049e")
        buf.write("\3\2\2\2\u04a3\u04a0\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4")
        buf.write("]\3\2\2\2\u04a5\u04a6\7\u00c8\2\2\u04a6\u04bb\5\u0134")
        buf.write("\u009b\2\u04a7\u04a8\7\u00c7\2\2\u04a8\u04bb\5\u0134\u009b")
        buf.write("\2\u04a9\u04aa\7\u00c9\2\2\u04aa\u04bb\5\u0134\u009b\2")
        buf.write("\u04ab\u04ac\7\u00ca\2\2\u04ac\u04bb\5\u0134\u009b\2\u04ad")
        buf.write("\u04ae\7\u00cc\2\2\u04ae\u04bb\5\u0134\u009b\2\u04af\u04b0")
        buf.write("\7\u00e0\2\2\u04b0\u04b1\7\u019b\2\2\u04b1\u04bb\7\u0195")
        buf.write("\2\2\u04b2\u04b3\7\u00e2\2\2\u04b3\u04bb\5\u0134\u009b")
        buf.write("\2\u04b4\u04b5\7\u013d\2\2\u04b5\u04bb\5\u0134\u009b\2")
        buf.write("\u04b6\u04b7\7\u014e\2\2\u04b7\u04bb\5\u0134\u009b\2\u04b8")
        buf.write("\u04b9\7\u0157\2\2\u04b9\u04bb\5\u0134\u009b\2\u04ba\u04a5")
        buf.write("\3\2\2\2\u04ba\u04a7\3\2\2\2\u04ba\u04a9\3\2\2\2\u04ba")
        buf.write("\u04ab\3\2\2\2\u04ba\u04ad\3\2\2\2\u04ba\u04af\3\2\2\2")
        buf.write("\u04ba\u04b2\3\2\2\2\u04ba\u04b4\3\2\2\2\u04ba\u04b6\3")
        buf.write("\2\2\2\u04ba\u04b8\3\2\2\2\u04bb_\3\2\2\2\u04bc\u04bd")
        buf.write("\7\u0175\2\2\u04bd\u04be\7\u019b\2\2\u04be\u04bf\7\u0195")
        buf.write("\2\2\u04bf\u04c0\t\27\2\2\u04c0a\3\2\2\2\u04c1\u04c2\7")
        buf.write("\u0094\2\2\u04c2\u04c3\7\u00c4\2\2\u04c3\u04c8\7\u0195")
        buf.write("\2\2\u04c4\u04c5\7\u0094\2\2\u04c5\u04c8\7\u0115\2\2\u04c6")
        buf.write("\u04c8\7\u013a\2\2\u04c7\u04c1\3\2\2\2\u04c7\u04c4\3\2")
        buf.write("\2\2\u04c7\u04c6\3\2\2\2\u04c8c\3\2\2\2\u04c9\u04ca\7")
        buf.write(":\2\2\u04ca\u04cd\7Z\2\2\u04cb\u04cc\7X\2\2\u04cc\u04ce")
        buf.write("\7B\2\2\u04cd\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\u04cf\3\2\2\2\u04cf\u04d2\5\u0144\u00a3\2\u04d0\u04d1")
        buf.write("\7s\2\2\u04d1\u04d3\5\u0126\u0094\2\u04d2\u04d0\3\2\2")
        buf.write("\2\u04d2\u04d3\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4\u04d6")
        buf.write("\7\u01af\2\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6")
        buf.write("e\3\2\2\2\u04d7\u04d8\7:\2\2\u04d8\u04db\7\u0086\2\2\u04d9")
        buf.write("\u04da\7X\2\2\u04da\u04dc\7B\2\2\u04db\u04d9\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df\5\u012a")
        buf.write("\u0096\2\u04de\u04e0\7\u01af\2\2\u04df\u04de\3\2\2\2\u04df")
        buf.write("\u04e0\3\2\2\2\u04e0g\3\2\2\2\u04e1\u04e2\7:\2\2\u04e2")
        buf.write("\u04e6\7\u00a4\2\2\u04e3\u04e4\5\u0126\u0094\2\u04e4\u04e5")
        buf.write("\7\u01a7\2\2\u04e5\u04e7\3\2\2\2\u04e6\u04e3\3\2\2\2\u04e6")
        buf.write("\u04e7\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04e9\5\u0144")
        buf.write("\u00a3\2\u04e9\u04ea\7\u01af\2\2\u04eai\3\2\2\2\u04eb")
        buf.write("\u04ec\7:\2\2\u04ec\u04ef\7\u00a6\2\2\u04ed\u04ee\7X\2")
        buf.write("\2\u04ee\u04f0\7B\2\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0")
        buf.write("\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\5\u0126\u0094")
        buf.write("\2\u04f2\u04f4\7\u01af\2\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4")
        buf.write("\3\2\2\2\u04f4k\3\2\2\2\u04f5\u04f6\7:\2\2\u04f6\u04f9")
        buf.write("\7\u00bb\2\2\u04f7\u04f8\7X\2\2\u04f8\u04fa\7B\2\2\u04f9")
        buf.write("\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\3\2\2\2")
        buf.write("\u04fb\u0500\5\u0128\u0095\2\u04fc\u04fd\7\u01ae\2\2\u04fd")
        buf.write("\u04ff\5\u0128\u0095\2\u04fe\u04fc\3\2\2\2\u04ff\u0502")
        buf.write("\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501")
        buf.write("\u0504\3\2\2\2\u0502\u0500\3\2\2\2\u0503\u0505\7\u01af")
        buf.write("\2\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505m\3")
        buf.write("\2\2\2\u0506\u0507\7&\2\2\u0507\u0508\7\u0180\2\2\u0508")
        buf.write("\u0509\5\u0128\u0095\2\u0509\u050a\7N\2\2\u050a\u050b")
        buf.write("\5\u013c\u009f\2\u050b\u050c\5\u013e\u00a0\2\u050co\3")
        buf.write("\2\2\2\u050d\u050e\7:\2\2\u050e\u0511\7\u0180\2\2\u050f")
        buf.write("\u0510\7X\2\2\u0510\u0512\7B\2\2\u0511\u050f\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\5\u0128")
        buf.write("\u0095\2\u0514q\3\2\2\2\u0515\u0518\5t;\2\u0516\u0518")
        buf.write("\5v<\2\u0517\u0515\3\2\2\2\u0517\u0516\3\2\2\2\u0518s")
        buf.write("\3\2\2\2\u0519\u051a\7v\2\2\u051a\u051b\7\u01ac\2\2\u051b")
        buf.write("\u051c\5\u0144\u00a3\2\u051c\u051d\7\u01ae\2\2\u051d\u051e")
        buf.write("\7\u0197\2\2\u051e\u051f\7\u01ad\2\2\u051fu\3\2\2\2\u0520")
        buf.write("\u0521\7u\2\2\u0521\u0522\7\u01ac\2\2\u0522\u0523\7\u0197")
        buf.write("\2\2\u0523\u0524\7\u01ae\2\2\u0524\u0525\7\u0197\2\2\u0525")
        buf.write("\u0526\7\u01ad\2\2\u0526\u0528\7\u01a7\2\2\u0527\u0529")
        buf.write("\5\u0144\u00a3\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2")
        buf.write("\2\u0529\u052a\3\2\2\2\u052a\u052c\7\u01a7\2\2\u052b\u052d")
        buf.write("\5\u0144\u00a3\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2\2")
        buf.write("\2\u052d\u052e\3\2\2\2\u052e\u052f\7\u01a7\2\2\u052f\u0530")
        buf.write("\5\u0144\u00a3\2\u0530w\3\2\2\2\u0531\u0532\7\61\2\2\u0532")
        buf.write("\u0534\7\u0194\2\2\u0533\u0535\7\t\2\2\u0534\u0533\3\2")
        buf.write("\2\2\u0534\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0538")
        buf.write("\5\u0092J\2\u0537\u0539\7\u01af\2\2\u0538\u0537\3\2\2")
        buf.write("\2\u0538\u0539\3\2\2\2\u0539\u0547\3\2\2\2\u053a\u053b")
        buf.write("\7\61\2\2\u053b\u0540\5\u0090I\2\u053c\u053d\7\u01ae\2")
        buf.write("\2\u053d\u053f\5\u0090I\2\u053e\u053c\3\2\2\2\u053f\u0542")
        buf.write("\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u0541\3\2\2\2\u0541")
        buf.write("\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0543\u0545\7\u01af")
        buf.write("\2\2\u0544\u0543\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0547")
        buf.write("\3\2\2\2\u0546\u0531\3\2\2\2\u0546\u053a\3\2\2\2\u0547")
        buf.write("y\3\2\2\2\u0548\u054a\7\31\2\2\u0549\u054b\7\u010c\2\2")
        buf.write("\u054a\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3")
        buf.write("\2\2\2\u054c\u054e\5\u0132\u009a\2\u054d\u054f\7\u01af")
        buf.write("\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0563")
        buf.write("\3\2\2\2\u0550\u0552\7\60\2\2\u0551\u0553\7\u010c\2\2")
        buf.write("\u0552\u0551\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554\3")
        buf.write("\2\2\2\u0554\u0556\5\u0132\u009a\2\u0555\u0557\7\u01af")
        buf.write("\2\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0563")
        buf.write("\3\2\2\2\u0558\u0563\5\u00a2R\2\u0559\u0563\5\u00a6T\2")
        buf.write("\u055a\u055c\7t\2\2\u055b\u055d\7\u010c\2\2\u055c\u055b")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\3\2\2\2\u055e")
        buf.write("\u0560\5\u0132\u009a\2\u055f\u0561\7\u01af\2\2\u0560\u055f")
        buf.write("\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0563\3\2\2\2\u0562")
        buf.write("\u0548\3\2\2\2\u0562\u0550\3\2\2\2\u0562\u0558\3\2\2\2")
        buf.write("\u0562\u0559\3\2\2\2\u0562\u055a\3\2\2\2\u0563{\3\2\2")
        buf.write("\2\u0564\u0567\7A\2\2\u0565\u0566\7\u0194\2\2\u0566\u0568")
        buf.write("\7\u019b\2\2\u0567\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568")
        buf.write("\u0569\3\2\2\2\u0569\u0572\5\u012a\u0096\2\u056a\u056f")
        buf.write("\5~@\2\u056b\u056c\7\u01ae\2\2\u056c\u056e\5~@\2\u056d")
        buf.write("\u056b\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0573\3\2\2\2\u0571\u056f\3")
        buf.write("\2\2\2\u0572\u056a\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0575")
        buf.write("\3\2\2\2\u0574\u0576\7\u01af\2\2\u0575\u0574\3\2\2\2\u0575")
        buf.write("\u0576\3\2\2\2\u0576\u058e\3\2\2\2\u0577\u0578\7A\2\2")
        buf.write("\u0578\u0579\7\u01ac\2\2\u0579\u057e\5\u0080A\2\u057a")
        buf.write("\u057b\7\u01b4\2\2\u057b\u057d\5\u0080A\2\u057c\u057a")
        buf.write("\3\2\2\2\u057d\u0580\3\2\2\2\u057e\u057c\3\2\2\2\u057e")
        buf.write("\u057f\3\2\2\2\u057f\u0581\3\2\2\2\u0580\u057e\3\2\2\2")
        buf.write("\u0581\u0588\7\u01ad\2\2\u0582\u0584\7\t\2\2\u0583\u0582")
        buf.write("\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\3\2\2\2\u0585")
        buf.write("\u0586\t\30\2\2\u0586\u0587\7\u019b\2\2\u0587\u0589\7")
        buf.write("\u0197\2\2\u0588\u0583\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u058b\3\2\2\2\u058a\u058c\7\u01af\2\2\u058b\u058a\3\2")
        buf.write("\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2\u058d\u0564")
        buf.write("\3\2\2\2\u058d\u0577\3\2\2\2\u058e}\3\2\2\2\u058f\u0590")
        buf.write("\7\u0194\2\2\u0590\u0592\7\u019b\2\2\u0591\u058f\3\2\2")
        buf.write("\2\u0591\u0592\3\2\2\2\u0592\u059c\3\2\2\2\u0593\u0596")
        buf.write("\5\u00aaV\2\u0594\u0596\5\u0144\u00a3\2\u0595\u0593\3")
        buf.write("\2\2\2\u0595\u0594\3\2\2\2\u0596\u0598\3\2\2\2\u0597\u0599")
        buf.write("\t\31\2\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599")
        buf.write("\u059d\3\2\2\2\u059a\u059d\7\62\2\2\u059b\u059d\7n\2\2")
        buf.write("\u059c\u0595\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059b\3")
        buf.write("\2\2\2\u059d\177\3\2\2\2\u059e\u059f\t\3\2\2\u059f\u0081")
        buf.write("\3\2\2\2\u05a0\u05a2\5\u008eH\2\u05a1\u05a3\7\u01af\2")
        buf.write("\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05d1")
        buf.write("\3\2\2\2\u05a4\u05b0\7R\2\2\u05a5\u05a7\7\5\2\2\u05a6")
        buf.write("\u05a8\7\u014d\2\2\u05a7\u05a6\3\2\2\2\u05a7\u05a8\3\2")
        buf.write("\2\2\u05a8\u05b1\3\2\2\2\u05a9\u05ae\5\u0084C\2\u05aa")
        buf.write("\u05ab\7\u01ac\2\2\u05ab\u05ac\5\u0130\u0099\2\u05ac\u05ad")
        buf.write("\7\u01ad\2\2\u05ad\u05af\3\2\2\2\u05ae\u05aa\3\2\2\2\u05ae")
        buf.write("\u05af\3\2\2\2\u05af\u05b1\3\2\2\2\u05b0\u05a5\3\2\2\2")
        buf.write("\u05b0\u05a9\3\2\2\2\u05b1\u05b4\3\2\2\2\u05b2\u05b3\7")
        buf.write("s\2\2\u05b3\u05b5\5\u0126\u0094\2\u05b4\u05b2\3\2\2\2")
        buf.write("\u05b4\u05b5\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\7")
        buf.write("\u00aa\2\2\u05b7\u05bb\5\u0144\u00a3\2\u05b8\u05b9\7\u00c0")
        buf.write("\2\2\u05b9\u05ba\7R\2\2\u05ba\u05bc\7y\2\2\u05bb\u05b8")
        buf.write("\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd")
        buf.write("\u05be\7\t\2\2\u05be\u05c0\5\u0144\u00a3\2\u05bf\u05bd")
        buf.write("\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c2\3\2\2\2\u05c1")
        buf.write("\u05c3\7\u01af\2\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2")
        buf.write("\2\2\u05c3\u05d1\3\2\2\2\u05c4\u05cb\7\u0091\2\2\u05c5")
        buf.write("\u05c6\7\u01ac\2\2\u05c6\u05c7\7\u00c0\2\2\u05c7\u05c8")
        buf.write("\7\u00e4\2\2\u05c8\u05c9\7\u019b\2\2\u05c9\u05ca\7\u0194")
        buf.write("\2\2\u05ca\u05cc\7\u01ad\2\2\u05cb\u05c5\3\2\2\2\u05cb")
        buf.write("\u05cc\3\2\2\2\u05cc\u05ce\3\2\2\2\u05cd\u05cf\7\u01af")
        buf.write("\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d1")
        buf.write("\3\2\2\2\u05d0\u05a0\3\2\2\2\u05d0\u05a4\3\2\2\2\u05d0")
        buf.write("\u05c4\3\2\2\2\u05d1\u0083\3\2\2\2\u05d2\u05ed\7A\2\2")
        buf.write("\u05d3\u05d4\7\u00bb\2\2\u05d4\u05ed\5\u0144\u00a3\2\u05d5")
        buf.write("\u05d6\7\u0174\2\2\u05d6\u05ed\5\u0144\u00a3\2\u05d7\u05d9")
        buf.write("\7\u00e3\2\2\u05d8\u05da\5\u0144\u00a3\2\u05d9\u05d8\3")
        buf.write("\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05ed\3\2\2\2\u05db\u05dc")
        buf.write("\7&\2\2\u05dc\u05ed\t\32\2\2\u05dd\u05ed\7\u0169\2\2\u05de")
        buf.write("\u05ed\7\u0116\2\2\u05df\u05ed\7\u009b\2\2\u05e0\u05ed")
        buf.write("\7\u008c\2\2\u05e1\u05ed\7\\\2\2\u05e2\u05ea\7\6\2\2\u05e3")
        buf.write("\u05e5\7\b\2\2\u05e4\u05e3\3\2\2\2\u05e4\u05e5\3\2\2\2")
        buf.write("\u05e5\u05e8\3\2\2\2\u05e6\u05e9\5\u0144\u00a3\2\u05e7")
        buf.write("\u05e9\7.\2\2\u05e8\u05e6\3\2\2\2\u05e8\u05e7\3\2\2\2")
        buf.write("\u05e9\u05eb\3\2\2\2\u05ea\u05e4\3\2\2\2\u05ea\u05eb\3")
        buf.write("\2\2\2\u05eb\u05ed\3\2\2\2\u05ec\u05d2\3\2\2\2\u05ec\u05d3")
        buf.write("\3\2\2\2\u05ec\u05d5\3\2\2\2\u05ec\u05d7\3\2\2\2\u05ec")
        buf.write("\u05db\3\2\2\2\u05ec\u05dd\3\2\2\2\u05ec\u05de\3\2\2\2")
        buf.write("\u05ec\u05df\3\2\2\2\u05ec\u05e0\3\2\2\2\u05ec\u05e1\3")
        buf.write("\2\2\2\u05ec\u05e2\3\2\2\2\u05ed\u0085\3\2\2\2\u05ee\u05ef")
        buf.write("\7\u00a0\2\2\u05ef\u05f2\7\u0194\2\2\u05f0\u05f1\7\u01a7")
        buf.write("\2\2\u05f1\u05f3\5\u0144\u00a3\2\u05f2\u05f0\3\2\2\2\u05f2")
        buf.write("\u05f3\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5\7\u019b")
        buf.write("\2\2\u05f5\u05f7\5\u00acW\2\u05f6\u05f8\7\u01af\2\2\u05f7")
        buf.write("\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u0616\3\2\2\2")
        buf.write("\u05f9\u05fa\7\u00a0\2\2\u05fa\u05fb\7\u0194\2\2\u05fb")
        buf.write("\u05fc\5\u014a\u00a6\2\u05fc\u05fe\5\u00acW\2\u05fd\u05ff")
        buf.write("\7\u01af\2\2\u05fe\u05fd\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff")
        buf.write("\u0616\3\2\2\2\u0600\u0601\7\u00a0\2\2\u0601\u0602\7\u0194")
        buf.write("\2\2\u0602\u0603\7\u019b\2\2\u0603\u0604\7-\2\2\u0604")
        buf.write("\u060f\5\u00a4S\2\u0605\u060d\7I\2\2\u0606\u0607\7\u0089")
        buf.write("\2\2\u0607\u060e\7\u0141\2\2\u0608\u060b\7\u00b5\2\2\u0609")
        buf.write("\u060a\7p\2\2\u060a\u060c\5\u0130\u0099\2\u060b\u0609")
        buf.write("\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e\3\2\2\2\u060d")
        buf.write("\u0606\3\2\2\2\u060d\u0608\3\2\2\2\u060e\u0610\3\2\2\2")
        buf.write("\u060f\u0605\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0612\3")
        buf.write("\2\2\2\u0611\u0613\7\u01af\2\2\u0612\u0611\3\2\2\2\u0612")
        buf.write("\u0613\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0616\5\u00a8")
        buf.write("U\2\u0615\u05ee\3\2\2\2\u0615\u05f9\3\2\2\2\u0615\u0600")
        buf.write("\3\2\2\2\u0615\u0614\3\2\2\2\u0616\u0087\3\2\2\2\u0617")
        buf.write("\u0618\7\r\2\2\u0618\u0619\78\2\2\u0619\u061c\t\33\2\2")
        buf.write("\u061a\u061d\5\u0144\u00a3\2\u061b\u061d\7\u0194\2\2\u061c")
        buf.write("\u061a\3\2\2\2\u061c\u061b\3\2\2\2\u061c\u061d\3\2\2\2")
        buf.write("\u061d\u061f\3\2\2\2\u061e\u0620\7\u01af\2\2\u061f\u061e")
        buf.write("\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0665\3\2\2\2\u0621")
        buf.write("\u0622\7\r\2\2\u0622\u062c\t\33\2\2\u0623\u0626\5\u0144")
        buf.write("\u00a3\2\u0624\u0626\7\u0194\2\2\u0625\u0623\3\2\2\2\u0625")
        buf.write("\u0624\3\2\2\2\u0626\u062a\3\2\2\2\u0627\u0628\7\u00c0")
        buf.write("\2\2\u0628\u0629\7\u0125\2\2\u0629\u062b\7\u0197\2\2\u062a")
        buf.write("\u0627\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d\3\2\2\2")
        buf.write("\u062c\u0625\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062f\3")
        buf.write("\2\2\2\u062e\u0630\7\u01af\2\2\u062f\u062e\3\2\2\2\u062f")
        buf.write("\u0630\3\2\2\2\u0630\u0665\3\2\2\2\u0631\u0632\7\36\2")
        buf.write("\2\u0632\u063f\t\33\2\2\u0633\u0636\5\u0144\u00a3\2\u0634")
        buf.write("\u0636\7\u0194\2\2\u0635\u0633\3\2\2\2\u0635\u0634\3\2")
        buf.write("\2\2\u0636\u063d\3\2\2\2\u0637\u0638\7\u00c0\2\2\u0638")
        buf.write("\u0639\7\u01ac\2\2\u0639\u063a\7\u00f3\2\2\u063a\u063b")
        buf.write("\7\u019b\2\2\u063b\u063c\t\r\2\2\u063c\u063e\7\u01ad\2")
        buf.write("\2\u063d\u0637\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u0640")
        buf.write("\3\2\2\2\u063f\u0635\3\2\2\2\u063f\u0640\3\2\2\2\u0640")
        buf.write("\u0642\3\2\2\2\u0641\u0643\7\u01af\2\2\u0642\u0641\3\2")
        buf.write("\2\2\u0642\u0643\3\2\2\2\u0643\u0665\3\2\2\2\u0644\u0646")
        buf.write("\7\36\2\2\u0645\u0647\7\u018b\2\2\u0646\u0645\3\2\2\2")
        buf.write("\u0646\u0647\3\2\2\2\u0647\u0649\3\2\2\2\u0648\u064a\7")
        buf.write("\u01af\2\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a")
        buf.write("\u0665\3\2\2\2\u064b\u064c\7\u0094\2\2\u064c\u064f\t\33")
        buf.write("\2\2\u064d\u0650\5\u0144\u00a3\2\u064e\u0650\7\u0194\2")
        buf.write("\2\u064f\u064d\3\2\2\2\u064f\u064e\3\2\2\2\u064f\u0650")
        buf.write("\3\2\2\2\u0650\u0652\3\2\2\2\u0651\u0653\7\u01af\2\2\u0652")
        buf.write("\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0665\3\2\2\2")
        buf.write("\u0654\u0656\7\u0094\2\2\u0655\u0657\7\u018b\2\2\u0656")
        buf.write("\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0659\3\2\2\2")
        buf.write("\u0658\u065a\7\u01af\2\2\u0659\u0658\3\2\2\2\u0659\u065a")
        buf.write("\3\2\2\2\u065a\u0665\3\2\2\2\u065b\u065c\7\u0098\2\2\u065c")
        buf.write("\u065f\t\33\2\2\u065d\u0660\5\u0144\u00a3\2\u065e\u0660")
        buf.write("\7\u0194\2\2\u065f\u065d\3\2\2\2\u065f\u065e\3\2\2\2\u065f")
        buf.write("\u0660\3\2\2\2\u0660\u0662\3\2\2\2\u0661\u0663\7\u01af")
        buf.write("\2\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0665")
        buf.write("\3\2\2\2\u0664\u0617\3\2\2\2\u0664\u0621\3\2\2\2\u0664")
        buf.write("\u0631\3\2\2\2\u0664\u0644\3\2\2\2\u0664\u064b\3\2\2\2")
        buf.write("\u0664\u0654\3\2\2\2\u0664\u065b\3\2\2\2\u0665\u0089\3")
        buf.write("\2\2\2\u0666\u0668\7\u010d\2\2\u0667\u0669\7\u0195\2\2")
        buf.write("\u0668\u0667\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u008b\3")
        buf.write("\2\2\2\u066a\u066b\7\u00b7\2\2\u066b\u066d\5\u0144\u00a3")
        buf.write("\2\u066c\u066e\7\u01af\2\2\u066d\u066c\3\2\2\2\u066d\u066e")
        buf.write("\3\2\2\2\u066e\u008d\3\2\2\2\u066f\u0670\7A\2\2\u0670")
        buf.write("\u0671\7\t\2\2\u0671\u0672\t\34\2\2\u0672\u008f\3\2\2")
        buf.write("\2\u0673\u0675\7\u0194\2\2\u0674\u0676\7\t\2\2\u0675\u0674")
        buf.write("\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0677\3\2\2\2\u0677")
        buf.write("\u067a\5\u013c\u009f\2\u0678\u0679\7\u019b\2\2\u0679\u067b")
        buf.write("\5\u00acW\2\u067a\u0678\3\2\2\2\u067a\u067b\3\2\2\2\u067b")
        buf.write("\u0091\3\2\2\2\u067c\u067d\7\u00a6\2\2\u067d\u067e\7\u01ac")
        buf.write("\2\2\u067e\u067f\5\u0094K\2\u067f\u0680\7\u01ad\2\2\u0680")
        buf.write("\u0093\3\2\2\2\u0681\u0688\5\u0096L\2\u0682\u0684\7\u01ae")
        buf.write("\2\2\u0683\u0682\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u0685")
        buf.write("\3\2\2\2\u0685\u0687\5\u0096L\2\u0686\u0683\3\2\2\2\u0687")
        buf.write("\u068a\3\2\2\2\u0688\u0686\3\2\2\2\u0688\u0689\3\2\2\2")
        buf.write("\u0689\u0095\3\2\2\2\u068a\u0688\3\2\2\2\u068b\u068e\5")
        buf.write("\u0098M\2\u068c\u068e\5\u009cO\2\u068d\u068b\3\2\2\2\u068d")
        buf.write("\u068c\3\2\2\2\u068e\u0097\3\2\2\2\u068f\u0693\5\u0144")
        buf.write("\u00a3\2\u0690\u0694\5\u013c\u009f\2\u0691\u0692\7\t\2")
        buf.write("\2\u0692\u0694\5\u00acW\2\u0693\u0690\3\2\2\2\u0693\u0691")
        buf.write("\3\2\2\2\u0694\u0697\3\2\2\2\u0695\u0696\7\34\2\2\u0696")
        buf.write("\u0698\5\u0144\u00a3\2\u0697\u0695\3\2\2\2\u0697\u0698")
        buf.write("\3\2\2\2\u0698\u069a\3\2\2\2\u0699\u069b\5\u0138\u009d")
        buf.write("\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u06b3")
        buf.write("\3\2\2\2\u069c\u069d\7 \2\2\u069d\u069f\5\u0144\u00a3")
        buf.write("\2\u069e\u069c\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a0")
        buf.write("\3\2\2\2\u06a0\u06a1\7\62\2\2\u06a1\u06a4\5\u00aeX\2\u06a2")
        buf.write("\u06a3\7\u00c0\2\2\u06a3\u06a5\7\u00b9\2\2\u06a4\u06a2")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06b4\3\2\2\2\u06a6")
        buf.write("\u06ac\7U\2\2\u06a7\u06a8\7\u01ac\2\2\u06a8\u06a9\7\u0195")
        buf.write("\2\2\u06a9\u06aa\7\u01ae\2\2\u06aa\u06ab\7\u0195\2\2\u06ab")
        buf.write("\u06ad\7\u01ad\2\2\u06ac\u06a7\3\2\2\2\u06ac\u06ad\3\2")
        buf.write("\2\2\u06ad\u06b1\3\2\2\2\u06ae\u06af\7m\2\2\u06af\u06b0")
        buf.write("\7I\2\2\u06b0\u06b2\7\u008d\2\2\u06b1\u06ae\3\2\2\2\u06b1")
        buf.write("\u06b2\3\2\2\2\u06b2\u06b4\3\2\2\2\u06b3\u069e\3\2\2\2")
        buf.write("\u06b3\u06a6\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b6\3")
        buf.write("\2\2\2\u06b5\u06b7\7\u0096\2\2\u06b6\u06b5\3\2\2\2\u06b6")
        buf.write("\u06b7\3\2\2\2\u06b7\u06bb\3\2\2\2\u06b8\u06ba\5\u009a")
        buf.write("N\2\u06b9\u06b8\3\2\2\2\u06ba\u06bd\3\2\2\2\u06bb\u06b9")
        buf.write("\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u0099\3\2\2\2\u06bd")
        buf.write("\u06bb\3\2\2\2\u06be\u06bf\7 \2\2\u06bf\u06c1\5\u0144")
        buf.write("\u00a3\2\u06c0\u06be\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1")
        buf.write("\u06c3\3\2\2\2\u06c2\u06c4\5\u0138\u009d\2\u06c3\u06c2")
        buf.write("\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06da\3\2\2\2\u06c5")
        buf.write("\u06c6\7\u0083\2\2\u06c6\u06c9\7a\2\2\u06c7\u06c9\7\u00b3")
        buf.write("\2\2\u06c8\u06c5\3\2\2\2\u06c8\u06c7\3\2\2\2\u06c9\u06cb")
        buf.write("\3\2\2\2\u06ca\u06cc\5\u0136\u009c\2\u06cb\u06ca\3\2\2")
        buf.write("\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\3\2\2\2\u06cd\u06cf")
        buf.write("\5\u009eP\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf")
        buf.write("\u06db\3\2\2\2\u06d0\u06d4\7\27\2\2\u06d1\u06d2\7m\2\2")
        buf.write("\u06d2\u06d3\7I\2\2\u06d3\u06d5\7\u008d\2\2\u06d4\u06d1")
        buf.write("\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6")
        buf.write("\u06d7\7\u01ac\2\2\u06d7\u06d8\5\u00ba^\2\u06d8\u06d9")
        buf.write("\7\u01ad\2\2\u06d9\u06db\3\2\2\2\u06da\u06c8\3\2\2\2\u06da")
        buf.write("\u06d0\3\2\2\2\u06db\u009b\3\2\2\2\u06dc\u06dd\7 \2\2")
        buf.write("\u06dd\u06df\5\u0144\u00a3\2\u06de\u06dc\3\2\2\2\u06de")
        buf.write("\u06df\3\2\2\2\u06df\u06ff\3\2\2\2\u06e0\u06e1\7\u0083")
        buf.write("\2\2\u06e1\u06e4\7a\2\2\u06e2\u06e4\7\u00b3\2\2\u06e3")
        buf.write("\u06e0\3\2\2\2\u06e3\u06e2\3\2\2\2\u06e4\u06e6\3\2\2\2")
        buf.write("\u06e5\u06e7\5\u0136\u009c\2\u06e6\u06e5\3\2\2\2\u06e6")
        buf.write("\u06e7\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06e9\7\u01ac")
        buf.write("\2\2\u06e9\u06eb\5\u0130\u0099\2\u06ea\u06ec\t\7\2\2\u06eb")
        buf.write("\u06ea\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\3\2\2\2")
        buf.write("\u06ed\u06ef\7\u01ad\2\2\u06ee\u06f0\5\u009eP\2\u06ef")
        buf.write("\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f3\3\2\2\2")
        buf.write("\u06f1\u06f2\7s\2\2\u06f2\u06f4\5\u0144\u00a3\2\u06f3")
        buf.write("\u06f1\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u0700\3\2\2\2")
        buf.write("\u06f5\u06f9\7\27\2\2\u06f6\u06f7\7m\2\2\u06f7\u06f8\7")
        buf.write("I\2\2\u06f8\u06fa\7\u008d\2\2\u06f9\u06f6\3\2\2\2\u06f9")
        buf.write("\u06fa\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\7\u01ac")
        buf.write("\2\2\u06fc\u06fd\5\u00ba^\2\u06fd\u06fe\7\u01ad\2\2\u06fe")
        buf.write("\u0700\3\2\2\2\u06ff\u06e3\3\2\2\2\u06ff\u06f5\3\2\2\2")
        buf.write("\u0700\u009d\3\2\2\2\u0701\u0702\7\u00c0\2\2\u0702\u0703")
        buf.write("\7\u01ac\2\2\u0703\u0708\5\u00a0Q\2\u0704\u0705\7\u01ae")
        buf.write("\2\2\u0705\u0707\5\u00a0Q\2\u0706\u0704\3\2\2\2\u0707")
        buf.write("\u070a\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2")
        buf.write("\u0709\u070b\3\2\2\2\u070a\u0708\3\2\2\2\u070b\u070c\7")
        buf.write("\u01ad\2\2\u070c\u009f\3\2\2\2\u070d\u070e\5\u0146\u00a4")
        buf.write("\2\u070e\u0712\7\u019b\2\2\u070f\u0713\5\u0146\u00a4\2")
        buf.write("\u0710\u0713\5\u0134\u009b\2\u0711\u0713\7\u0195\2\2\u0712")
        buf.write("\u070f\3\2\2\2\u0712\u0710\3\2\2\2\u0712\u0711\3\2\2\2")
        buf.write("\u0713\u00a1\3\2\2\2\u0714\u0715\7\61\2\2\u0715\u0735")
        buf.write("\5\u0132\u009a\2\u0716\u0720\7-\2\2\u0717\u071e\5\u00a4")
        buf.write("S\2\u0718\u0719\7I\2\2\u0719\u071c\7\u00b5\2\2\u071a\u071b")
        buf.write("\7p\2\2\u071b\u071d\5\u0130\u0099\2\u071c\u071a\3\2\2")
        buf.write("\2\u071c\u071d\3\2\2\2\u071d\u071f\3\2\2\2\u071e\u0718")
        buf.write("\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0721\3\2\2\2\u0720")
        buf.write("\u0717\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0736\3\2\2\2")
        buf.write("\u0722\u0724\7\u0118\2\2\u0723\u0722\3\2\2\2\u0723\u0724")
        buf.write("\3\2\2\2\u0724\u0726\3\2\2\2\u0725\u0727\7\u0164\2\2\u0726")
        buf.write("\u0725\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0728\3\2\2\2")
        buf.write("\u0728\u0729\7-\2\2\u0729\u072a\7I\2\2\u072a\u0733\5\32")
        buf.write("\16\2\u072b\u0731\7I\2\2\u072c\u072d\7\u0089\2\2\u072d")
        buf.write("\u0732\7\u0141\2\2\u072e\u0732\7\u00b5\2\2\u072f\u0730")
        buf.write("\7p\2\2\u0730\u0732\5\u0130\u0099\2\u0731\u072c\3\2\2")
        buf.write("\2\u0731\u072e\3\2\2\2\u0731\u072f\3\2\2\2\u0732\u0734")
        buf.write("\3\2\2\2\u0733\u072b\3\2\2\2\u0733\u0734\3\2\2\2\u0734")
        buf.write("\u0736\3\2\2\2\u0735\u0716\3\2\2\2\u0735\u0723\3\2\2\2")
        buf.write("\u0736\u0738\3\2\2\2\u0737\u0739\7\u01af\2\2\u0738\u0737")
        buf.write("\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u00a3\3\2\2\2\u073a")
        buf.write("\u073c\t\17\2\2\u073b\u073a\3\2\2\2\u073b\u073c\3\2\2")
        buf.write("\2\u073c\u073e\3\2\2\2\u073d\u073f\t\35\2\2\u073e\u073d")
        buf.write("\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0741\3\2\2\2\u0740")
        buf.write("\u0742\t\36\2\2\u0741\u0740\3\2\2\2\u0741\u0742\3\2\2")
        buf.write("\2\u0742\u0744\3\2\2\2\u0743\u0745\t\37\2\2\u0744\u0743")
        buf.write("\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0747\3\2\2\2\u0746")
        buf.write("\u0748\7\u0181\2\2\u0747\u0746\3\2\2\2\u0747\u0748\3\2")
        buf.write("\2\2\u0748\u0749\3\2\2\2\u0749\u074a\7I\2\2\u074a\u074b")
        buf.write("\5\32\16\2\u074b\u00a5\3\2\2\2\u074c\u0756\7E\2\2\u074d")
        buf.write("\u0754\7\u0135\2\2\u074e\u0754\7\u014c\2\2\u074f\u0754")
        buf.write("\7\u0105\2\2\u0750\u0754\7\u011f\2\2\u0751\u0752\t \2")
        buf.write("\2\u0752\u0754\5\u00acW\2\u0753\u074d\3\2\2\2\u0753\u074e")
        buf.write("\3\2\2\2\u0753\u074f\3\2\2\2\u0753\u0750\3\2\2\2\u0753")
        buf.write("\u0751\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0755\3\2\2\2")
        buf.write("\u0755\u0757\7N\2\2\u0756\u0753\3\2\2\2\u0756\u0757\3")
        buf.write("\2\2\2\u0757\u0759\3\2\2\2\u0758\u075a\7\u010c\2\2\u0759")
        buf.write("\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b\3\2\2\2")
        buf.write("\u075b\u0765\5\u0132\u009a\2\u075c\u075d\7^\2\2\u075d")
        buf.write("\u0762\7\u0194\2\2\u075e\u075f\7\u01ae\2\2\u075f\u0761")
        buf.write("\7\u0194\2\2\u0760\u075e\3\2\2\2\u0761\u0764\3\2\2\2\u0762")
        buf.write("\u0760\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0766\3\2\2\2")
        buf.write("\u0764\u0762\3\2\2\2\u0765\u075c\3\2\2\2\u0765\u0766\3")
        buf.write("\2\2\2\u0766\u0768\3\2\2\2\u0767\u0769\7\u01af\2\2\u0768")
        buf.write("\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u00a7\3\2\2\2")
        buf.write("\u076a\u076b\7\u00a0\2\2\u076b\u076f\5\u0144\u00a3\2\u076c")
        buf.write("\u0770\5\u0144\u00a3\2\u076d\u0770\5\u00aaV\2\u076e\u0770")
        buf.write("\5\u0134\u009b\2\u076f\u076c\3\2\2\2\u076f\u076d\3\2\2")
        buf.write("\2\u076f\u076e\3\2\2\2\u0770\u0772\3\2\2\2\u0771\u0773")
        buf.write("\7\u01af\2\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2\2\2\u0773")
        buf.write("\u0796\3\2\2\2\u0774\u0775\7\u00a0\2\2\u0775\u0776\7\u00ad")
        buf.write("\2\2\u0776\u0777\7\u011a\2\2\u0777\u0780\7\u0120\2\2\u0778")
        buf.write("\u0779\7\u0089\2\2\u0779\u0781\7\u0183\2\2\u077a\u077b")
        buf.write("\7\u0089\2\2\u077b\u0781\7\u00df\2\2\u077c\u077d\7\u015a")
        buf.write("\2\2\u077d\u0781\7\u0089\2\2\u077e\u0781\7\u016d\2\2\u077f")
        buf.write("\u0781\7\u0168\2\2\u0780\u0778\3\2\2\2\u0780\u077a\3\2")
        buf.write("\2\2\u0780\u077c\3\2\2\2\u0780\u077e\3\2\2\2\u0780\u077f")
        buf.write("\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0784\7\u01af\2\2\u0783")
        buf.write("\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0796\3\2\2\2")
        buf.write("\u0785\u0786\7\u00a0\2\2\u0786\u0787\7W\2\2\u0787\u0788")
        buf.write("\5\u0126\u0094\2\u0788\u078a\5\u0134\u009b\2\u0789\u078b")
        buf.write("\7\u01af\2\2\u078a\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b")
        buf.write("\u0796\3\2\2\2\u078c\u078d\7\u00a0\2\2\u078d\u078e\7\u00c7")
        buf.write("\2\2\u078e\u0796\5\u0134\u009b\2\u078f\u0790\7\u00a0\2")
        buf.write("\2\u0790\u0791\7\u014e\2\2\u0791\u0796\5\u0134\u009b\2")
        buf.write("\u0792\u0793\7\u00a0\2\2\u0793\u0794\7\u00c9\2\2\u0794")
        buf.write("\u0796\5\u0134\u009b\2\u0795\u076a\3\2\2\2\u0795\u0774")
        buf.write("\3\2\2\2\u0795\u0785\3\2\2\2\u0795\u078c\3\2\2\2\u0795")
        buf.write("\u078f\3\2\2\2\u0795\u0792\3\2\2\2\u0796\u00a9\3\2\2\2")
        buf.write("\u0797\u079a\5\u0140\u00a1\2\u0798\u079a\7\u0194\2\2\u0799")
        buf.write("\u0797\3\2\2\2\u0799\u0798\3\2\2\2\u079a\u00ab\3\2\2\2")
        buf.write("\u079b\u079c\bW\1\2\u079c\u07c9\7\62\2\2\u079d\u07c9\7")
        buf.write("n\2\2\u079e\u07c9\7\u0194\2\2\u079f\u07c9\5\u0140\u00a1")
        buf.write("\2\u07a0\u07c9\5\u00f0y\2\u07a1\u07a2\7\24\2\2\u07a2\u07a4")
        buf.write("\5\u00acW\2\u07a3\u07a5\5\u00f2z\2\u07a4\u07a3\3\2\2\2")
        buf.write("\u07a5\u07a6\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a7\3")
        buf.write("\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a9\7<\2\2\u07a9\u07ab")
        buf.write("\5\u00acW\2\u07aa\u07a8\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab")
        buf.write("\u07ac\3\2\2\2\u07ac\u07ad\7=\2\2\u07ad\u07c9\3\2\2\2")
        buf.write("\u07ae\u07b0\7\24\2\2\u07af\u07b1\5\u00f4{\2\u07b0\u07af")
        buf.write("\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b0\3\2\2\2\u07b2")
        buf.write("\u07b3\3\2\2\2\u07b3\u07b6\3\2\2\2\u07b4\u07b5\7<\2\2")
        buf.write("\u07b5\u07b7\5\u00acW\2\u07b6\u07b4\3\2\2\2\u07b6\u07b7")
        buf.write("\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b9\7=\2\2\u07b9")
        buf.write("\u07c9\3\2\2\2\u07ba\u07c9\5\u012e\u0098\2\u07bb\u07bc")
        buf.write("\7\u01ac\2\2\u07bc\u07bd\5\u00acW\2\u07bd\u07be\7\u01ad")
        buf.write("\2\2\u07be\u07c9\3\2\2\2\u07bf\u07c0\7\u01ac\2\2\u07c0")
        buf.write("\u07c1\5\u00b0Y\2\u07c1\u07c2\7\u01ad\2\2\u07c2\u07c9")
        buf.write("\3\2\2\2\u07c3\u07c4\7\u01b6\2\2\u07c4\u07c9\5\u00acW")
        buf.write("\b\u07c5\u07c6\t!\2\2\u07c6\u07c9\5\u00acW\6\u07c7\u07c9")
        buf.write("\5\u010e\u0088\2\u07c8\u079b\3\2\2\2\u07c8\u079d\3\2\2")
        buf.write("\2\u07c8\u079e\3\2\2\2\u07c8\u079f\3\2\2\2\u07c8\u07a0")
        buf.write("\3\2\2\2\u07c8\u07a1\3\2\2\2\u07c8\u07ae\3\2\2\2\u07c8")
        buf.write("\u07ba\3\2\2\2\u07c8\u07bb\3\2\2\2\u07c8\u07bf\3\2\2\2")
        buf.write("\u07c8\u07c3\3\2\2\2\u07c8\u07c5\3\2\2\2\u07c8\u07c7\3")
        buf.write("\2\2\2\u07c9\u07d9\3\2\2\2\u07ca\u07cb\f\7\2\2\u07cb\u07cc")
        buf.write("\t\"\2\2\u07cc\u07d8\5\u00acW\b\u07cd\u07ce\f\5\2\2\u07ce")
        buf.write("\u07cf\t#\2\2\u07cf\u07d8\5\u00acW\6\u07d0\u07d1\f\4\2")
        buf.write("\2\u07d1\u07d2\5\u0148\u00a5\2\u07d2\u07d3\5\u00acW\5")
        buf.write("\u07d3\u07d8\3\2\2\2\u07d4\u07d5\f\16\2\2\u07d5\u07d6")
        buf.write("\7\34\2\2\u07d6\u07d8\5\u0144\u00a3\2\u07d7\u07ca\3\2")
        buf.write("\2\2\u07d7\u07cd\3\2\2\2\u07d7\u07d0\3\2\2\2\u07d7\u07d4")
        buf.write("\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9")
        buf.write("\u07da\3\2\2\2\u07da\u00ad\3\2\2\2\u07db\u07d9\3\2\2\2")
        buf.write("\u07dc\u07e5\7n\2\2\u07dd\u07e5\5\u0140\u00a1\2\u07de")
        buf.write("\u07e5\5\u00f0y\2\u07df\u07e5\7\u0194\2\2\u07e0\u07e1")
        buf.write("\7\u01ac\2\2\u07e1\u07e2\5\u00aeX\2\u07e2\u07e3\7\u01ad")
        buf.write("\2\2\u07e3\u07e5\3\2\2\2\u07e4\u07dc\3\2\2\2\u07e4\u07dd")
        buf.write("\3\2\2\2\u07e4\u07de\3\2\2\2\u07e4\u07df\3\2\2\2\u07e4")
        buf.write("\u07e0\3\2\2\2\u07e5\u00af\3\2\2\2\u07e6\u07e7\5\32\16")
        buf.write("\2\u07e7\u00b1\3\2\2\2\u07e8\u07eb\7\u00c0\2\2\u07e9\u07ea")
        buf.write("\7\u018d\2\2\u07ea\u07ec\7\u01ae\2\2\u07eb\u07e9\3\2\2")
        buf.write("\2\u07eb\u07ec\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07f2")
        buf.write("\5\u00b4[\2\u07ee\u07ef\7\u01ae\2\2\u07ef\u07f1\5\u00b4")
        buf.write("[\2\u07f0\u07ee\3\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f0")
        buf.write("\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u00b3\3\2\2\2\u07f4")
        buf.write("\u07f2\3\2\2\2\u07f5\u07fa\5\u0144\u00a3\2\u07f6\u07f7")
        buf.write("\7\u01ac\2\2\u07f7\u07f8\5\u0130\u0099\2\u07f8\u07f9\7")
        buf.write("\u01ad\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07f6\3\2\2\2\u07fa")
        buf.write("\u07fb\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\7\t\2\2")
        buf.write("\u07fd\u07fe\7\u01ac\2\2\u07fe\u07ff\5\32\16\2\u07ff\u0800")
        buf.write("\7\u01ad\2\2\u0800\u00b5\3\2\2\2\u0801\u0804\5\u012e\u0098")
        buf.write("\2\u0802\u0804\7\u0194\2\2\u0803\u0801\3\2\2\2\u0803\u0802")
        buf.write("\3\2\2\2\u0804\u0807\3\2\2\2\u0805\u0808\7\u019b\2\2\u0806")
        buf.write("\u0808\5\u014a\u00a6\2\u0807\u0805\3\2\2\2\u0807\u0806")
        buf.write("\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u0812\5\u00acW\2\u080a")
        buf.write("\u080b\5\u0144\u00a3\2\u080b\u080c\7\u01a7\2\2\u080c\u080d")
        buf.write("\5\u0144\u00a3\2\u080d\u080e\7\u01ac\2\2\u080e\u080f\5")
        buf.write("\u0106\u0084\2\u080f\u0810\7\u01ad\2\2\u0810\u0812\3\2")
        buf.write("\2\2\u0811\u0803\3\2\2\2\u0811\u080a\3\2\2\2\u0812\u00b7")
        buf.write("\3\2\2\2\u0813\u0818\5\u00ba^\2\u0814\u0815\7\u01ae\2")
        buf.write("\2\u0815\u0817\5\u00ba^\2\u0816\u0814\3\2\2\2\u0817\u081a")
        buf.write("\3\2\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2\2\2\u0819")
        buf.write("\u00b9\3\2\2\2\u081a\u0818\3\2\2\2\u081b\u081c\b^\1\2")
        buf.write("\u081c\u081d\5\u00bc_\2\u081d\u0826\3\2\2\2\u081e\u081f")
        buf.write("\f\5\2\2\u081f\u0820\7\7\2\2\u0820\u0825\5\u00ba^\6\u0821")
        buf.write("\u0822\f\4\2\2\u0822\u0823\7z\2\2\u0823\u0825\5\u00ba")
        buf.write("^\5\u0824\u081e\3\2\2\2\u0824\u0821\3\2\2\2\u0825\u0828")
        buf.write("\3\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827")
        buf.write("\u00bb\3\2\2\2\u0828\u0826\3\2\2\2\u0829\u082a\7m\2\2")
        buf.write("\u082a\u0864\5\u00bc_\2\u082b\u082c\7B\2\2\u082c\u082d")
        buf.write("\7\u01ac\2\2\u082d\u082e\5\u00b0Y\2\u082e\u082f\7\u01ad")
        buf.write("\2\2\u082f\u0864\3\2\2\2\u0830\u0831\5\u00acW\2\u0831")
        buf.write("\u0832\5\u0148\u00a5\2\u0832\u0833\5\u00acW\2\u0833\u0864")
        buf.write("\3\2\2\2\u0834\u0835\5\u00acW\2\u0835\u0836\5\u0148\u00a5")
        buf.write("\2\u0836\u0837\t$\2\2\u0837\u0838\7\u01ac\2\2\u0838\u0839")
        buf.write("\5\u00b0Y\2\u0839\u083a\7\u01ad\2\2\u083a\u0864\3\2\2")
        buf.write("\2\u083b\u083d\5\u00acW\2\u083c\u083e\7m\2\2\u083d\u083c")
        buf.write("\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f")
        buf.write("\u0840\7\16\2\2\u0840\u0841\5\u00acW\2\u0841\u0842\7\7")
        buf.write("\2\2\u0842\u0843\5\u00acW\2\u0843\u0864\3\2\2\2\u0844")
        buf.write("\u0846\5\u00acW\2\u0845\u0847\7m\2\2\u0846\u0845\3\2\2")
        buf.write("\2\u0846\u0847\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u0849")
        buf.write("\7Y\2\2\u0849\u084c\7\u01ac\2\2\u084a\u084d\5\u00b0Y\2")
        buf.write("\u084b\u084d\5\u0106\u0084\2\u084c\u084a\3\2\2\2\u084c")
        buf.write("\u084b\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f\7\u01ad")
        buf.write("\2\2\u084f\u0864\3\2\2\2\u0850\u0852\5\u00acW\2\u0851")
        buf.write("\u0853\7m\2\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2")
        buf.write("\u0853\u0854\3\2\2\2\u0854\u0855\7d\2\2\u0855\u0858\5")
        buf.write("\u00acW\2\u0856\u0857\7?\2\2\u0857\u0859\5\u00acW\2\u0858")
        buf.write("\u0856\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u0864\3\2\2\2")
        buf.write("\u085a\u085b\5\u00acW\2\u085b\u085c\7_\2\2\u085c\u085d")
        buf.write("\5\u0138\u009d\2\u085d\u0864\3\2\2\2\u085e\u085f\7\u01ac")
        buf.write("\2\2\u085f\u0860\5\u00ba^\2\u0860\u0861\7\u01ad\2\2\u0861")
        buf.write("\u0864\3\2\2\2\u0862\u0864\7\u0195\2\2\u0863\u0829\3\2")
        buf.write("\2\2\u0863\u082b\3\2\2\2\u0863\u0830\3\2\2\2\u0863\u0834")
        buf.write("\3\2\2\2\u0863\u083b\3\2\2\2\u0863\u0844\3\2\2\2\u0863")
        buf.write("\u0850\3\2\2\2\u0863\u085a\3\2\2\2\u0863\u085e\3\2\2\2")
        buf.write("\u0863\u0862\3\2\2\2\u0864\u00bd\3\2\2\2\u0865\u0866\b")
        buf.write("`\1\2\u0866\u0867\7\u01ac\2\2\u0867\u0868\5\u00be`\2\u0868")
        buf.write("\u0869\7\u01ad\2\2\u0869\u086c\3\2\2\2\u086a\u086c\5\u00c2")
        buf.write("b\2\u086b\u0865\3\2\2\2\u086b\u086a\3\2\2\2\u086c\u0873")
        buf.write("\3\2\2\2\u086d\u086e\f\4\2\2\u086e\u086f\5\u00c0a\2\u086f")
        buf.write("\u0870\5\u00be`\5\u0870\u0872\3\2\2\2\u0871\u086d\3\2")
        buf.write("\2\2\u0872\u0875\3\2\2\2\u0873\u0871\3\2\2\2\u0873\u0874")
        buf.write("\3\2\2\2\u0874\u00bf\3\2\2\2\u0875\u0873\3\2\2\2\u0876")
        buf.write("\u0878\7\u00b2\2\2\u0877\u0879\7\5\2\2\u0878\u0877\3\2")
        buf.write("\2\2\u0878\u0879\3\2\2\2\u0879\u087d\3\2\2\2\u087a\u087d")
        buf.write("\7@\2\2\u087b\u087d\7]\2\2\u087c\u0876\3\2\2\2\u087c\u087a")
        buf.write("\3\2\2\2\u087c\u087b\3\2\2\2\u087d\u00c1\3\2\2\2\u087e")
        buf.write("\u0880\7\u009b\2\2\u087f\u0881\t%\2\2\u0880\u087f\3\2")
        buf.write("\2\2\u0880\u0881\3\2\2\2\u0881\u0883\3\2\2\2\u0882\u0884")
        buf.write("\5\u00c4c\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884")
        buf.write("\u0885\3\2\2\2\u0885\u0888\5\u00d8m\2\u0886\u0887\7^\2")
        buf.write("\2\u0887\u0889\5\u0126\u0094\2\u0888\u0886\3\2\2\2\u0888")
        buf.write("\u0889\3\2\2\2\u0889\u088c\3\2\2\2\u088a\u088b\7N\2\2")
        buf.write("\u088b\u088d\5\u00dco\2\u088c\u088a\3\2\2\2\u088c\u088d")
        buf.write("\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088f\7\u00be\2\2\u088f")
        buf.write("\u0891\5\u00ba^\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2")
        buf.write("\2\2\u0891\u089c\3\2\2\2\u0892\u0893\7S\2\2\u0893\u0894")
        buf.write("\7\22\2\2\u0894\u0899\5\u00d0i\2\u0895\u0896\7\u01ae\2")
        buf.write("\2\u0896\u0898\5\u00d0i\2\u0897\u0895\3\2\2\2\u0898\u089b")
        buf.write("\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2\u089a")
        buf.write("\u089d\3\2\2\2\u089b\u0899\3\2\2\2\u089c\u0892\3\2\2\2")
        buf.write("\u089c\u089d\3\2\2\2\u089d\u08a0\3\2\2\2\u089e\u089f\7")
        buf.write("T\2\2\u089f\u08a1\5\u00ba^\2\u08a0\u089e\3\2\2\2\u08a0")
        buf.write("\u08a1\3\2\2\2\u08a1\u00c3\3\2\2\2\u08a2\u08a3\7\u00ab")
        buf.write("\2\2\u08a3\u08a5\5\u00acW\2\u08a4\u08a6\7\177\2\2\u08a5")
        buf.write("\u08a4\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08a9\3\2\2\2")
        buf.write("\u08a7\u08a8\7\u00c0\2\2\u08a8\u08aa\7\u0179\2\2\u08a9")
        buf.write("\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u00c5\3\2\2\2")
        buf.write("\u08ab\u08ac\7{\2\2\u08ac\u08ad\7\22\2\2\u08ad\u08b2\5")
        buf.write("\u00ceh\2\u08ae\u08af\7\u01ae\2\2\u08af\u08b1\5\u00ce")
        buf.write("h\2\u08b0\u08ae\3\2\2\2\u08b1\u08b4\3\2\2\2\u08b2\u08b0")
        buf.write("\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08bb\3\2\2\2\u08b4")
        buf.write("\u08b2\3\2\2\2\u08b5\u08b6\7\u013f\2\2\u08b6\u08b7\5\u00ac")
        buf.write("W\2\u08b7\u08b9\t&\2\2\u08b8\u08ba\5\u00c8e\2\u08b9\u08b8")
        buf.write("\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc\3\2\2\2\u08bb")
        buf.write("\u08b5\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u00c7\3\2\2\2")
        buf.write("\u08bd\u08be\7E\2\2\u08be\u08bf\t\'\2\2\u08bf\u08c0\5")
        buf.write("\u00acW\2\u08c0\u08c1\t&\2\2\u08c1\u08c2\7\u0141\2\2\u08c2")
        buf.write("\u00c9\3\2\2\2\u08c3\u08c4\7I\2\2\u08c4\u08d7\7\20\2\2")
        buf.write("\u08c5\u08c6\7I\2\2\u08c6\u08c7\7\u018c\2\2\u08c7\u08c9")
        buf.write("\7\u00cd\2\2\u08c8\u08ca\5\u00ccg\2\u08c9\u08c8\3\2\2")
        buf.write("\2\u08c9\u08ca\3\2\2\2\u08ca\u08d7\3\2\2\2\u08cb\u08cc")
        buf.write("\7I\2\2\u08cc\u08cd\7\u018c\2\2\u08cd\u08d1\7\u014a\2")
        buf.write("\2\u08ce\u08cf\7\u01ac\2\2\u08cf\u08d0\7\u0197\2\2\u08d0")
        buf.write("\u08d2\7\u01ad\2\2\u08d1\u08ce\3\2\2\2\u08d1\u08d2\3\2")
        buf.write("\2\2\u08d2\u08d4\3\2\2\2\u08d3\u08d5\5\u00ccg\2\u08d4")
        buf.write("\u08d3\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d7\3\2\2\2")
        buf.write("\u08d6\u08c3\3\2\2\2\u08d6\u08c5\3\2\2\2\u08d6\u08cb\3")
        buf.write("\2\2\2\u08d7\u00cb\3\2\2\2\u08d8\u08dd\7\u01ae\2\2\u08d9")
        buf.write("\u08da\7\u0198\2\2\u08da\u08de\7\u00d5\2\2\u08db\u08de")
        buf.write("\7\u0180\2\2\u08dc\u08de\7\u015d\2\2\u08dd\u08d9\3\2\2")
        buf.write("\2\u08dd\u08db\3\2\2\2\u08dd\u08dc\3\2\2\2\u08de\u00cd")
        buf.write("\3\2\2\2\u08df\u08e1\5\u00acW\2\u08e0\u08e2\t\7\2\2\u08e1")
        buf.write("\u08e0\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u00cf\3\2\2\2")
        buf.write("\u08e3\u08e4\5\u00acW\2\u08e4\u00d1\3\2\2\2\u08e5\u08e6")
        buf.write("\7y\2\2\u08e6\u08e7\7\u01ac\2\2\u08e7\u08ec\5\u00d4k\2")
        buf.write("\u08e8\u08e9\7\u01ae\2\2\u08e9\u08eb\5\u00d4k\2\u08ea")
        buf.write("\u08e8\3\2\2\2\u08eb\u08ee\3\2\2\2\u08ec\u08ea\3\2\2\2")
        buf.write("\u08ec\u08ed\3\2\2\2\u08ed\u08ef\3\2\2\2\u08ee\u08ec\3")
        buf.write("\2\2\2\u08ef\u08f0\7\u01ad\2\2\u08f0\u00d3\3\2\2\2\u08f1")
        buf.write("\u08f2\7\u0100\2\2\u08f2\u091f\7\u0195\2\2\u08f3\u08f4")
        buf.write("\t(\2\2\u08f4\u091f\7S\2\2\u08f5\u08f6\t)\2\2\u08f6\u091f")
        buf.write("\7\u00b2\2\2\u08f7\u08f8\t*\2\2\u08f8\u091f\7`\2\2\u08f9")
        buf.write("\u08fa\7\u00ff\2\2\u08fa\u091f\7\u0189\2\2\u08fb\u08fc")
        buf.write("\7\u0107\2\2\u08fc\u091f\7{\2\2\u08fd\u091f\7\u0114\2")
        buf.write("\2\u08fe\u08ff\7\u011c\2\2\u08ff\u091f\7\u0081\2\2\u0900")
        buf.write("\u0901\7\u011d\2\2\u0901\u091f\7\u0081\2\2\u0902\u0903")
        buf.write("\7\u0127\2\2\u0903\u091f\7\u0195\2\2\u0904\u0905\7\u0128")
        buf.write("\2\2\u0905\u091f\7\u0195\2\2\u0906\u0907\7\u0143\2\2\u0907")
        buf.write("\u0908\7I\2\2\u0908\u0909\7\u01ac\2\2\u0909\u090e\5\u00d6")
        buf.write("l\2\u090a\u090b\7\u01ae\2\2\u090b\u090d\5\u00d6l\2\u090c")
        buf.write("\u090a\3\2\2\2\u090d\u0910\3\2\2\2\u090e\u090c\3\2\2\2")
        buf.write("\u090e\u090f\3\2\2\2\u090f\u0911\3\2\2\2\u0910\u090e\3")
        buf.write("\2\2\2\u0911\u0912\7\u01ad\2\2\u0912\u091f\3\2\2\2\u0913")
        buf.write("\u0914\7\u0143\2\2\u0914\u0915\7I\2\2\u0915\u091f\7\u0184")
        buf.write("\2\2\u0916\u0917\7\u0148\2\2\u0917\u091f\t\24\2\2\u0918")
        buf.write("\u091f\7\u0155\2\2\u0919\u091a\7\u015c\2\2\u091a\u091f")
        buf.write("\7\u0081\2\2\u091b\u091c\7\u00b7\2\2\u091c\u091d\7\u0081")
        buf.write("\2\2\u091d\u091f\7\u0197\2\2\u091e\u08f1\3\2\2\2\u091e")
        buf.write("\u08f3\3\2\2\2\u091e\u08f5\3\2\2\2\u091e\u08f7\3\2\2\2")
        buf.write("\u091e\u08f9\3\2\2\2\u091e\u08fb\3\2\2\2\u091e\u08fd\3")
        buf.write("\2\2\2\u091e\u08fe\3\2\2\2\u091e\u0900\3\2\2\2\u091e\u0902")
        buf.write("\3\2\2\2\u091e\u0904\3\2\2\2\u091e\u0906\3\2\2\2\u091e")
        buf.write("\u0913\3\2\2\2\u091e\u0916\3\2\2\2\u091e\u0918\3\2\2\2")
        buf.write("\u091e\u0919\3\2\2\2\u091e\u091b\3\2\2\2\u091f\u00d5\3")
        buf.write("\2\2\2\u0920\u0924\7\u0194\2\2\u0921\u0925\7\u0184\2\2")
        buf.write("\u0922\u0923\7\u019b\2\2\u0923\u0925\5\u0140\u00a1\2\u0924")
        buf.write("\u0921\3\2\2\2\u0924\u0922\3\2\2\2\u0925\u00d7\3\2\2\2")
        buf.write("\u0926\u092b\5\u00dan\2\u0927\u0928\7\u01ae\2\2\u0928")
        buf.write("\u092a\5\u00dan\2\u0929\u0927\3\2\2\2\u092a\u092d\3\2")
        buf.write("\2\2\u092b\u0929\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u00d9")
        buf.write("\3\2\2\2\u092d\u092b\3\2\2\2\u092e\u092f\5\u0126\u0094")
        buf.write("\2\u092f\u0930\7\u01a7\2\2\u0930\u0932\3\2\2\2\u0931\u092e")
        buf.write("\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0936\3\2\2\2\u0933")
        buf.write("\u0937\5\u0102\u0082\2\u0934\u0935\7\u01ab\2\2\u0935\u0937")
        buf.write("\t+\2\2\u0936\u0933\3\2\2\2\u0936\u0934\3\2\2\2\u0937")
        buf.write("\u0944\3\2\2\2\u0938\u0939\5\u0100\u0081\2\u0939\u093a")
        buf.write("\7\u019b\2\2\u093a\u093b\5\u00acW\2\u093b\u0944\3\2\2")
        buf.write("\2\u093c\u0941\5\u00acW\2\u093d\u093f\7\t\2\2\u093e\u093d")
        buf.write("\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0940\3\2\2\2\u0940")
        buf.write("\u0942\5\u0100\u0081\2\u0941\u093e\3\2\2\2\u0941\u0942")
        buf.write("\3\2\2\2\u0942\u0944\3\2\2\2\u0943\u0931\3\2\2\2\u0943")
        buf.write("\u0938\3\2\2\2\u0943\u093c\3\2\2\2\u0944\u00db\3\2\2\2")
        buf.write("\u0945\u094a\5\u00dep\2\u0946\u0947\7\u01ae\2\2\u0947")
        buf.write("\u0949\5\u00dep\2\u0948\u0946\3\2\2\2\u0949\u094c\3\2")
        buf.write("\2\2\u094a\u0948\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u00dd")
        buf.write("\3\2\2\2\u094c\u094a\3\2\2\2\u094d\u094e\bp\1\2\u094e")
        buf.write("\u094f\7\u01ac\2\2\u094f\u0950\5\u00dep\2\u0950\u0951")
        buf.write("\7\u01ad\2\2\u0951\u0954\3\2\2\2\u0952\u0954\5\u00e0q")
        buf.write("\2\u0953\u094d\3\2\2\2\u0953\u0952\3\2\2\2\u0954\u0966")
        buf.write("\3\2\2\2\u0955\u0956\f\5\2\2\u0956\u0957\7\'\2\2\u0957")
        buf.write("\u0958\7`\2\2\u0958\u0965\5\u00dep\6\u0959\u095a\f\4\2")
        buf.write("\2\u095a\u095b\t,\2\2\u095b\u095c\7\u00cb\2\2\u095c\u0965")
        buf.write("\5\u00dep\5\u095d\u095e\f\6\2\2\u095e\u095f\5\u00e6t\2")
        buf.write("\u095f\u0960\7`\2\2\u0960\u0961\5\u00dep\2\u0961\u0962")
        buf.write("\7s\2\2\u0962\u0963\5\u00ba^\2\u0963\u0965\3\2\2\2\u0964")
        buf.write("\u0955\3\2\2\2\u0964\u0959\3\2\2\2\u0964\u095d\3\2\2\2")
        buf.write("\u0965\u0968\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967\3")
        buf.write("\2\2\2\u0967\u00df\3\2\2\2\u0968\u0966\3\2\2\2\u0969\u096b")
        buf.write("\5\u0126\u0094\2\u096a\u096c\5\u00e2r\2\u096b\u096a\3")
        buf.write("\2\2\2\u096b\u096c\3\2\2\2\u096c\u096e\3\2\2\2\u096d\u096f")
        buf.write("\5\u00f6|\2\u096e\u096d\3\2\2\2\u096e\u096f\3\2\2\2\u096f")
        buf.write("\u0991\3\2\2\2\u0970\u0972\5\u00eav\2\u0971\u0973\5\u00e2")
        buf.write("r\2\u0972\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0991")
        buf.write("\3\2\2\2\u0974\u0979\5\u00eex\2\u0975\u0977\5\u00e2r\2")
        buf.write("\u0976\u0978\5\u00fe\u0080\2\u0977\u0976\3\2\2\2\u0977")
        buf.write("\u0978\3\2\2\2\u0978\u097a\3\2\2\2\u0979\u0975\3\2\2\2")
        buf.write("\u0979\u097a\3\2\2\2\u097a\u0991\3\2\2\2\u097b\u097d\5")
        buf.write("\u00e4s\2\u097c\u097e\5\u00e2r\2\u097d\u097c\3\2\2\2\u097d")
        buf.write("\u097e\3\2\2\2\u097e\u0991\3\2\2\2\u097f\u0981\5\u00f0")
        buf.write("y\2\u0980\u0982\5\u00e2r\2\u0981\u0980\3\2\2\2\u0981\u0982")
        buf.write("\3\2\2\2\u0982\u0991\3\2\2\2\u0983\u0985\7\u0194\2\2\u0984")
        buf.write("\u0986\5\u00e2r\2\u0985\u0984\3\2\2\2\u0985\u0986\3\2")
        buf.write("\2\2\u0986\u0991\3\2\2\2\u0987\u0988\7\u0194\2\2\u0988")
        buf.write("\u0989\7\u01a7\2\2\u0989\u098e\5\u00f0y\2\u098a\u098c")
        buf.write("\5\u00e2r\2\u098b\u098d\5\u00fe\u0080\2\u098c\u098b\3")
        buf.write("\2\2\2\u098c\u098d\3\2\2\2\u098d\u098f\3\2\2\2\u098e\u098a")
        buf.write("\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0991\3\2\2\2\u0990")
        buf.write("\u0969\3\2\2\2\u0990\u0970\3\2\2\2\u0990\u0974\3\2\2\2")
        buf.write("\u0990\u097b\3\2\2\2\u0990\u097f\3\2\2\2\u0990\u0983\3")
        buf.write("\2\2\2\u0990\u0987\3\2\2\2\u0991\u00e1\3\2\2\2\u0992\u0994")
        buf.write("\7\t\2\2\u0993\u0992\3\2\2\2\u0993\u0994\3\2\2\2\u0994")
        buf.write("\u0995\3\2\2\2\u0995\u0996\5\u0144\u00a3\2\u0996\u00e3")
        buf.write("\3\2\2\2\u0997\u0998\7\25\2\2\u0998\u0999\7\u01ac\2\2")
        buf.write("\u0999\u099a\7\26\2\2\u099a\u099b\5\u0126\u0094\2\u099b")
        buf.write("\u099c\7\u01ae\2\2\u099c\u099d\t-\2\2\u099d\u099e\7\u01ad")
        buf.write("\2\2\u099e\u00e5\3\2\2\2\u099f\u09a1\7[\2\2\u09a0\u099f")
        buf.write("\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a7\3\2\2\2\u09a2")
        buf.write("\u09a4\t.\2\2\u09a3\u09a5\7|\2\2\u09a4\u09a3\3\2\2\2\u09a4")
        buf.write("\u09a5\3\2\2\2\u09a5\u09a7\3\2\2\2\u09a6\u09a0\3\2\2\2")
        buf.write("\u09a6\u09a2\3\2\2\2\u09a7\u09a9\3\2\2\2\u09a8\u09aa\t")
        buf.write("/\2\2\u09a9\u09a8\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u00e7")
        buf.write("\3\2\2\2\u09ab\u09ad\5\u0126\u0094\2\u09ac\u09ae\5\u00f6")
        buf.write("|\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u00e9")
        buf.write("\3\2\2\2\u09af\u09b0\7w\2\2\u09b0\u09b1\7\u01ac\2\2\u09b1")
        buf.write("\u09b2\7\u0197\2\2\u09b2\u09b3\7\u01ae\2\2\u09b3\u09b4")
        buf.write("\7\u0197\2\2\u09b4\u09b5\7\u01ae\2\2\u09b5\u09b6\7\u0197")
        buf.write("\2\2\u09b6\u09ca\7\u01ad\2\2\u09b7\u09b8\7w\2\2\u09b8")
        buf.write("\u09b9\7\u01ac\2\2\u09b9\u09ba\7\21\2\2\u09ba\u09bb\7")
        buf.write("\u0197\2\2\u09bb\u09c5\7\u01ae\2\2\u09bc\u09c1\5\u00ec")
        buf.write("w\2\u09bd\u09be\7\u01ae\2\2\u09be\u09c0\5\u00ecw\2\u09bf")
        buf.write("\u09bd\3\2\2\2\u09c0\u09c3\3\2\2\2\u09c1\u09bf\3\2\2\2")
        buf.write("\u09c1\u09c2\3\2\2\2\u09c2\u09c6\3\2\2\2\u09c3\u09c1\3")
        buf.write("\2\2\2\u09c4\u09c6\5\u0144\u00a3\2\u09c5\u09bc\3\2\2\2")
        buf.write("\u09c5\u09c4\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8\7")
        buf.write("\u01ad\2\2\u09c8\u09ca\3\2\2\2\u09c9\u09af\3\2\2\2\u09c9")
        buf.write("\u09b7\3\2\2\2\u09ca\u00eb\3\2\2\2\u09cb\u09cc\5\u0144")
        buf.write("\u00a3\2\u09cc\u09cd\7\u019b\2\2\u09cd\u09ce\t\60\2\2")
        buf.write("\u09ce\u00ed\3\2\2\2\u09cf\u09d5\5\u00b0Y\2\u09d0\u09d1")
        buf.write("\7\u01ac\2\2\u09d1\u09d2\5\u00b0Y\2\u09d2\u09d3\7\u01ad")
        buf.write("\2\2\u09d3\u09d5\3\2\2\2\u09d4\u09cf\3\2\2\2\u09d4\u09d0")
        buf.write("\3\2\2\2\u09d5\u00ef\3\2\2\2\u09d6\u0a38\5\u0108\u0085")
        buf.write("\2\u09d7\u0a38\5\u010a\u0086\2\u09d8\u09d9\5\u013a\u009e")
        buf.write("\2\u09d9\u09db\7\u01ac\2\2\u09da\u09dc\5\u0106\u0084\2")
        buf.write("\u09db\u09da\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09dd\3")
        buf.write("\2\2\2\u09dd\u09de\7\u01ad\2\2\u09de\u0a38\3\2\2\2\u09df")
        buf.write("\u09e0\7\u00d6\2\2\u09e0\u09e1\7\u01ac\2\2\u09e1\u09e2")
        buf.write("\7\u01b1\2\2\u09e2\u0a38\7\u01ad\2\2\u09e3\u09e4\7\u00d9")
        buf.write("\2\2\u09e4\u09e5\7\u01ac\2\2\u09e5\u09e6\5\u00acW\2\u09e6")
        buf.write("\u09e7\7\t\2\2\u09e7\u09e8\5\u013c\u009f\2\u09e8\u09e9")
        buf.write("\7\u01ad\2\2\u09e9\u0a38\3\2\2\2\u09ea\u09eb\7%\2\2\u09eb")
        buf.write("\u09ec\7\u01ac\2\2\u09ec\u09ed\5\u013c\u009f\2\u09ed\u09ee")
        buf.write("\7\u01ae\2\2\u09ee\u09f1\5\u00acW\2\u09ef\u09f0\7\u01ae")
        buf.write("\2\2\u09f0\u09f2\5\u00acW\2\u09f1\u09ef\3\2\2\2\u09f1")
        buf.write("\u09f2\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\7\u01ad")
        buf.write("\2\2\u09f4\u0a38\3\2\2\2\u09f5\u09f6\7\u00dd\2\2\u09f6")
        buf.write("\u09f7\7\u01ac\2\2\u09f7\u09f8\7\u01b1\2\2\u09f8\u0a38")
        buf.write("\7\u01ad\2\2\u09f9\u09fa\7\33\2\2\u09fa\u09fb\7\u01ac")
        buf.write("\2\2\u09fb\u09fc\5\u0106\u0084\2\u09fc\u09fd\7\u01ad\2")
        buf.write("\2\u09fd\u0a38\3\2\2\2\u09fe\u0a38\7+\2\2\u09ff\u0a38")
        buf.write("\7,\2\2\u0a00\u0a01\7\u00e9\2\2\u0a01\u0a02\7\u01ac\2")
        buf.write("\2\u0a02\u0a03\7\u0196\2\2\u0a03\u0a04\7\u01ae\2\2\u0a04")
        buf.write("\u0a05\5\u00acW\2\u0a05\u0a06\7\u01ae\2\2\u0a06\u0a07")
        buf.write("\5\u00acW\2\u0a07\u0a08\7\u01ad\2\2\u0a08\u0a38\3\2\2")
        buf.write("\2\u0a09\u0a0a\7\u00ea\2\2\u0a0a\u0a0b\7\u01ac\2\2\u0a0b")
        buf.write("\u0a0c\7\u0196\2\2\u0a0c\u0a0d\7\u01ae\2\2\u0a0d\u0a0e")
        buf.write("\5\u00acW\2\u0a0e\u0a0f\7\u01ae\2\2\u0a0f\u0a10\5\u00ac")
        buf.write("W\2\u0a10\u0a11\7\u01ad\2\2\u0a11\u0a38\3\2\2\2\u0a12")
        buf.write("\u0a13\7\u00eb\2\2\u0a13\u0a14\7\u01ac\2\2\u0a14\u0a15")
        buf.write("\7\u0196\2\2\u0a15\u0a16\7\u01ae\2\2\u0a16\u0a17\5\u00ac")
        buf.write("W\2\u0a17\u0a18\7\u01ad\2\2\u0a18\u0a38\3\2\2\2\u0a19")
        buf.write("\u0a1a\7\u00ec\2\2\u0a1a\u0a1b\7\u01ac\2\2\u0a1b\u0a1c")
        buf.write("\7\u0196\2\2\u0a1c\u0a1d\7\u01ae\2\2\u0a1d\u0a1e\5\u00ac")
        buf.write("W\2\u0a1e\u0a1f\7\u01ad\2\2\u0a1f\u0a38\3\2\2\2\u0a20")
        buf.write("\u0a21\7U\2\2\u0a21\u0a22\7\u01ac\2\2\u0a22\u0a25\5\u013c")
        buf.write("\u009f\2\u0a23\u0a24\7\u01ae\2\2\u0a24\u0a26\7\u0195\2")
        buf.write("\2\u0a25\u0a23\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a29")
        buf.write("\3\2\2\2\u0a27\u0a28\7\u01ae\2\2\u0a28\u0a2a\7\u0195\2")
        buf.write("\2\u0a29\u0a27\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b")
        buf.write("\3\2\2\2\u0a2b\u0a2c\7\u01ad\2\2\u0a2c\u0a38\3\2\2\2\u0a2d")
        buf.write("\u0a38\7\u012e\2\2\u0a2e\u0a2f\7o\2\2\u0a2f\u0a30\7\u01ac")
        buf.write("\2\2\u0a30\u0a31\5\u00acW\2\u0a31\u0a32\7\u01ae\2\2\u0a32")
        buf.write("\u0a33\5\u00acW\2\u0a33\u0a34\7\u01ad\2\2\u0a34\u0a38")
        buf.write("\3\2\2\2\u0a35\u0a38\7\u009f\2\2\u0a36\u0a38\7\u00a5\2")
        buf.write("\2\u0a37\u09d6\3\2\2\2\u0a37\u09d7\3\2\2\2\u0a37\u09d8")
        buf.write("\3\2\2\2\u0a37\u09df\3\2\2\2\u0a37\u09e3\3\2\2\2\u0a37")
        buf.write("\u09ea\3\2\2\2\u0a37\u09f5\3\2\2\2\u0a37\u09f9\3\2\2\2")
        buf.write("\u0a37\u09fe\3\2\2\2\u0a37\u09ff\3\2\2\2\u0a37\u0a00\3")
        buf.write("\2\2\2\u0a37\u0a09\3\2\2\2\u0a37\u0a12\3\2\2\2\u0a37\u0a19")
        buf.write("\3\2\2\2\u0a37\u0a20\3\2\2\2\u0a37\u0a2d\3\2\2\2\u0a37")
        buf.write("\u0a2e\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a37\u0a36\3\2\2\2")
        buf.write("\u0a38\u00f1\3\2\2\2\u0a39\u0a3a\7\u00bd\2\2\u0a3a\u0a3b")
        buf.write("\5\u00acW\2\u0a3b\u0a3c\7\u00a9\2\2\u0a3c\u0a3d\5\u00ac")
        buf.write("W\2\u0a3d\u00f3\3\2\2\2\u0a3e\u0a3f\7\u00bd\2\2\u0a3f")
        buf.write("\u0a40\5\u00ba^\2\u0a40\u0a41\7\u00a9\2\2\u0a41\u0a42")
        buf.write("\5\u00acW\2\u0a42\u00f5\3\2\2\2\u0a43\u0a45\7\u00c0\2")
        buf.write("\2\u0a44\u0a43\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a46")
        buf.write("\3\2\2\2\u0a46\u0a47\7\u01ac\2\2\u0a47\u0a4c\5\u00fa~")
        buf.write("\2\u0a48\u0a49\7\u01ae\2\2\u0a49\u0a4b\5\u00fa~\2\u0a4a")
        buf.write("\u0a48\3\2\2\2\u0a4b\u0a4e\3\2\2\2\u0a4c\u0a4a\3\2\2\2")
        buf.write("\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4f\3\2\2\2\u0a4e\u0a4c\3")
        buf.write("\2\2\2\u0a4f\u0a50\7\u01ad\2\2\u0a50\u00f7\3\2\2\2\u0a51")
        buf.write("\u0a52\7\u00c0\2\2\u0a52\u0a53\7\u01ac\2\2\u0a53\u0a58")
        buf.write("\5\u00fa~\2\u0a54\u0a55\7\u01ae\2\2\u0a55\u0a57\5\u00fa")
        buf.write("~\2\u0a56\u0a54\3\2\2\2\u0a57\u0a5a\3\2\2\2\u0a58\u0a56")
        buf.write("\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2\u0a5a")
        buf.write("\u0a58\3\2\2\2\u0a5b\u0a5c\7\u01ad\2\2\u0a5c\u00f9\3\2")
        buf.write("\2\2\u0a5d\u0a5f\7\u0137\2\2\u0a5e\u0a5d\3\2\2\2\u0a5e")
        buf.write("\u0a5f\3\2\2\2\u0a5f\u0a86\3\2\2\2\u0a60\u0a61\7Z\2\2")
        buf.write("\u0a61\u0a62\7\u01ac\2\2\u0a62\u0a67\5\u00fc\177\2\u0a63")
        buf.write("\u0a64\7\u01ae\2\2\u0a64\u0a66\5\u00fc\177\2\u0a65\u0a63")
        buf.write("\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67\u0a65\3\2\2\2\u0a67")
        buf.write("\u0a68\3\2\2\2\u0a68\u0a6a\3\2\2\2\u0a69\u0a67\3\2\2\2")
        buf.write("\u0a6a\u0a6b\7\u01ad\2\2\u0a6b\u0a87\3\2\2\2\u0a6c\u0a6d")
        buf.write("\7Z\2\2\u0a6d\u0a6e\7\u019b\2\2\u0a6e\u0a87\5\u00fc\177")
        buf.write("\2\u0a6f\u0a7e\7J\2\2\u0a70\u0a71\7\u01ac\2\2\u0a71\u0a72")
        buf.write("\5\u00fc\177\2\u0a72\u0a73\7\u01ac\2\2\u0a73\u0a78\7\u0196")
        buf.write("\2\2\u0a74\u0a75\7\u01ae\2\2\u0a75\u0a77\7\u0196\2\2\u0a76")
        buf.write("\u0a74\3\2\2\2\u0a77\u0a7a\3\2\2\2\u0a78\u0a76\3\2\2\2")
        buf.write("\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\3\2\2\2\u0a7a\u0a78\3")
        buf.write("\2\2\2\u0a7b\u0a7c\7\u01ad\2\2\u0a7c\u0a7d\7\u01ad\2\2")
        buf.write("\u0a7d\u0a7f\3\2\2\2\u0a7e\u0a70\3\2\2\2\u0a7e\u0a7f\3")
        buf.write("\2\2\2\u0a7f\u0a87\3\2\2\2\u0a80\u0a87\7\u0168\2\2\u0a81")
        buf.write("\u0a87\7\u016d\2\2\u0a82\u0a83\7\u016e\2\2\u0a83\u0a84")
        buf.write("\7\u019b\2\2\u0a84\u0a87\7\u0195\2\2\u0a85\u0a87\7\u0196")
        buf.write("\2\2\u0a86\u0a60\3\2\2\2\u0a86\u0a6c\3\2\2\2\u0a86\u0a6f")
        buf.write("\3\2\2\2\u0a86\u0a80\3\2\2\2\u0a86\u0a81\3\2\2\2\u0a86")
        buf.write("\u0a82\3\2\2\2\u0a86\u0a85\3\2\2\2\u0a86\u0a87\3\2\2\2")
        buf.write("\u0a87\u00fb\3\2\2\2\u0a88\u0a8b\5\u0144\u00a3\2\u0a89")
        buf.write("\u0a8b\7\u0195\2\2\u0a8a\u0a88\3\2\2\2\u0a8a\u0a89\3\2")
        buf.write("\2\2\u0a8b\u00fd\3\2\2\2\u0a8c\u0a8d\7\u01ac\2\2\u0a8d")
        buf.write("\u0a92\5\u0100\u0081\2\u0a8e\u0a8f\7\u01ae\2\2\u0a8f\u0a91")
        buf.write("\5\u0100\u0081\2\u0a90\u0a8e\3\2\2\2\u0a91\u0a94\3\2\2")
        buf.write("\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a95")
        buf.write("\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95\u0a96\7\u01ad\2\2\u0a96")
        buf.write("\u00ff\3\2\2\2\u0a97\u0a9a\5\u0144\u00a3\2\u0a98\u0a9a")
        buf.write("\7\u0197\2\2\u0a99\u0a97\3\2\2\2\u0a99\u0a98\3\2\2\2\u0a9a")
        buf.write("\u0101\3\2\2\2\u0a9b\u0a9c\7\u01b1\2\2\u0a9c\u0103\3\2")
        buf.write("\2\2\u0a9d\u0a9e\7\u00b9\2\2\u0a9e\u0a9f\7\u01ac\2\2\u0a9f")
        buf.write("\u0aa0\5\u0106\u0084\2\u0aa0\u0aa8\7\u01ad\2\2\u0aa1\u0aa2")
        buf.write("\7\u01ae\2\2\u0aa2\u0aa3\7\u01ac\2\2\u0aa3\u0aa4\5\u0106")
        buf.write("\u0084\2\u0aa4\u0aa5\7\u01ad\2\2\u0aa5\u0aa7\3\2\2\2\u0aa6")
        buf.write("\u0aa1\3\2\2\2\u0aa7\u0aaa\3\2\2\2\u0aa8\u0aa6\3\2\2\2")
        buf.write("\u0aa8\u0aa9\3\2\2\2\u0aa9\u0105\3\2\2\2\u0aaa\u0aa8\3")
        buf.write("\2\2\2\u0aab\u0ab0\5\u00acW\2\u0aac\u0aad\7\u01ae\2\2")
        buf.write("\u0aad\u0aaf\5\u00acW\2\u0aae\u0aac\3\2\2\2\u0aaf\u0ab2")
        buf.write("\3\2\2\2\u0ab0\u0aae\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1")
        buf.write("\u0107\3\2\2\2\u0ab2\u0ab0\3\2\2\2\u0ab3\u0ab4\t\61\2")
        buf.write("\2\u0ab4\u0ab5\7\u01ac\2\2\u0ab5\u0ab6\7\u01ad\2\2\u0ab6")
        buf.write("\u0abe\5\u010e\u0088\2\u0ab7\u0ab8\7\u013b\2\2\u0ab8\u0ab9")
        buf.write("\7\u01ac\2\2\u0ab9\u0aba\5\u00acW\2\u0aba\u0abb\7\u01ad")
        buf.write("\2\2\u0abb\u0abc\5\u010e\u0088\2\u0abc\u0abe\3\2\2\2\u0abd")
        buf.write("\u0ab3\3\2\2\2\u0abd\u0ab7\3\2\2\2\u0abe\u0109\3\2\2\2")
        buf.write("\u0abf\u0ac0\t\62\2\2\u0ac0\u0ac2\7\u01ac\2\2\u0ac1\u0ac3")
        buf.write("\5\u010c\u0087\2\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3\3\2\2")
        buf.write("\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac5\5\u00acW\2\u0ac5\u0ac7")
        buf.write("\7\u01ad\2\2\u0ac6\u0ac8\5\u010e\u0088\2\u0ac7\u0ac6\3")
        buf.write("\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ae9\3\2\2\2\u0ac9\u0aca")
        buf.write("\t\63\2\2\u0aca\u0ad0\7\u01ac\2\2\u0acb\u0ad1\7\u01b1")
        buf.write("\2\2\u0acc\u0ace\5\u010c\u0087\2\u0acd\u0acc\3\2\2\2\u0acd")
        buf.write("\u0ace\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad1\5\u00ac")
        buf.write("W\2\u0ad0\u0acb\3\2\2\2\u0ad0\u0acd\3\2\2\2\u0ad1\u0ad2")
        buf.write("\3\2\2\2\u0ad2\u0ad4\7\u01ad\2\2\u0ad3\u0ad5\5\u010e\u0088")
        buf.write("\2\u0ad4\u0ad3\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ae9")
        buf.write("\3\2\2\2\u0ad6\u0ad7\7\u00de\2\2\u0ad7\u0ad9\7\u01ac\2")
        buf.write("\2\u0ad8\u0ada\5\u010c\u0087\2\u0ad9\u0ad8\3\2\2\2\u0ad9")
        buf.write("\u0ada\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0adc\5\u00ac")
        buf.write("W\2\u0adc\u0add\7\u01ad\2\2\u0add\u0ae9\3\2\2\2\u0ade")
        buf.write("\u0adf\7\u010e\2\2\u0adf\u0ae0\7\u01ac\2\2\u0ae0\u0ae1")
        buf.write("\5\u00acW\2\u0ae1\u0ae2\7\u01ad\2\2\u0ae2\u0ae9\3\2\2")
        buf.write("\2\u0ae3\u0ae4\7\u010f\2\2\u0ae4\u0ae5\7\u01ac\2\2\u0ae5")
        buf.write("\u0ae6\5\u0106\u0084\2\u0ae6\u0ae7\7\u01ad\2\2\u0ae7\u0ae9")
        buf.write("\3\2\2\2\u0ae8\u0abf\3\2\2\2\u0ae8\u0ac9\3\2\2\2\u0ae8")
        buf.write("\u0ad6\3\2\2\2\u0ae8\u0ade\3\2\2\2\u0ae8\u0ae3\3\2\2\2")
        buf.write("\u0ae9\u010b\3\2\2\2\u0aea\u0aeb\t%\2\2\u0aeb\u010d\3")
        buf.write("\2\2\2\u0aec\u0aed\7}\2\2\u0aed\u0af1\7\u01ac\2\2\u0aee")
        buf.write("\u0aef\7\u0149\2\2\u0aef\u0af0\7\22\2\2\u0af0\u0af2\5")
        buf.write("\u0106\u0084\2\u0af1\u0aee\3\2\2\2\u0af1\u0af2\3\2\2\2")
        buf.write("\u0af2\u0af4\3\2\2\2\u0af3\u0af5\5\u00c6d\2\u0af4\u0af3")
        buf.write("\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0af7\3\2\2\2\u0af6")
        buf.write("\u0af8\5\u0110\u0089\2\u0af7\u0af6\3\2\2\2\u0af7\u0af8")
        buf.write("\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afa\7\u01ad\2\2\u0afa")
        buf.write("\u010f\3\2\2\2\u0afb\u0afc\t\64\2\2\u0afc\u0afd\5\u0112")
        buf.write("\u008a\2\u0afd\u0111\3\2\2\2\u0afe\u0b05\5\u0116\u008c")
        buf.write("\2\u0aff\u0b00\7\16\2\2\u0b00\u0b01\5\u0114\u008b\2\u0b01")
        buf.write("\u0b02\7\7\2\2\u0b02\u0b03\5\u0114\u008b\2\u0b03\u0b05")
        buf.write("\3\2\2\2\u0b04\u0afe\3\2\2\2\u0b04\u0aff\3\2\2\2\u0b05")
        buf.write("\u0113\3\2\2\2\u0b06\u0b09\5\u0116\u008c\2\u0b07\u0b09")
        buf.write("\5\u0118\u008d\2\u0b08\u0b06\3\2\2\2\u0b08\u0b07\3\2\2")
        buf.write("\2\u0b09\u0115\3\2\2\2\u0b0a\u0b0b\7\u0182\2\2\u0b0b\u0b11")
        buf.write("\7\u014b\2\2\u0b0c\u0b0d\7\u0195\2\2\u0b0d\u0b11\7\u014b")
        buf.write("\2\2\u0b0e\u0b0f\7(\2\2\u0b0f\u0b11\7\u015e\2\2\u0b10")
        buf.write("\u0b0a\3\2\2\2\u0b10\u0b0c\3\2\2\2\u0b10\u0b0e\3\2\2\2")
        buf.write("\u0b11\u0117\3\2\2\2\u0b12\u0b13\7\u0182\2\2\u0b13\u0b17")
        buf.write("\7\u0106\2\2\u0b14\u0b15\7\u0195\2\2\u0b15\u0b17\7\u0106")
        buf.write("\2\2\u0b16\u0b12\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b17\u0119")
        buf.write("\3\2\2\2\u0b18\u0b19\7\u0104\2\2\u0b19\u0b1e\5\u011c\u008f")
        buf.write("\2\u0b1a\u0b1b\7\u01ae\2\2\u0b1b\u0b1d\5\u011c\u008f\2")
        buf.write("\u0b1c\u0b1a\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c\3")
        buf.write("\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b3b\3\2\2\2\u0b20\u0b1e")
        buf.write("\3\2\2\2\u0b21\u0b22\7\u00f1\2\2\u0b22\u0b25\7\u019b\2")
        buf.write("\2\u0b23\u0b26\5\u0144\u00a3\2\u0b24\u0b26\7\u0197\2\2")
        buf.write("\u0b25\u0b23\3\2\2\2\u0b25\u0b24\3\2\2\2\u0b26\u0b3b\3")
        buf.write("\2\2\2\u0b27\u0b28\7\u00f0\2\2\u0b28\u0b2b\7\u019b\2\2")
        buf.write("\u0b29\u0b2c\5\u0144\u00a3\2\u0b2a\u0b2c\7\u0197\2\2\u0b2b")
        buf.write("\u0b29\3\2\2\2\u0b2b\u0b2a\3\2\2\2\u0b2c\u0b3b\3\2\2\2")
        buf.write("\u0b2d\u0b2e\7\u0133\2\2\u0b2e\u0b2f\7\u019b\2\2\u0b2f")
        buf.write("\u0b3b\t\r\2\2\u0b30\u0b31\7\u017c\2\2\u0b31\u0b32\7\u019b")
        buf.write("\2\2\u0b32\u0b3b\t\r\2\2\u0b33\u0b34\7\u017f\2\2\u0b34")
        buf.write("\u0b35\7\u019b\2\2\u0b35\u0b3b\7\u0195\2\2\u0b36\u0b37")
        buf.write("\7\u00ef\2\2\u0b37\u0b3b\t\r\2\2\u0b38\u0b39\7\u017d\2")
        buf.write("\2\u0b39\u0b3b\t\r\2\2\u0b3a\u0b18\3\2\2\2\u0b3a\u0b21")
        buf.write("\3\2\2\2\u0b3a\u0b27\3\2\2\2\u0b3a\u0b2d\3\2\2\2\u0b3a")
        buf.write("\u0b30\3\2\2\2\u0b3a\u0b33\3\2\2\2\u0b3a\u0b36\3\2\2\2")
        buf.write("\u0b3a\u0b38\3\2\2\2\u0b3b\u011b\3\2\2\2\u0b3c\u0b43\7")
        buf.write("\u01ac\2\2\u0b3d\u0b3e\7\u0138\2\2\u0b3e\u0b3f\7\u019b")
        buf.write("\2\2\u0b3f\u0b44\t\65\2\2\u0b40\u0b41\7\u00f6\2\2\u0b41")
        buf.write("\u0b42\7\u019b\2\2\u0b42\u0b44\7\u0197\2\2\u0b43\u0b3d")
        buf.write("\3\2\2\2\u0b43\u0b40\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45")
        buf.write("\u0b46\7\u01ad\2\2\u0b46\u011d\3\2\2\2\u0b47\u0b4a\5\u0120")
        buf.write("\u0091\2\u0b48\u0b4a\5\u0122\u0092\2\u0b49\u0b47\3\2\2")
        buf.write("\2\u0b49\u0b48\3\2\2\2\u0b4a\u011f\3\2\2\2\u0b4b\u0b4c")
        buf.write("\7\u0102\2\2\u0b4c\u0b4f\5\u0144\u00a3\2\u0b4d\u0b4e\7")
        buf.write("\"\2\2\u0b4e\u0b50\7\u0104\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f")
        buf.write("\u0b50\3\2\2\2\u0b50\u0b52\3\2\2\2\u0b51\u0b53\7\62\2")
        buf.write("\2\u0b52\u0b51\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b56")
        buf.write("\3\2\2\2\u0b54\u0b55\7\"\2\2\u0b55\u0b57\7\u012b\2\2\u0b56")
        buf.write("\u0b54\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b58\3\2\2\2")
        buf.write("\u0b58\u0b5d\5\u0122\u0092\2\u0b59\u0b5a\7\u01ae\2\2\u0b5a")
        buf.write("\u0b5c\5\u0122\u0092\2\u0b5b\u0b59\3\2\2\2\u0b5c\u0b5f")
        buf.write("\3\2\2\2\u0b5d\u0b5b\3\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e")
        buf.write("\u0121\3\2\2\2\u0b5f\u0b5d\3\2\2\2\u0b60\u0b61\7\u01ac")
        buf.write("\2\2\u0b61\u0b62\7\u0132\2\2\u0b62\u0b65\7\u019b\2\2\u0b63")
        buf.write("\u0b66\5\u0144\u00a3\2\u0b64\u0b66\7\u0197\2\2\u0b65\u0b63")
        buf.write("\3\2\2\2\u0b65\u0b64\3\2\2\2\u0b66\u0b68\3\2\2\2\u0b67")
        buf.write("\u0b69\7\u01ae\2\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2")
        buf.write("\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6b\7G\2\2\u0b6b\u0b6c")
        buf.write("\7\u019b\2\2\u0b6c\u0b6e\7\u0197\2\2\u0b6d\u0b6f\7\u01ae")
        buf.write("\2\2\u0b6e\u0b6d\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b76")
        buf.write("\3\2\2\2\u0b70\u0b71\7\u016c\2\2\u0b71\u0b72\7\u019b\2")
        buf.write("\2\u0b72\u0b74\5\u014c\u00a7\2\u0b73\u0b75\7\u01ae\2\2")
        buf.write("\u0b74\u0b73\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b77\3")
        buf.write("\2\2\2\u0b76\u0b70\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b81")
        buf.write("\3\2\2\2\u0b78\u0b79\7\u0129\2\2\u0b79\u0b7c\7\u019b\2")
        buf.write("\2\u0b7a\u0b7d\5\u014c\u00a7\2\u0b7b\u0b7d\7\u0185\2\2")
        buf.write("\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7b\3\2\2\2\u0b7d\u0b7f\3")
        buf.write("\2\2\2\u0b7e\u0b80\7\u01ae\2\2\u0b7f\u0b7e\3\2\2\2\u0b7f")
        buf.write("\u0b80\3\2\2\2\u0b80\u0b82\3\2\2\2\u0b81\u0b78\3\2\2\2")
        buf.write("\u0b81\u0b82\3\2\2\2\u0b82\u0b89\3\2\2\2\u0b83\u0b84\7")
        buf.write("\u0103\2\2\u0b84\u0b85\7\u019b\2\2\u0b85\u0b87\5\u014c")
        buf.write("\u00a7\2\u0b86\u0b88\7\u01ae\2\2\u0b87\u0b86\3\2\2\2\u0b87")
        buf.write("\u0b88\3\2\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b83\3\2\2\2")
        buf.write("\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b8c\7")
        buf.write("\u01ad\2\2\u0b8c\u0123\3\2\2\2\u0b8d\u0b8e\5\u0144\u00a3")
        buf.write("\2\u0b8e\u0b8f\7\u01a7\2\2\u0b8f\u0b90\5\u0144\u00a3\2")
        buf.write("\u0b90\u0b91\7\u01a7\2\2\u0b91\u0b92\5\u0144\u00a3\2\u0b92")
        buf.write("\u0b93\7\u01a7\2\2\u0b93\u0b9f\3\2\2\2\u0b94\u0b95\5\u0144")
        buf.write("\u00a3\2\u0b95\u0b97\7\u01a7\2\2\u0b96\u0b98\5\u0144\u00a3")
        buf.write("\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b99")
        buf.write("\3\2\2\2\u0b99\u0b9a\7\u01a7\2\2\u0b9a\u0b9f\3\2\2\2\u0b9b")
        buf.write("\u0b9c\5\u0144\u00a3\2\u0b9c\u0b9d\7\u01a7\2\2\u0b9d\u0b9f")
        buf.write("\3\2\2\2\u0b9e\u0b8d\3\2\2\2\u0b9e\u0b94\3\2\2\2\u0b9e")
        buf.write("\u0b9b\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba0\3\2\2\2")
        buf.write("\u0ba0\u0ba1\5\u0144\u00a3\2\u0ba1\u0125\3\2\2\2\u0ba2")
        buf.write("\u0ba3\5\u0144\u00a3\2\u0ba3\u0ba5\7\u01a7\2\2\u0ba4\u0ba6")
        buf.write("\5\u0144\u00a3\2\u0ba5\u0ba4\3\2\2\2\u0ba5\u0ba6\3\2\2")
        buf.write("\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0ba8\7\u01a7\2\2\u0ba8\u0bad")
        buf.write("\3\2\2\2\u0ba9\u0baa\5\u0144\u00a3\2\u0baa\u0bab\7\u01a7")
        buf.write("\2\2\u0bab\u0bad\3\2\2\2\u0bac\u0ba2\3\2\2\2\u0bac\u0ba9")
        buf.write("\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae")
        buf.write("\u0baf\5\u0144\u00a3\2\u0baf\u0127\3\2\2\2\u0bb0\u0bb1")
        buf.write("\5\u0144\u00a3\2\u0bb1\u0bb2\7\u01a7\2\2\u0bb2\u0bb4\3")
        buf.write("\2\2\2\u0bb3\u0bb0\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb5")
        buf.write("\3\2\2\2\u0bb5\u0bb6\5\u0144\u00a3\2\u0bb6\u0129\3\2\2")
        buf.write("\2\u0bb7\u0bb8\5\u0144\u00a3\2\u0bb8\u0bba\7\u01a7\2\2")
        buf.write("\u0bb9\u0bbb\5\u0144\u00a3\2\u0bba\u0bb9\3\2\2\2\u0bba")
        buf.write("\u0bbb\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0bbd\7\u01a7")
        buf.write("\2\2\u0bbd\u0bc2\3\2\2\2\u0bbe\u0bbf\5\u0144\u00a3\2\u0bbf")
        buf.write("\u0bc0\7\u01a7\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bb7\3\2")
        buf.write("\2\2\u0bc1\u0bbe\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc3")
        buf.write("\3\2\2\2\u0bc3\u0bc4\5\u0144\u00a3\2\u0bc4\u012b\3\2\2")
        buf.write("\2\u0bc5\u0bc8\5\u0124\u0093\2\u0bc6\u0bc8\7\u0194\2\2")
        buf.write("\u0bc7\u0bc5\3\2\2\2\u0bc7\u0bc6\3\2\2\2\u0bc8\u012d\3")
        buf.write("\2\2\2\u0bc9\u0bca\5\u0126\u0094\2\u0bca\u0bcb\7\u01a7")
        buf.write("\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0bc9\3\2\2\2\u0bcc\u0bcd")
        buf.write("\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bcf\5\u0144\u00a3")
        buf.write("\2\u0bcf\u012f\3\2\2\2\u0bd0\u0bd5\5\u0144\u00a3\2\u0bd1")
        buf.write("\u0bd2\7\u01ae\2\2\u0bd2\u0bd4\5\u0144\u00a3\2\u0bd3\u0bd1")
        buf.write("\3\2\2\2\u0bd4\u0bd7\3\2\2\2\u0bd5\u0bd3\3\2\2\2\u0bd5")
        buf.write("\u0bd6\3\2\2\2\u0bd6\u0131\3\2\2\2\u0bd7\u0bd5\3\2\2\2")
        buf.write("\u0bd8\u0bdb\5\u0144\u00a3\2\u0bd9\u0bdb\7\u0194\2\2\u0bda")
        buf.write("\u0bd8\3\2\2\2\u0bda\u0bd9\3\2\2\2\u0bdb\u0133\3\2\2\2")
        buf.write("\u0bdc\u0bdd\t\r\2\2\u0bdd\u0135\3\2\2\2\u0bde\u0bdf\t")
        buf.write("\66\2\2\u0bdf\u0137\3\2\2\2\u0be0\u0be2\7m\2\2\u0be1\u0be0")
        buf.write("\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3")
        buf.write("\u0be4\7n\2\2\u0be4\u0139\3\2\2\2\u0be5\u0beb\5\u012a")
        buf.write("\u0096\2\u0be6\u0beb\7\u0093\2\2\u0be7\u0beb\7c\2\2\u0be8")
        buf.write("\u0beb\7\u00d6\2\2\u0be9\u0beb\7\u00dd\2\2\u0bea\u0be5")
        buf.write("\3\2\2\2\u0bea\u0be6\3\2\2\2\u0bea\u0be7\3\2\2\2\u0bea")
        buf.write("\u0be8\3\2\2\2\u0bea\u0be9\3\2\2\2\u0beb\u013b\3\2\2\2")
        buf.write("\u0bec\u0bee\5\u0144\u00a3\2\u0bed\u0bef\7U\2\2\u0bee")
        buf.write("\u0bed\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf7\3\2\2\2")
        buf.write("\u0bf0\u0bf1\7\u01ac\2\2\u0bf1\u0bf4\t\67\2\2\u0bf2\u0bf3")
        buf.write("\7\u01ae\2\2\u0bf3\u0bf5\7\u0195\2\2\u0bf4\u0bf2\3\2\2")
        buf.write("\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf8")
        buf.write("\7\u01ad\2\2\u0bf7\u0bf0\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8")
        buf.write("\u013d\3\2\2\2\u0bf9\u0bfc\7n\2\2\u0bfa\u0bfc\5\u0140")
        buf.write("\u00a1\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc")
        buf.write("\u013f\3\2\2\2\u0bfd\u0c0d\7\u0197\2\2\u0bfe\u0c0d\7\u0198")
        buf.write("\2\2\u0bff\u0c01\5\u0142\u00a2\2\u0c00\u0bff\3\2\2\2\u0c00")
        buf.write("\u0c01\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c0d\7\u0195")
        buf.write("\2\2\u0c03\u0c05\5\u0142\u00a2\2\u0c04\u0c03\3\2\2\2\u0c04")
        buf.write("\u0c05\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06\u0c0d\t8\2\2")
        buf.write("\u0c07\u0c09\5\u0142\u00a2\2\u0c08\u0c07\3\2\2\2\u0c08")
        buf.write("\u0c09\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0b\7\u01ab")
        buf.write("\2\2\u0c0b\u0c0d\t9\2\2\u0c0c\u0bfd\3\2\2\2\u0c0c\u0bfe")
        buf.write("\3\2\2\2\u0c0c\u0c00\3\2\2\2\u0c0c\u0c04\3\2\2\2\u0c0c")
        buf.write("\u0c08\3\2\2\2\u0c0d\u0141\3\2\2\2\u0c0e\u0c0f\t!\2\2")
        buf.write("\u0c0f\u0143\3\2\2\2\u0c10\u0c14\5\u0146\u00a4\2\u0c11")
        buf.write("\u0c14\7\u0192\2\2\u0c12\u0c14\7\u0193\2\2\u0c13\u0c10")
        buf.write("\3\2\2\2\u0c13\u0c11\3\2\2\2\u0c13\u0c12\3\2\2\2\u0c14")
        buf.write("\u0145\3\2\2\2\u0c15\u0c16\t:\2\2\u0c16\u0147\3\2\2\2")
        buf.write("\u0c17\u0c27\7\u019b\2\2\u0c18\u0c27\7\u019c\2\2\u0c19")
        buf.write("\u0c27\7\u019d\2\2\u0c1a\u0c1b\7\u019d\2\2\u0c1b\u0c27")
        buf.write("\7\u019b\2\2\u0c1c\u0c1d\7\u019c\2\2\u0c1d\u0c27\7\u019b")
        buf.write("\2\2\u0c1e\u0c1f\7\u019d\2\2\u0c1f\u0c27\7\u019c\2\2\u0c20")
        buf.write("\u0c21\7\u019e\2\2\u0c21\u0c27\7\u019b\2\2\u0c22\u0c23")
        buf.write("\7\u019e\2\2\u0c23\u0c27\7\u019c\2\2\u0c24\u0c25\7\u019e")
        buf.write("\2\2\u0c25\u0c27\7\u019d\2\2\u0c26\u0c17\3\2\2\2\u0c26")
        buf.write("\u0c18\3\2\2\2\u0c26\u0c19\3\2\2\2\u0c26\u0c1a\3\2\2\2")
        buf.write("\u0c26\u0c1c\3\2\2\2\u0c26\u0c1e\3\2\2\2\u0c26\u0c20\3")
        buf.write("\2\2\2\u0c26\u0c22\3\2\2\2\u0c26\u0c24\3\2\2\2\u0c27\u0149")
        buf.write("\3\2\2\2\u0c28\u0c29\t;\2\2\u0c29\u014b\3\2\2\2\u0c2a")
        buf.write("\u0c2c\7\u0195\2\2\u0c2b\u0c2d\t<\2\2\u0c2c\u0c2b\3\2")
        buf.write("\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u014d\3\2\2\2\u01ce\u0151")
        buf.write("\u0158\u015c\u0160\u0166\u016c\u017d\u0181\u0184\u0188")
        buf.write("\u018c\u0190\u0195\u019a\u01a1\u01a4\u01a8\u01ab\u01b3")
        buf.write("\u01b6\u01bb\u01be\u01c3\u01c8\u01cb\u01d0\u01d6\u01dd")
        buf.write("\u01e1\u01e3\u01e8\u01f5\u01fa\u01fc\u0205\u0208\u0210")
        buf.write("\u0212\u0215\u0219\u021c\u0220\u0227\u022b\u022d\u022f")
        buf.write("\u0232\u0235\u0238\u023c\u0241\u0244\u024c\u024e\u0251")
        buf.write("\u0255\u0258\u025e\u0261\u0265\u0268\u026b\u0272\u0275")
        buf.write("\u0279\u027c\u027f\u0282\u0285\u028d\u028f\u0293\u0296")
        buf.write("\u029e\u02a2\u02a6\u02ad\u02b1\u02b3\u02b5\u02b8\u02bb")
        buf.write("\u02be\u02c6\u02cc\u02d2\u02d4\u02d8\u02db\u02de\u02e3")
        buf.write("\u02e8\u02eb\u02f3\u02f7\u02fe\u0301\u030a\u030d\u0311")
        buf.write("\u0319\u031c\u0320\u0323\u032c\u0330\u0334\u0337\u033e")
        buf.write("\u0341\u0348\u034c\u034e\u0356\u0359\u035d\u0366\u0369")
        buf.write("\u036d\u0371\u0374\u0379\u0389\u038d\u0393\u0395\u0398")
        buf.write("\u03a0\u03a6\u03ab\u03ae\u03b7\u03bf\u03c2\u03c9\u03cc")
        buf.write("\u03f1\u03f4\u03fa\u0406\u0408\u040b\u0423\u042e\u0436")
        buf.write("\u0441\u0446\u0449\u0451\u045b\u0475\u047b\u0486\u0494")
        buf.write("\u049c\u04a3\u04ba\u04c7\u04cd\u04d2\u04d5\u04db\u04df")
        buf.write("\u04e6\u04ef\u04f3\u04f9\u0500\u0504\u0511\u0517\u0528")
        buf.write("\u052c\u0534\u0538\u0540\u0544\u0546\u054a\u054e\u0552")
        buf.write("\u0556\u055c\u0560\u0562\u0567\u056f\u0572\u0575\u057e")
        buf.write("\u0583\u0588\u058b\u058d\u0591\u0595\u0598\u059c\u05a2")
        buf.write("\u05a7\u05ae\u05b0\u05b4\u05bb\u05bf\u05c2\u05cb\u05ce")
        buf.write("\u05d0\u05d9\u05e4\u05e8\u05ea\u05ec\u05f2\u05f7\u05fe")
        buf.write("\u060b\u060d\u060f\u0612\u0615\u061c\u061f\u0625\u062a")
        buf.write("\u062c\u062f\u0635\u063d\u063f\u0642\u0646\u0649\u064f")
        buf.write("\u0652\u0656\u0659\u065f\u0662\u0664\u0668\u066d\u0675")
        buf.write("\u067a\u0683\u0688\u068d\u0693\u0697\u069a\u069e\u06a4")
        buf.write("\u06ac\u06b1\u06b3\u06b6\u06bb\u06c0\u06c3\u06c8\u06cb")
        buf.write("\u06ce\u06d4\u06da\u06de\u06e3\u06e6\u06eb\u06ef\u06f3")
        buf.write("\u06f9\u06ff\u0708\u0712\u071c\u071e\u0720\u0723\u0726")
        buf.write("\u0731\u0733\u0735\u0738\u073b\u073e\u0741\u0744\u0747")
        buf.write("\u0753\u0756\u0759\u0762\u0765\u0768\u076f\u0772\u0780")
        buf.write("\u0783\u078a\u0795\u0799\u07a6\u07aa\u07b2\u07b6\u07c8")
        buf.write("\u07d7\u07d9\u07e4\u07eb\u07f2\u07fa\u0803\u0807\u0811")
        buf.write("\u0818\u0824\u0826\u083d\u0846\u084c\u0852\u0858\u0863")
        buf.write("\u086b\u0873\u0878\u087c\u0880\u0883\u0888\u088c\u0890")
        buf.write("\u0899\u089c\u08a0\u08a5\u08a9\u08b2\u08b9\u08bb\u08c9")
        buf.write("\u08d1\u08d4\u08d6\u08dd\u08e1\u08ec\u090e\u091e\u0924")
        buf.write("\u092b\u0931\u0936\u093e\u0941\u0943\u094a\u0953\u0964")
        buf.write("\u0966\u096b\u096e\u0972\u0977\u0979\u097d\u0981\u0985")
        buf.write("\u098c\u098e\u0990\u0993\u09a0\u09a4\u09a6\u09a9\u09ad")
        buf.write("\u09c1\u09c5\u09c9\u09d4\u09db\u09f1\u0a25\u0a29\u0a37")
        buf.write("\u0a44\u0a4c\u0a58\u0a5e\u0a67\u0a78\u0a7e\u0a86\u0a8a")
        buf.write("\u0a92\u0a99\u0aa8\u0ab0\u0abd\u0ac2\u0ac7\u0acd\u0ad0")
        buf.write("\u0ad4\u0ad9\u0ae8\u0af1\u0af4\u0af7\u0b04\u0b08\u0b10")
        buf.write("\u0b16\u0b1e\u0b25\u0b2b\u0b3a\u0b43\u0b49\u0b4f\u0b52")
        buf.write("\u0b56\u0b5d\u0b65\u0b68\u0b6e\u0b74\u0b76\u0b7c\u0b7f")
        buf.write("\u0b81\u0b87\u0b89\u0b97\u0b9e\u0ba5\u0bac\u0bb3\u0bba")
        buf.write("\u0bc1\u0bc7\u0bcc\u0bd5\u0bda\u0be1\u0bea\u0bee\u0bf4")
        buf.write("\u0bf7\u0bfb\u0c00\u0c04\u0c08\u0c0c\u0c13\u0c26\u0c2c")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "'>'", "'<'", "'!'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'.'", 
                     "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", 
                     "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", 
                     "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "HADR_options", "ADD", "ALL", "ALTER", 
                      "AND", "ANY", "AS", "ASC", "AUTHORIZATION", "BACKUP", 
                      "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", 
                      "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", 
                      "CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", 
                      "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", 
                      "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", 
                      "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", 
                      "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", 
                      "LINENO", "LOAD", "LOG", "MERGE", "NATIONAL", "NOCHECK", 
                      "NONCLUSTERED", "NONE", "NOT", "NULL", "NULLIF", "OF", 
                      "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
                      "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", 
                      "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
                      "PUBLIC", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", 
                      "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
                      "RETURN", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", 
                      "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", 
                      "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", 
                      "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", 
                      "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", 
                      "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", 
                      "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", 
                      "ANSI_NULL_DEFAULT", "ANSI_PADDING", "ANSI_WARNINGS", 
                      "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
                      "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
                      "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", 
                      "BULK_LOGGED", "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", 
                      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
                      "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", 
                      "DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", 
                      "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
                      "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
                      "DIRECTORY_NAME", "DISABLE", "DISABLED", "DISABLE_BROKER", 
                      "DYNAMIC", "EMERGENCY", "ENABLE_BROKER", "ENCRYPTION", 
                      "ERROR_BROKER_CONVERSATIONS", "EXPAND", "FAST", "FAST_FORWARD", 
                      "FILEGROUP", "FILEGROWTH", "FILESTREAM", "FIRST", 
                      "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", "FULLSCAN", 
                      "GB", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", 
                      "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
                      "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NEXT", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", 
                      "PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", 
                      "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
                      "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE", 
                      "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "SUM", 
                      "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
                      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", 
                      "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
                      "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", 
                      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
                      "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_another_statement = 7
    RULE_delete_statement = 8
    RULE_delete_statement_from = 9
    RULE_insert_statement = 10
    RULE_insert_statement_value = 11
    RULE_select_statement = 12
    RULE_update_statement = 13
    RULE_output_clause = 14
    RULE_output_dml_list_elem = 15
    RULE_output_column_name = 16
    RULE_create_database = 17
    RULE_create_index = 18
    RULE_create_procedure = 19
    RULE_procedure_param = 20
    RULE_procedure_option = 21
    RULE_create_statistics = 22
    RULE_create_table = 23
    RULE_create_view = 24
    RULE_view_attribute = 25
    RULE_alter_table = 26
    RULE_alter_database = 27
    RULE_database_optionspec = 28
    RULE_auto_option = 29
    RULE_change_tracking_option = 30
    RULE_change_tracking_option_list = 31
    RULE_containment_option = 32
    RULE_cursor_option = 33
    RULE_date_correlation_optimization_option = 34
    RULE_db_encryption_option = 35
    RULE_db_state_option = 36
    RULE_db_update_option = 37
    RULE_db_user_access_option = 38
    RULE_delayed_durability_option = 39
    RULE_external_access_option = 40
    RULE_mixed_page_allocation_option = 41
    RULE_parameterization_option = 42
    RULE_recovery_option = 43
    RULE_service_broker_option = 44
    RULE_snapshot_option = 45
    RULE_sql_option = 46
    RULE_target_recovery_time_option = 47
    RULE_termination = 48
    RULE_drop_index = 49
    RULE_drop_procedure = 50
    RULE_drop_statistics = 51
    RULE_drop_table = 52
    RULE_drop_view = 53
    RULE_create_type = 54
    RULE_drop_type = 55
    RULE_rowset_function_limited = 56
    RULE_openquery = 57
    RULE_opendatasource = 58
    RULE_declare_statement = 59
    RULE_cursor_statement = 60
    RULE_execute_statement = 61
    RULE_execute_statement_arg = 62
    RULE_execute_var_string = 63
    RULE_security_statement = 64
    RULE_grant_permission = 65
    RULE_set_statement = 66
    RULE_transaction_statement = 67
    RULE_go_statement = 68
    RULE_use_statement = 69
    RULE_execute_clause = 70
    RULE_declare_local = 71
    RULE_table_type_definition = 72
    RULE_column_def_table_constraints = 73
    RULE_column_def_table_constraint = 74
    RULE_column_definition = 75
    RULE_column_constraint = 76
    RULE_table_constraint = 77
    RULE_index_options = 78
    RULE_index_option = 79
    RULE_declare_cursor = 80
    RULE_declare_set_cursor_common = 81
    RULE_fetch_cursor = 82
    RULE_set_special = 83
    RULE_constant_LOCAL_ID = 84
    RULE_expression = 85
    RULE_constant_expression = 86
    RULE_subquery = 87
    RULE_with_expression = 88
    RULE_common_table_expression = 89
    RULE_update_elem = 90
    RULE_search_condition_list = 91
    RULE_search_condition = 92
    RULE_predicate = 93
    RULE_query_expression = 94
    RULE_union_op = 95
    RULE_query_specification = 96
    RULE_top_clause = 97
    RULE_order_by_clause = 98
    RULE_fetch_expression = 99
    RULE_for_clause = 100
    RULE_xml_common_directives = 101
    RULE_order_by_expression = 102
    RULE_group_by_item = 103
    RULE_option_clause = 104
    RULE_option = 105
    RULE_optimize_for_arg = 106
    RULE_select_list = 107
    RULE_select_list_elem = 108
    RULE_table_sources = 109
    RULE_table_source = 110
    RULE_table_source_item = 111
    RULE_table_alias = 112
    RULE_change_table = 113
    RULE_join_type = 114
    RULE_table_name_with_hint = 115
    RULE_rowset_function = 116
    RULE_bulk_option = 117
    RULE_derived_table = 118
    RULE_function_call = 119
    RULE_switch_section = 120
    RULE_switch_search_condition_section = 121
    RULE_with_table_hints = 122
    RULE_insert_with_table_hints = 123
    RULE_table_hint = 124
    RULE_index_value = 125
    RULE_column_alias_list = 126
    RULE_column_alias = 127
    RULE_a_star = 128
    RULE_table_value_constructor = 129
    RULE_expression_list = 130
    RULE_ranking_windowed_function = 131
    RULE_aggregate_windowed_function = 132
    RULE_all_distinct = 133
    RULE_over_clause = 134
    RULE_row_or_range_clause = 135
    RULE_window_frame_extent = 136
    RULE_window_frame_bound = 137
    RULE_window_frame_preceding = 138
    RULE_window_frame_following = 139
    RULE_create_database_option = 140
    RULE_database_filestream_option = 141
    RULE_database_file_spec = 142
    RULE_file_group = 143
    RULE_file_spec = 144
    RULE_full_table_name = 145
    RULE_table_name = 146
    RULE_simple_name = 147
    RULE_func_proc_name = 148
    RULE_ddl_object = 149
    RULE_full_column_name = 150
    RULE_column_name_list = 151
    RULE_cursor_name = 152
    RULE_on_off = 153
    RULE_clustered = 154
    RULE_null_notnull = 155
    RULE_scalar_function_name = 156
    RULE_data_type = 157
    RULE_default_value = 158
    RULE_constant = 159
    RULE_sign = 160
    RULE_r_id = 161
    RULE_simple_id = 162
    RULE_comparison_operator = 163
    RULE_assignment_operator = 164
    RULE_file_size = 165

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "another_statement", "delete_statement", 
                   "delete_statement_from", "insert_statement", "insert_statement_value", 
                   "select_statement", "update_statement", "output_clause", 
                   "output_dml_list_elem", "output_column_name", "create_database", 
                   "create_index", "create_procedure", "procedure_param", 
                   "procedure_option", "create_statistics", "create_table", 
                   "create_view", "view_attribute", "alter_table", "alter_database", 
                   "database_optionspec", "auto_option", "change_tracking_option", 
                   "change_tracking_option_list", "containment_option", 
                   "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_view", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "constant_expression", 
                   "subquery", "with_expression", "common_table_expression", 
                   "update_elem", "search_condition_list", "search_condition", 
                   "predicate", "query_expression", "union_op", "query_specification", 
                   "top_clause", "order_by_clause", "fetch_expression", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item", "table_alias", "change_table", "join_type", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
                   "with_table_hints", "insert_with_table_hints", "table_hint", 
                   "index_value", "column_alias_list", "column_alias", "a_star", 
                   "table_value_constructor", "expression_list", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct", "over_clause", 
                   "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
                   "window_frame_preceding", "window_frame_following", "create_database_option", 
                   "database_filestream_option", "database_file_spec", "file_group", 
                   "file_spec", "full_table_name", "table_name", "simple_name", 
                   "func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "data_type", "default_value", 
                   "constant", "sign", "r_id", "simple_id", "comparison_operator", 
                   "assignment_operator", "file_size" ]

    EOF = Token.EOF
    HADR_options=1
    ADD=2
    ALL=3
    ALTER=4
    AND=5
    ANY=6
    AS=7
    ASC=8
    AUTHORIZATION=9
    BACKUP=10
    BEGIN=11
    BETWEEN=12
    BREAK=13
    BROWSE=14
    BULK=15
    BY=16
    CASCADE=17
    CASE=18
    CHANGETABLE=19
    CHANGES=20
    CHECK=21
    CHECKPOINT=22
    CLOSE=23
    CLUSTERED=24
    COALESCE=25
    COLLATE=26
    COLUMN=27
    COMMIT=28
    COMPUTE=29
    CONSTRAINT=30
    CONTAINMENT=31
    CONTAINS=32
    CONTAINSTABLE=33
    CONTINUE=34
    CONVERT=35
    CREATE=36
    CROSS=37
    CURRENT=38
    CURRENT_DATE=39
    CURRENT_TIME=40
    CURRENT_TIMESTAMP=41
    CURRENT_USER=42
    CURSOR=43
    DATABASE=44
    DBCC=45
    DEALLOCATE=46
    DECLARE=47
    DEFAULT=48
    DELETE=49
    DENY=50
    DESC=51
    DISK=52
    DISTINCT=53
    DISTRIBUTED=54
    DOUBLE=55
    DROP=56
    DUMP=57
    ELSE=58
    END=59
    ERRLVL=60
    ESCAPE=61
    EXCEPT=62
    EXECUTE=63
    EXISTS=64
    EXIT=65
    EXTERNAL=66
    FETCH=67
    FILE=68
    FILENAME=69
    FILLFACTOR=70
    FOR=71
    FORCESEEK=72
    FOREIGN=73
    FREETEXT=74
    FREETEXTTABLE=75
    FROM=76
    FULL=77
    FUNCTION=78
    GOTO=79
    GRANT=80
    GROUP=81
    HAVING=82
    IDENTITY=83
    IDENTITYCOL=84
    IDENTITY_INSERT=85
    IF=86
    IN=87
    INDEX=88
    INNER=89
    INSERT=90
    INTERSECT=91
    INTO=92
    IS=93
    JOIN=94
    KEY=95
    KILL=96
    LEFT=97
    LIKE=98
    LINENO=99
    LOAD=100
    LOG=101
    MERGE=102
    NATIONAL=103
    NOCHECK=104
    NONCLUSTERED=105
    NONE=106
    NOT=107
    NULL=108
    NULLIF=109
    OF=110
    OFF=111
    OFFSETS=112
    ON=113
    OPEN=114
    OPENDATASOURCE=115
    OPENQUERY=116
    OPENROWSET=117
    OPENXML=118
    OPTION=119
    OR=120
    ORDER=121
    OUTER=122
    OVER=123
    PARTIAL=124
    PERCENT=125
    PIVOT=126
    PLAN=127
    PRECISION=128
    PRIMARY=129
    PRINT=130
    PROC=131
    PROCEDURE=132
    PUBLIC=133
    RAISERROR=134
    READ=135
    READTEXT=136
    RECONFIGURE=137
    REFERENCES=138
    REPLICATION=139
    RESTORE=140
    RESTRICT=141
    RETURN=142
    REVERT=143
    REVOKE=144
    RIGHT=145
    ROLLBACK=146
    ROWCOUNT=147
    ROWGUIDCOL=148
    RULE=149
    SAVE=150
    SCHEMA=151
    SECURITYAUDIT=152
    SELECT=153
    SEMANTICKEYPHRASETABLE=154
    SEMANTICSIMILARITYDETAILSTABLE=155
    SEMANTICSIMILARITYTABLE=156
    SESSION_USER=157
    SET=158
    SETUSER=159
    SHUTDOWN=160
    SOME=161
    STATISTICS=162
    SYSTEM_USER=163
    TABLE=164
    TABLESAMPLE=165
    TEXTSIZE=166
    THEN=167
    TO=168
    TOP=169
    TRAN=170
    TRANSACTION=171
    TRIGGER=172
    TRUNCATE=173
    TRY_CONVERT=174
    TSEQUAL=175
    UNION=176
    UNIQUE=177
    UNPIVOT=178
    UPDATE=179
    UPDATETEXT=180
    USE=181
    USER=182
    VALUES=183
    VARYING=184
    VIEW=185
    WAITFOR=186
    WHEN=187
    WHERE=188
    WHILE=189
    WITH=190
    WITHIN=191
    WRITETEXT=192
    ABSOLUTE=193
    AFTER=194
    ALLOWED=195
    ALLOW_SNAPSHOT_ISOLATION=196
    ANSI_NULLS=197
    ANSI_NULL_DEFAULT=198
    ANSI_PADDING=199
    ANSI_WARNINGS=200
    APPLY=201
    ARITHABORT=202
    AUTO=203
    AUTO_CLEANUP=204
    AUTO_CLOSE=205
    AUTO_CREATE_STATISTICS=206
    AUTO_SHRINK=207
    AUTO_UPDATE_STATISTICS=208
    AUTO_UPDATE_STATISTICS_ASYNC=209
    AVG=210
    BASE64=211
    BINARY_CHECKSUM=212
    BULK_LOGGED=213
    CALLER=214
    CAST=215
    CATCH=216
    CHANGE_RETENTION=217
    CHANGE_TRACKING=218
    CHECKSUM=219
    CHECKSUM_AGG=220
    COMMITTED=221
    COMPATIBILITY_LEVEL=222
    CONCAT=223
    CONCAT_NULL_YIELDS_NULL=224
    CONTROL=225
    COOKIE=226
    COUNT=227
    COUNT_BIG=228
    CURSOR_CLOSE_ON_COMMIT=229
    CURSOR_DEFAULT=230
    DATEADD=231
    DATEDIFF=232
    DATENAME=233
    DATEPART=234
    DATE_CORRELATION_OPTIMIZATION=235
    DAYS=236
    DB_CHAINING=237
    DEFAULT_FULLTEXT_LANGUAGE=238
    DEFAULT_LANGUAGE=239
    DELAY=240
    DELAYED_DURABILITY=241
    DELETED=242
    DENSE_RANK=243
    DIRECTORY_NAME=244
    DISABLE=245
    DISABLED=246
    DISABLE_BROKER=247
    DYNAMIC=248
    EMERGENCY=249
    ENABLE_BROKER=250
    ENCRYPTION=251
    ERROR_BROKER_CONVERSATIONS=252
    EXPAND=253
    FAST=254
    FAST_FORWARD=255
    FILEGROUP=256
    FILEGROWTH=257
    FILESTREAM=258
    FIRST=259
    FOLLOWING=260
    FORCE=261
    FORCED=262
    FORWARD_ONLY=263
    FULLSCAN=264
    GB=265
    GLOBAL=266
    GO=267
    GROUPING=268
    GROUPING_ID=269
    HADR=270
    HASH=271
    HONOR_BROKER_PRIORITY=272
    HOURS=273
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=274
    IMMEDIATE=275
    IMPERSONATE=276
    INCREMENTAL=277
    INSENSITIVE=278
    INSERTED=279
    ISOLATION=280
    KB=281
    KEEP=282
    KEEPFIXED=283
    KEYSET=284
    LAST=285
    LEVEL=286
    LOCAL=287
    LOCK_ESCALATION=288
    LOGIN=289
    LOOP=290
    MARK=291
    MAX=292
    MAXDOP=293
    MAXRECURSION=294
    MAXSIZE=295
    MB=296
    MEMORY_OPTIMIZED_DATA=297
    MIN=298
    MINUTES=299
    MIN_ACTIVE_ROWVERSION=300
    MIXED_PAGE_ALLOCATION=301
    MODIFY=302
    MULTI_USER=303
    NAME=304
    NESTED_TRIGGERS=305
    NEW_BROKER=306
    NEXT=307
    NOCOUNT=308
    NOEXPAND=309
    NON_TRANSACTED_ACCESS=310
    NORECOMPUTE=311
    NO_WAIT=312
    NTILE=313
    NUMBER=314
    NUMERIC_ROUNDABORT=315
    OFFLINE=316
    OFFSET=317
    ONLINE=318
    ONLY=319
    OPTIMISTIC=320
    OPTIMIZE=321
    OUT=322
    OUTPUT=323
    OWNER=324
    PAGE_VERIFY=325
    PARAMETERIZATION=326
    PARTITION=327
    PATH=328
    PRECEDING=329
    PRIOR=330
    PRIVILEGES=331
    QUOTED_IDENTIFIER=332
    RANGE=333
    RANK=334
    READONLY=335
    READ_COMMITTED_SNAPSHOT=336
    READ_ONLY=337
    READ_WRITE=338
    RECOMPILE=339
    RECOVERY=340
    RECURSIVE_TRIGGERS=341
    RELATIVE=342
    REMOTE=343
    REPEATABLE=344
    RESTRICTED_USER=345
    ROBUST=346
    ROOT=347
    ROW=348
    ROWGUID=349
    ROWS=350
    ROW_NUMBER=351
    SAMPLE=352
    SCHEMABINDING=353
    SCROLL=354
    SCROLL_LOCKS=355
    SECONDS=356
    SELF=357
    SERIALIZABLE=358
    SHOWPLAN=359
    SIMPLE=360
    SINGLE_USER=361
    SIZE=362
    SNAPSHOT=363
    SPATIAL_WINDOW_MAX_CELLS=364
    STATIC=365
    STATS_STREAM=366
    STDEV=367
    STDEVP=368
    SUM=369
    TAKE=370
    TARGET_RECOVERY_TIME=371
    TB=372
    TEXTIMAGE_ON=373
    THROW=374
    TIES=375
    TIME=376
    TORN_PAGE_DETECTION=377
    TRANSFORM_NOISE_WORDS=378
    TRUSTWORTHY=379
    TRY=380
    TWO_DIGIT_YEAR_CUTOFF=381
    TYPE=382
    TYPE_WARNING=383
    UNBOUNDED=384
    UNCOMMITTED=385
    UNKNOWN=386
    UNLIMITED=387
    USING=388
    VAR=389
    VARP=390
    VIEWS=391
    VIEW_METADATA=392
    WORK=393
    XML=394
    XMLNAMESPACES=395
    DOLLAR_ACTION=396
    SPACE=397
    COMMENT=398
    LINE_COMMENT=399
    DOUBLE_QUOTE_ID=400
    SQUARE_BRACKET_ID=401
    LOCAL_ID=402
    DECIMAL=403
    ID=404
    STRING=405
    BINARY=406
    FLOAT=407
    REAL=408
    EQUAL=409
    GREATER=410
    LESS=411
    EXCLAMATION=412
    PLUS_ASSIGN=413
    MINUS_ASSIGN=414
    MULT_ASSIGN=415
    DIV_ASSIGN=416
    MOD_ASSIGN=417
    AND_ASSIGN=418
    XOR_ASSIGN=419
    OR_ASSIGN=420
    DOT=421
    UNDERLINE=422
    AT=423
    SHARP=424
    DOLLAR=425
    LR_BRACKET=426
    RR_BRACKET=427
    COMMA=428
    SEMI=429
    COLON=430
    STAR=431
    DIVIDE=432
    MODULE=433
    PLUS=434
    MINUS=435
    BIT_NOT=436
    BIT_OR=437
    BIT_AND=438
    BIT_XOR=439

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.6.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsql_file" ):
                return visitor.visitTsql_file(self)
            else:
                return visitor.visitChildren(self)




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)) | (1 << (tsqlParser.PRINT - 67)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.WAITFOR - 134)) | (1 << (tsqlParser.WHILE - 134)) | (1 << (tsqlParser.WITH - 134)) | (1 << (tsqlParser.ABSOLUTE - 134)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (tsqlParser.APPLY - 201)) | (1 << (tsqlParser.AUTO - 201)) | (1 << (tsqlParser.AVG - 201)) | (1 << (tsqlParser.BASE64 - 201)) | (1 << (tsqlParser.CALLER - 201)) | (1 << (tsqlParser.CAST - 201)) | (1 << (tsqlParser.CATCH - 201)) | (1 << (tsqlParser.CHECKSUM_AGG - 201)) | (1 << (tsqlParser.COMMITTED - 201)) | (1 << (tsqlParser.CONCAT - 201)) | (1 << (tsqlParser.CONTROL - 201)) | (1 << (tsqlParser.COOKIE - 201)) | (1 << (tsqlParser.COUNT - 201)) | (1 << (tsqlParser.COUNT_BIG - 201)) | (1 << (tsqlParser.DELAY - 201)) | (1 << (tsqlParser.DELETED - 201)) | (1 << (tsqlParser.DENSE_RANK - 201)) | (1 << (tsqlParser.DISABLE - 201)) | (1 << (tsqlParser.DYNAMIC - 201)) | (1 << (tsqlParser.ENCRYPTION - 201)) | (1 << (tsqlParser.EXPAND - 201)) | (1 << (tsqlParser.FAST - 201)) | (1 << (tsqlParser.FAST_FORWARD - 201)) | (1 << (tsqlParser.FIRST - 201)) | (1 << (tsqlParser.FOLLOWING - 201)) | (1 << (tsqlParser.FORCE - 201)) | (1 << (tsqlParser.FORCED - 201)) | (1 << (tsqlParser.FORWARD_ONLY - 201)) | (1 << (tsqlParser.FULLSCAN - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GO - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)) | (1 << (tsqlParser.MODIFY - 266)) | (1 << (tsqlParser.NAME - 266)) | (1 << (tsqlParser.NEXT - 266)) | (1 << (tsqlParser.NOCOUNT - 266)) | (1 << (tsqlParser.NOEXPAND - 266)) | (1 << (tsqlParser.NORECOMPUTE - 266)) | (1 << (tsqlParser.NTILE - 266)) | (1 << (tsqlParser.NUMBER - 266)) | (1 << (tsqlParser.OFFSET - 266)) | (1 << (tsqlParser.ONLINE - 266)) | (1 << (tsqlParser.ONLY - 266)) | (1 << (tsqlParser.OPTIMISTIC - 266)) | (1 << (tsqlParser.OPTIMIZE - 266)) | (1 << (tsqlParser.OUT - 266)) | (1 << (tsqlParser.OUTPUT - 266)) | (1 << (tsqlParser.OWNER - 266)) | (1 << (tsqlParser.PARAMETERIZATION - 266)) | (1 << (tsqlParser.PARTITION - 266)) | (1 << (tsqlParser.PATH - 266)) | (1 << (tsqlParser.PRECEDING - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (tsqlParser.PRIOR - 330)) | (1 << (tsqlParser.PRIVILEGES - 330)) | (1 << (tsqlParser.RANGE - 330)) | (1 << (tsqlParser.RANK - 330)) | (1 << (tsqlParser.READONLY - 330)) | (1 << (tsqlParser.READ_ONLY - 330)) | (1 << (tsqlParser.RECOMPILE - 330)) | (1 << (tsqlParser.RELATIVE - 330)) | (1 << (tsqlParser.REMOTE - 330)) | (1 << (tsqlParser.REPEATABLE - 330)) | (1 << (tsqlParser.ROBUST - 330)) | (1 << (tsqlParser.ROOT - 330)) | (1 << (tsqlParser.ROW - 330)) | (1 << (tsqlParser.ROWGUID - 330)) | (1 << (tsqlParser.ROWS - 330)) | (1 << (tsqlParser.ROW_NUMBER - 330)) | (1 << (tsqlParser.SAMPLE - 330)) | (1 << (tsqlParser.SCHEMABINDING - 330)) | (1 << (tsqlParser.SCROLL - 330)) | (1 << (tsqlParser.SCROLL_LOCKS - 330)) | (1 << (tsqlParser.SELF - 330)) | (1 << (tsqlParser.SERIALIZABLE - 330)) | (1 << (tsqlParser.SIMPLE - 330)) | (1 << (tsqlParser.SIZE - 330)) | (1 << (tsqlParser.SNAPSHOT - 330)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 330)) | (1 << (tsqlParser.STATIC - 330)) | (1 << (tsqlParser.STATS_STREAM - 330)) | (1 << (tsqlParser.STDEV - 330)) | (1 << (tsqlParser.STDEVP - 330)) | (1 << (tsqlParser.SUM - 330)) | (1 << (tsqlParser.TEXTIMAGE_ON - 330)) | (1 << (tsqlParser.THROW - 330)) | (1 << (tsqlParser.TIES - 330)) | (1 << (tsqlParser.TIME - 330)) | (1 << (tsqlParser.TRY - 330)) | (1 << (tsqlParser.TYPE - 330)) | (1 << (tsqlParser.TYPE_WARNING - 330)) | (1 << (tsqlParser.UNBOUNDED - 330)) | (1 << (tsqlParser.UNCOMMITTED - 330)) | (1 << (tsqlParser.UNKNOWN - 330)) | (1 << (tsqlParser.USING - 330)) | (1 << (tsqlParser.VAR - 330)) | (1 << (tsqlParser.VARP - 330)) | (1 << (tsqlParser.VIEWS - 330)) | (1 << (tsqlParser.VIEW_METADATA - 330)) | (1 << (tsqlParser.WORK - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (tsqlParser.XML - 394)) | (1 << (tsqlParser.XMLNAMESPACES - 394)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 394)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 394)) | (1 << (tsqlParser.ID - 394)) | (1 << (tsqlParser.LR_BRACKET - 394)))) != 0):
                self.state = 332
                self.batch()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self):
            return self.getTypedRuleContext(tsqlParser.Go_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBatch" ):
                return visitor.visitBatch(self)
            else:
                return visitor.visitChildren(self)




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.sql_clauses()
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 341
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clauses" ):
                return visitor.visitSql_clauses(self)
            else:
                return visitor.visitChildren(self)




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 344
                    self.sql_clause()
                    self.state = 346
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 345
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 350 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clause" ):
                return visitor.visitSql_clause(self)
            else:
                return visitor.visitChildren(self)




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 354
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_clause" ):
                return visitor.visitDml_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 361
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_clause" ):
                return visitor.visitDdl_clause(self)
            else:
                return visitor.visitChildren(self)




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 364
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 366
                self.create_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 367
                self.create_statistics()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 368
                self.create_table()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 369
                self.create_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 370
                self.create_view()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 371
                self.alter_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 372
                self.alter_database()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 373
                self.drop_index()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 374
                self.drop_procedure()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 375
                self.drop_statistics()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 376
                self.drop_table()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 377
                self.drop_type()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 378
                self.drop_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Return_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)


    class Break_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)


    class Try_catch_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext
            self.copyFrom(ctx)

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)
        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)
        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)
        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)
        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_catch_statement" ):
                return visitor.visitTry_catch_statement(self)
            else:
                return visitor.visitChildren(self)


    class Raiseerror_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.copyFrom(ctx)

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)
        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseerror_statement" ):
                return visitor.visitRaiseerror_statement(self)
            else:
                return visitor.visitChildren(self)


    class Print_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Waitfor_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_statement" ):
                return visitor.visitWaitfor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Block_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)
        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)


    class Throw_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)


    class Goto_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)


    class Continue_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)



    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        self._la = 0 # Token type
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.match(tsqlParser.BEGIN)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 382
                    self.match(tsqlParser.SEMI)


                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)) | (1 << (tsqlParser.PRINT - 67)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.WAITFOR - 134)) | (1 << (tsqlParser.WHILE - 134)) | (1 << (tsqlParser.WITH - 134)) | (1 << (tsqlParser.ABSOLUTE - 134)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (tsqlParser.APPLY - 201)) | (1 << (tsqlParser.AUTO - 201)) | (1 << (tsqlParser.AVG - 201)) | (1 << (tsqlParser.BASE64 - 201)) | (1 << (tsqlParser.CALLER - 201)) | (1 << (tsqlParser.CAST - 201)) | (1 << (tsqlParser.CATCH - 201)) | (1 << (tsqlParser.CHECKSUM_AGG - 201)) | (1 << (tsqlParser.COMMITTED - 201)) | (1 << (tsqlParser.CONCAT - 201)) | (1 << (tsqlParser.CONTROL - 201)) | (1 << (tsqlParser.COOKIE - 201)) | (1 << (tsqlParser.COUNT - 201)) | (1 << (tsqlParser.COUNT_BIG - 201)) | (1 << (tsqlParser.DELAY - 201)) | (1 << (tsqlParser.DELETED - 201)) | (1 << (tsqlParser.DENSE_RANK - 201)) | (1 << (tsqlParser.DISABLE - 201)) | (1 << (tsqlParser.DYNAMIC - 201)) | (1 << (tsqlParser.ENCRYPTION - 201)) | (1 << (tsqlParser.EXPAND - 201)) | (1 << (tsqlParser.FAST - 201)) | (1 << (tsqlParser.FAST_FORWARD - 201)) | (1 << (tsqlParser.FIRST - 201)) | (1 << (tsqlParser.FOLLOWING - 201)) | (1 << (tsqlParser.FORCE - 201)) | (1 << (tsqlParser.FORCED - 201)) | (1 << (tsqlParser.FORWARD_ONLY - 201)) | (1 << (tsqlParser.FULLSCAN - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GO - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)) | (1 << (tsqlParser.MODIFY - 266)) | (1 << (tsqlParser.NAME - 266)) | (1 << (tsqlParser.NEXT - 266)) | (1 << (tsqlParser.NOCOUNT - 266)) | (1 << (tsqlParser.NOEXPAND - 266)) | (1 << (tsqlParser.NORECOMPUTE - 266)) | (1 << (tsqlParser.NTILE - 266)) | (1 << (tsqlParser.NUMBER - 266)) | (1 << (tsqlParser.OFFSET - 266)) | (1 << (tsqlParser.ONLINE - 266)) | (1 << (tsqlParser.ONLY - 266)) | (1 << (tsqlParser.OPTIMISTIC - 266)) | (1 << (tsqlParser.OPTIMIZE - 266)) | (1 << (tsqlParser.OUT - 266)) | (1 << (tsqlParser.OUTPUT - 266)) | (1 << (tsqlParser.OWNER - 266)) | (1 << (tsqlParser.PARAMETERIZATION - 266)) | (1 << (tsqlParser.PARTITION - 266)) | (1 << (tsqlParser.PATH - 266)) | (1 << (tsqlParser.PRECEDING - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (tsqlParser.PRIOR - 330)) | (1 << (tsqlParser.PRIVILEGES - 330)) | (1 << (tsqlParser.RANGE - 330)) | (1 << (tsqlParser.RANK - 330)) | (1 << (tsqlParser.READONLY - 330)) | (1 << (tsqlParser.READ_ONLY - 330)) | (1 << (tsqlParser.RECOMPILE - 330)) | (1 << (tsqlParser.RELATIVE - 330)) | (1 << (tsqlParser.REMOTE - 330)) | (1 << (tsqlParser.REPEATABLE - 330)) | (1 << (tsqlParser.ROBUST - 330)) | (1 << (tsqlParser.ROOT - 330)) | (1 << (tsqlParser.ROW - 330)) | (1 << (tsqlParser.ROWGUID - 330)) | (1 << (tsqlParser.ROWS - 330)) | (1 << (tsqlParser.ROW_NUMBER - 330)) | (1 << (tsqlParser.SAMPLE - 330)) | (1 << (tsqlParser.SCHEMABINDING - 330)) | (1 << (tsqlParser.SCROLL - 330)) | (1 << (tsqlParser.SCROLL_LOCKS - 330)) | (1 << (tsqlParser.SELF - 330)) | (1 << (tsqlParser.SERIALIZABLE - 330)) | (1 << (tsqlParser.SIMPLE - 330)) | (1 << (tsqlParser.SIZE - 330)) | (1 << (tsqlParser.SNAPSHOT - 330)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 330)) | (1 << (tsqlParser.STATIC - 330)) | (1 << (tsqlParser.STATS_STREAM - 330)) | (1 << (tsqlParser.STDEV - 330)) | (1 << (tsqlParser.STDEVP - 330)) | (1 << (tsqlParser.SUM - 330)) | (1 << (tsqlParser.TEXTIMAGE_ON - 330)) | (1 << (tsqlParser.THROW - 330)) | (1 << (tsqlParser.TIES - 330)) | (1 << (tsqlParser.TIME - 330)) | (1 << (tsqlParser.TRY - 330)) | (1 << (tsqlParser.TYPE - 330)) | (1 << (tsqlParser.TYPE_WARNING - 330)) | (1 << (tsqlParser.UNBOUNDED - 330)) | (1 << (tsqlParser.UNCOMMITTED - 330)) | (1 << (tsqlParser.UNKNOWN - 330)) | (1 << (tsqlParser.USING - 330)) | (1 << (tsqlParser.VAR - 330)) | (1 << (tsqlParser.VARP - 330)) | (1 << (tsqlParser.VIEWS - 330)) | (1 << (tsqlParser.VIEW_METADATA - 330)) | (1 << (tsqlParser.WORK - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (tsqlParser.XML - 394)) | (1 << (tsqlParser.XMLNAMESPACES - 394)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 394)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 394)) | (1 << (tsqlParser.ID - 394)) | (1 << (tsqlParser.LR_BRACKET - 394)))) != 0):
                    self.state = 385
                    self.sql_clauses()


                self.state = 388
                self.match(tsqlParser.END)
                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                localctx = tsqlParser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.match(tsqlParser.BREAK)
                self.state = 394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                localctx = tsqlParser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 396
                self.match(tsqlParser.CONTINUE)
                self.state = 398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 400
                self.match(tsqlParser.GOTO)
                self.state = 401
                self.r_id()
                self.state = 403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 402
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 405
                self.r_id()
                self.state = 406
                self.match(tsqlParser.COLON)
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 407
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                localctx = tsqlParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 410
                self.match(tsqlParser.IF)
                self.state = 411
                self.search_condition(0)
                self.state = 412
                self.sql_clause()
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 413
                    self.match(tsqlParser.ELSE)
                    self.state = 414
                    self.sql_clause()


                self.state = 418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 417
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                localctx = tsqlParser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 420
                self.match(tsqlParser.RETURN)
                self.state = 422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self.expression(0)


                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Throw_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 427
                self.match(tsqlParser.THROW)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                    self.state = 428
                    localctx.error_number = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.error_number = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 429
                    self.match(tsqlParser.COMMA)
                    self.state = 430
                    localctx.message = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                        localctx.message = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 431
                    self.match(tsqlParser.COMMA)
                    self.state = 432
                    localctx.state = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.state = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 9:
                localctx = tsqlParser.Try_catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 438
                self.match(tsqlParser.BEGIN)
                self.state = 439
                self.match(tsqlParser.TRY)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 440
                    self.match(tsqlParser.SEMI)


                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)) | (1 << (tsqlParser.PRINT - 67)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.WAITFOR - 134)) | (1 << (tsqlParser.WHILE - 134)) | (1 << (tsqlParser.WITH - 134)) | (1 << (tsqlParser.ABSOLUTE - 134)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (tsqlParser.APPLY - 201)) | (1 << (tsqlParser.AUTO - 201)) | (1 << (tsqlParser.AVG - 201)) | (1 << (tsqlParser.BASE64 - 201)) | (1 << (tsqlParser.CALLER - 201)) | (1 << (tsqlParser.CAST - 201)) | (1 << (tsqlParser.CATCH - 201)) | (1 << (tsqlParser.CHECKSUM_AGG - 201)) | (1 << (tsqlParser.COMMITTED - 201)) | (1 << (tsqlParser.CONCAT - 201)) | (1 << (tsqlParser.CONTROL - 201)) | (1 << (tsqlParser.COOKIE - 201)) | (1 << (tsqlParser.COUNT - 201)) | (1 << (tsqlParser.COUNT_BIG - 201)) | (1 << (tsqlParser.DELAY - 201)) | (1 << (tsqlParser.DELETED - 201)) | (1 << (tsqlParser.DENSE_RANK - 201)) | (1 << (tsqlParser.DISABLE - 201)) | (1 << (tsqlParser.DYNAMIC - 201)) | (1 << (tsqlParser.ENCRYPTION - 201)) | (1 << (tsqlParser.EXPAND - 201)) | (1 << (tsqlParser.FAST - 201)) | (1 << (tsqlParser.FAST_FORWARD - 201)) | (1 << (tsqlParser.FIRST - 201)) | (1 << (tsqlParser.FOLLOWING - 201)) | (1 << (tsqlParser.FORCE - 201)) | (1 << (tsqlParser.FORCED - 201)) | (1 << (tsqlParser.FORWARD_ONLY - 201)) | (1 << (tsqlParser.FULLSCAN - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GO - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)) | (1 << (tsqlParser.MODIFY - 266)) | (1 << (tsqlParser.NAME - 266)) | (1 << (tsqlParser.NEXT - 266)) | (1 << (tsqlParser.NOCOUNT - 266)) | (1 << (tsqlParser.NOEXPAND - 266)) | (1 << (tsqlParser.NORECOMPUTE - 266)) | (1 << (tsqlParser.NTILE - 266)) | (1 << (tsqlParser.NUMBER - 266)) | (1 << (tsqlParser.OFFSET - 266)) | (1 << (tsqlParser.ONLINE - 266)) | (1 << (tsqlParser.ONLY - 266)) | (1 << (tsqlParser.OPTIMISTIC - 266)) | (1 << (tsqlParser.OPTIMIZE - 266)) | (1 << (tsqlParser.OUT - 266)) | (1 << (tsqlParser.OUTPUT - 266)) | (1 << (tsqlParser.OWNER - 266)) | (1 << (tsqlParser.PARAMETERIZATION - 266)) | (1 << (tsqlParser.PARTITION - 266)) | (1 << (tsqlParser.PATH - 266)) | (1 << (tsqlParser.PRECEDING - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (tsqlParser.PRIOR - 330)) | (1 << (tsqlParser.PRIVILEGES - 330)) | (1 << (tsqlParser.RANGE - 330)) | (1 << (tsqlParser.RANK - 330)) | (1 << (tsqlParser.READONLY - 330)) | (1 << (tsqlParser.READ_ONLY - 330)) | (1 << (tsqlParser.RECOMPILE - 330)) | (1 << (tsqlParser.RELATIVE - 330)) | (1 << (tsqlParser.REMOTE - 330)) | (1 << (tsqlParser.REPEATABLE - 330)) | (1 << (tsqlParser.ROBUST - 330)) | (1 << (tsqlParser.ROOT - 330)) | (1 << (tsqlParser.ROW - 330)) | (1 << (tsqlParser.ROWGUID - 330)) | (1 << (tsqlParser.ROWS - 330)) | (1 << (tsqlParser.ROW_NUMBER - 330)) | (1 << (tsqlParser.SAMPLE - 330)) | (1 << (tsqlParser.SCHEMABINDING - 330)) | (1 << (tsqlParser.SCROLL - 330)) | (1 << (tsqlParser.SCROLL_LOCKS - 330)) | (1 << (tsqlParser.SELF - 330)) | (1 << (tsqlParser.SERIALIZABLE - 330)) | (1 << (tsqlParser.SIMPLE - 330)) | (1 << (tsqlParser.SIZE - 330)) | (1 << (tsqlParser.SNAPSHOT - 330)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 330)) | (1 << (tsqlParser.STATIC - 330)) | (1 << (tsqlParser.STATS_STREAM - 330)) | (1 << (tsqlParser.STDEV - 330)) | (1 << (tsqlParser.STDEVP - 330)) | (1 << (tsqlParser.SUM - 330)) | (1 << (tsqlParser.TEXTIMAGE_ON - 330)) | (1 << (tsqlParser.THROW - 330)) | (1 << (tsqlParser.TIES - 330)) | (1 << (tsqlParser.TIME - 330)) | (1 << (tsqlParser.TRY - 330)) | (1 << (tsqlParser.TYPE - 330)) | (1 << (tsqlParser.TYPE_WARNING - 330)) | (1 << (tsqlParser.UNBOUNDED - 330)) | (1 << (tsqlParser.UNCOMMITTED - 330)) | (1 << (tsqlParser.UNKNOWN - 330)) | (1 << (tsqlParser.USING - 330)) | (1 << (tsqlParser.VAR - 330)) | (1 << (tsqlParser.VARP - 330)) | (1 << (tsqlParser.VIEWS - 330)) | (1 << (tsqlParser.VIEW_METADATA - 330)) | (1 << (tsqlParser.WORK - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (tsqlParser.XML - 394)) | (1 << (tsqlParser.XMLNAMESPACES - 394)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 394)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 394)) | (1 << (tsqlParser.ID - 394)) | (1 << (tsqlParser.LR_BRACKET - 394)))) != 0):
                    self.state = 443
                    localctx.try_clauses = self.sql_clauses()


                self.state = 446
                self.match(tsqlParser.END)
                self.state = 447
                self.match(tsqlParser.TRY)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 448
                    self.match(tsqlParser.SEMI)


                self.state = 451
                self.match(tsqlParser.BEGIN)
                self.state = 452
                self.match(tsqlParser.CATCH)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 453
                    self.match(tsqlParser.SEMI)


                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (tsqlParser.FETCH - 67)) | (1 << (tsqlParser.FORCESEEK - 67)) | (1 << (tsqlParser.GOTO - 67)) | (1 << (tsqlParser.GRANT - 67)) | (1 << (tsqlParser.IF - 67)) | (1 << (tsqlParser.INSERT - 67)) | (1 << (tsqlParser.OPEN - 67)) | (1 << (tsqlParser.PRINT - 67)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.WAITFOR - 134)) | (1 << (tsqlParser.WHILE - 134)) | (1 << (tsqlParser.WITH - 134)) | (1 << (tsqlParser.ABSOLUTE - 134)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (tsqlParser.APPLY - 201)) | (1 << (tsqlParser.AUTO - 201)) | (1 << (tsqlParser.AVG - 201)) | (1 << (tsqlParser.BASE64 - 201)) | (1 << (tsqlParser.CALLER - 201)) | (1 << (tsqlParser.CAST - 201)) | (1 << (tsqlParser.CATCH - 201)) | (1 << (tsqlParser.CHECKSUM_AGG - 201)) | (1 << (tsqlParser.COMMITTED - 201)) | (1 << (tsqlParser.CONCAT - 201)) | (1 << (tsqlParser.CONTROL - 201)) | (1 << (tsqlParser.COOKIE - 201)) | (1 << (tsqlParser.COUNT - 201)) | (1 << (tsqlParser.COUNT_BIG - 201)) | (1 << (tsqlParser.DELAY - 201)) | (1 << (tsqlParser.DELETED - 201)) | (1 << (tsqlParser.DENSE_RANK - 201)) | (1 << (tsqlParser.DISABLE - 201)) | (1 << (tsqlParser.DYNAMIC - 201)) | (1 << (tsqlParser.ENCRYPTION - 201)) | (1 << (tsqlParser.EXPAND - 201)) | (1 << (tsqlParser.FAST - 201)) | (1 << (tsqlParser.FAST_FORWARD - 201)) | (1 << (tsqlParser.FIRST - 201)) | (1 << (tsqlParser.FOLLOWING - 201)) | (1 << (tsqlParser.FORCE - 201)) | (1 << (tsqlParser.FORCED - 201)) | (1 << (tsqlParser.FORWARD_ONLY - 201)) | (1 << (tsqlParser.FULLSCAN - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GO - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)) | (1 << (tsqlParser.MODIFY - 266)) | (1 << (tsqlParser.NAME - 266)) | (1 << (tsqlParser.NEXT - 266)) | (1 << (tsqlParser.NOCOUNT - 266)) | (1 << (tsqlParser.NOEXPAND - 266)) | (1 << (tsqlParser.NORECOMPUTE - 266)) | (1 << (tsqlParser.NTILE - 266)) | (1 << (tsqlParser.NUMBER - 266)) | (1 << (tsqlParser.OFFSET - 266)) | (1 << (tsqlParser.ONLINE - 266)) | (1 << (tsqlParser.ONLY - 266)) | (1 << (tsqlParser.OPTIMISTIC - 266)) | (1 << (tsqlParser.OPTIMIZE - 266)) | (1 << (tsqlParser.OUT - 266)) | (1 << (tsqlParser.OUTPUT - 266)) | (1 << (tsqlParser.OWNER - 266)) | (1 << (tsqlParser.PARAMETERIZATION - 266)) | (1 << (tsqlParser.PARTITION - 266)) | (1 << (tsqlParser.PATH - 266)) | (1 << (tsqlParser.PRECEDING - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (tsqlParser.PRIOR - 330)) | (1 << (tsqlParser.PRIVILEGES - 330)) | (1 << (tsqlParser.RANGE - 330)) | (1 << (tsqlParser.RANK - 330)) | (1 << (tsqlParser.READONLY - 330)) | (1 << (tsqlParser.READ_ONLY - 330)) | (1 << (tsqlParser.RECOMPILE - 330)) | (1 << (tsqlParser.RELATIVE - 330)) | (1 << (tsqlParser.REMOTE - 330)) | (1 << (tsqlParser.REPEATABLE - 330)) | (1 << (tsqlParser.ROBUST - 330)) | (1 << (tsqlParser.ROOT - 330)) | (1 << (tsqlParser.ROW - 330)) | (1 << (tsqlParser.ROWGUID - 330)) | (1 << (tsqlParser.ROWS - 330)) | (1 << (tsqlParser.ROW_NUMBER - 330)) | (1 << (tsqlParser.SAMPLE - 330)) | (1 << (tsqlParser.SCHEMABINDING - 330)) | (1 << (tsqlParser.SCROLL - 330)) | (1 << (tsqlParser.SCROLL_LOCKS - 330)) | (1 << (tsqlParser.SELF - 330)) | (1 << (tsqlParser.SERIALIZABLE - 330)) | (1 << (tsqlParser.SIMPLE - 330)) | (1 << (tsqlParser.SIZE - 330)) | (1 << (tsqlParser.SNAPSHOT - 330)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 330)) | (1 << (tsqlParser.STATIC - 330)) | (1 << (tsqlParser.STATS_STREAM - 330)) | (1 << (tsqlParser.STDEV - 330)) | (1 << (tsqlParser.STDEVP - 330)) | (1 << (tsqlParser.SUM - 330)) | (1 << (tsqlParser.TEXTIMAGE_ON - 330)) | (1 << (tsqlParser.THROW - 330)) | (1 << (tsqlParser.TIES - 330)) | (1 << (tsqlParser.TIME - 330)) | (1 << (tsqlParser.TRY - 330)) | (1 << (tsqlParser.TYPE - 330)) | (1 << (tsqlParser.TYPE_WARNING - 330)) | (1 << (tsqlParser.UNBOUNDED - 330)) | (1 << (tsqlParser.UNCOMMITTED - 330)) | (1 << (tsqlParser.UNKNOWN - 330)) | (1 << (tsqlParser.USING - 330)) | (1 << (tsqlParser.VAR - 330)) | (1 << (tsqlParser.VARP - 330)) | (1 << (tsqlParser.VIEWS - 330)) | (1 << (tsqlParser.VIEW_METADATA - 330)) | (1 << (tsqlParser.WORK - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (tsqlParser.XML - 394)) | (1 << (tsqlParser.XMLNAMESPACES - 394)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 394)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 394)) | (1 << (tsqlParser.ID - 394)) | (1 << (tsqlParser.LR_BRACKET - 394)))) != 0):
                    self.state = 456
                    localctx.catch_clauses = self.sql_clauses()


                self.state = 459
                self.match(tsqlParser.END)
                self.state = 460
                self.match(tsqlParser.CATCH)
                self.state = 462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 10:
                localctx = tsqlParser.Waitfor_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 464
                self.match(tsqlParser.WAITFOR)
                self.state = 465
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 466
                self.expression(0)
                self.state = 468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 467
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 11:
                localctx = tsqlParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 470
                self.match(tsqlParser.WHILE)
                self.state = 471
                self.search_condition(0)
                self.state = 481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self.sql_clause()
                    pass

                elif la_ == 2:
                    self.state = 473
                    self.match(tsqlParser.BREAK)
                    self.state = 475
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 474
                        self.match(tsqlParser.SEMI)


                    pass

                elif la_ == 3:
                    self.state = 477
                    self.match(tsqlParser.CONTINUE)
                    self.state = 479
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 478
                        self.match(tsqlParser.SEMI)


                    pass


                pass

            elif la_ == 12:
                localctx = tsqlParser.Print_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 483
                self.match(tsqlParser.PRINT)
                self.state = 484
                self.expression(0)
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 485
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 13:
                localctx = tsqlParser.Raiseerror_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 488
                self.match(tsqlParser.RAISERROR)
                self.state = 489
                self.match(tsqlParser.LR_BRACKET)
                self.state = 490
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 402)) & ~0x3f) == 0 and ((1 << (_la - 402)) & ((1 << (tsqlParser.LOCAL_ID - 402)) | (1 << (tsqlParser.DECIMAL - 402)) | (1 << (tsqlParser.STRING - 402)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 491
                self.match(tsqlParser.COMMA)
                self.state = 492
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 493
                self.match(tsqlParser.COMMA)
                self.state = 494
                localctx.state = self.constant_LOCAL_ID()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 495
                    self.match(tsqlParser.COMMA)
                    self.state = 496
                    self.constant_LOCAL_ID()
                    self.state = 501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 502
                self.match(tsqlParser.RR_BRACKET)
                self.state = 504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 503
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnother_statement" ):
                return visitor.visitAnother_statement(self)
            else:
                return visitor.visitChildren(self)




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_another_statement)
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 511
                self.security_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.set_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.transaction_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 514
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 517
                self.with_expression()


            self.state = 520
            self.match(tsqlParser.DELETE)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 521
                self.match(tsqlParser.TOP)
                self.state = 522
                self.match(tsqlParser.LR_BRACKET)
                self.state = 523
                self.expression(0)
                self.state = 524
                self.match(tsqlParser.RR_BRACKET)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 525
                    self.match(tsqlParser.PERCENT)




            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 530
                self.match(tsqlParser.FROM)


            self.state = 533
            self.delete_statement_from()
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 534
                self.insert_with_table_hints()


            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 537
                self.output_clause()


            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 540
                self.match(tsqlParser.FROM)
                self.state = 541
                self.table_sources()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 544
                self.match(tsqlParser.WHERE)
                self.state = 555
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 545
                    self.search_condition(0)
                    pass
                elif token in [tsqlParser.CURRENT]:
                    self.state = 546
                    self.match(tsqlParser.CURRENT)
                    self.state = 547
                    self.match(tsqlParser.OF)
                    self.state = 553
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        self.state = 549
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                        if la_ == 1:
                            self.state = 548
                            self.match(tsqlParser.GLOBAL)


                        self.state = 551
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 552
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 559
                self.for_clause()


            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 562
                self.option_clause()


            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 565
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_from" ):
                return visitor.visitDelete_statement_from(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_delete_statement_from)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.r_id()
                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.with_table_hints()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 574
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 577
                self.with_expression()


            self.state = 580
            self.match(tsqlParser.INSERT)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 581
                self.match(tsqlParser.TOP)
                self.state = 582
                self.match(tsqlParser.LR_BRACKET)
                self.state = 583
                self.expression(0)
                self.state = 584
                self.match(tsqlParser.RR_BRACKET)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 585
                    self.match(tsqlParser.PERCENT)




            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 590
                self.match(tsqlParser.INTO)


            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 593
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 594
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 597
                self.insert_with_table_hints()


            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 600
                self.match(tsqlParser.LR_BRACKET)
                self.state = 601
                self.column_name_list()
                self.state = 602
                self.match(tsqlParser.RR_BRACKET)


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 606
                self.output_clause()


            self.state = 609
            self.insert_statement_value()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 610
                self.for_clause()


            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 613
                self.option_clause()


            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement_value" ):
                return visitor.visitInsert_statement_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insert_statement_value)
        try:
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.derived_table()
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.execute_statement()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.match(tsqlParser.DEFAULT)
                self.state = 623
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 626
                self.with_expression()


            self.state = 629
            self.query_expression(0)
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 630
                self.order_by_clause()


            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 633
                self.for_clause()


            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 636
                self.option_clause()


            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 639
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 642
                self.with_expression()


            self.state = 645
            self.match(tsqlParser.UPDATE)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 646
                self.match(tsqlParser.TOP)
                self.state = 647
                self.match(tsqlParser.LR_BRACKET)
                self.state = 648
                self.expression(0)
                self.state = 649
                self.match(tsqlParser.RR_BRACKET)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 650
                    self.match(tsqlParser.PERCENT)




            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 655
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 656
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 659
                self.with_table_hints()


            self.state = 662
            self.match(tsqlParser.SET)
            self.state = 663
            self.update_elem()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 664
                self.match(tsqlParser.COMMA)
                self.state = 665
                self.update_elem()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 671
                self.output_clause()


            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 674
                self.match(tsqlParser.FROM)
                self.state = 675
                self.table_sources()


            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 678
                self.match(tsqlParser.WHERE)
                self.state = 689
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 679
                    self.search_condition_list()
                    pass
                elif token in [tsqlParser.CURRENT]:
                    self.state = 680
                    self.match(tsqlParser.CURRENT)
                    self.state = 681
                    self.match(tsqlParser.OF)
                    self.state = 687
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 683
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                        if la_ == 1:
                            self.state = 682
                            self.match(tsqlParser.GLOBAL)


                        self.state = 685
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 686
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 693
                self.for_clause()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 696
                self.option_clause()


            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 699
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_clause" ):
                return visitor.visitOutput_clause(self)
            else:
                return visitor.visitChildren(self)




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(tsqlParser.OUTPUT)
            self.state = 703
            self.output_dml_list_elem()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 704
                self.match(tsqlParser.COMMA)
                self.state = 705
                self.output_dml_list_elem()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 711
                self.match(tsqlParser.INTO)
                self.state = 714
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 712
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 713
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 716
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 717
                    self.column_name_list()
                    self.state = 718
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_dml_list_elem" ):
                return visitor.visitOutput_dml_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 724
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 725
                self.expression(0)
                pass


            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 728
                    self.match(tsqlParser.AS)


                self.state = 731
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_column_name" ):
                return visitor.visitOutput_column_name(self)
            else:
                return visitor.visitChildren(self)




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_output_column_name)
        try:
            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 735
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 736
                    self.table_name()
                    pass


                self.state = 739
                self.match(tsqlParser.DOT)
                self.state = 742
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 740
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 741
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.collation_name = None # R_idContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database" ):
                return visitor.visitCreate_database(self)
            else:
                return visitor.visitChildren(self)




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(tsqlParser.CREATE)
            self.state = 748
            self.match(tsqlParser.DATABASE)

            self.state = 749
            localctx.database = self.r_id()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 750
                self.match(tsqlParser.CONTAINMENT)
                self.state = 751
                self.match(tsqlParser.EQUAL)
                self.state = 752
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 755
                self.match(tsqlParser.ON)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 756
                    self.match(tsqlParser.PRIMARY)


                self.state = 759
                self.database_file_spec()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 760
                    self.match(tsqlParser.COMMA)
                    self.state = 761
                    self.database_file_spec()
                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 769
                self.match(tsqlParser.LOG)
                self.state = 770
                self.match(tsqlParser.ON)
                self.state = 771
                self.database_file_spec()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 772
                    self.match(tsqlParser.COMMA)
                    self.state = 773
                    self.database_file_spec()
                    self.state = 778
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 781
                self.match(tsqlParser.COLLATE)
                self.state = 782
                localctx.collation_name = self.r_id()


            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 785
                self.match(tsqlParser.WITH)
                self.state = 786
                self.create_database_option()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 787
                    self.match(tsqlParser.COMMA)
                    self.state = 788
                    self.create_database_option()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(tsqlParser.CREATE)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 797
                self.match(tsqlParser.UNIQUE)


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 800
                self.clustered()


            self.state = 803
            self.match(tsqlParser.INDEX)
            self.state = 804
            self.r_id()
            self.state = 805
            self.match(tsqlParser.ON)
            self.state = 806
            self.table_name_with_hint()
            self.state = 807
            self.match(tsqlParser.LR_BRACKET)
            self.state = 808
            self.column_name_list()
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 809
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 812
            self.match(tsqlParser.RR_BRACKET)
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 813
                self.index_options()


            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 816
                self.match(tsqlParser.ON)
                self.state = 817
                self.r_id()


            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 820
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure" ):
                listener.enterCreate_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure" ):
                listener.exitCreate_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure" ):
                return visitor.visitCreate_procedure(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure(self):

        localctx = tsqlParser.Create_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(tsqlParser.CREATE)
            self.state = 824
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 825
            self.func_proc_name()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 826
                self.match(tsqlParser.SEMI)
                self.state = 827
                self.match(tsqlParser.DECIMAL)


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 830
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 833
                self.procedure_param()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 834
                    self.match(tsqlParser.COMMA)
                    self.state = 835
                    self.procedure_param()
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 841
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 846
                self.match(tsqlParser.WITH)
                self.state = 847
                self.procedure_option()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 848
                    self.match(tsqlParser.COMMA)
                    self.state = 849
                    self.procedure_option()
                    self.state = 854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 857
                self.match(tsqlParser.FOR)
                self.state = 858
                self.match(tsqlParser.REPLICATION)


            self.state = 861
            self.match(tsqlParser.AS)
            self.state = 862
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_param" ):
                return visitor.visitProcedure_param(self)
            else:
                return visitor.visitChildren(self)




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(tsqlParser.LOCAL_ID)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 865
                self.r_id()
                self.state = 866
                self.match(tsqlParser.DOT)


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 870
                self.match(tsqlParser.AS)


            self.state = 873
            self.data_type()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 874
                self.match(tsqlParser.VARYING)


            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 877
                self.match(tsqlParser.EQUAL)
                self.state = 878
                localctx.default_val = self.default_value()


            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (tsqlParser.OUT - 322)) | (1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.READONLY - 322)))) != 0):
                self.state = 881
                _la = self._input.LA(1)
                if not(((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (tsqlParser.OUT - 322)) | (1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.READONLY - 322)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_option" ):
                return visitor.visitProcedure_option(self)
            else:
                return visitor.visitChildren(self)




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_procedure_option)
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_statistics" ):
                return visitor.visitCreate_statistics(self)
            else:
                return visitor.visitChildren(self)




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(tsqlParser.CREATE)
            self.state = 890
            self.match(tsqlParser.STATISTICS)
            self.state = 891
            self.r_id()
            self.state = 892
            self.match(tsqlParser.ON)
            self.state = 893
            self.table_name_with_hint()
            self.state = 894
            self.match(tsqlParser.LR_BRACKET)
            self.state = 895
            self.column_name_list()
            self.state = 896
            self.match(tsqlParser.RR_BRACKET)
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 897
                self.match(tsqlParser.WITH)
                self.state = 903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 898
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [tsqlParser.SAMPLE]:
                    self.state = 899
                    self.match(tsqlParser.SAMPLE)
                    self.state = 900
                    self.match(tsqlParser.DECIMAL)
                    self.state = 901
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 902
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(tsqlParser.COMMA)
                    self.state = 906
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 909
                    self.match(tsqlParser.COMMA)
                    self.state = 910
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 911
                    self.match(tsqlParser.EQUAL)
                    self.state = 912
                    self.on_off()




            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(tsqlParser.CREATE)
            self.state = 921
            self.match(tsqlParser.TABLE)
            self.state = 922
            self.table_name()
            self.state = 923
            self.match(tsqlParser.LR_BRACKET)
            self.state = 924
            self.column_def_table_constraints()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 925
                self.match(tsqlParser.COMMA)


            self.state = 928
            self.match(tsqlParser.RR_BRACKET)
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 929
                self.match(tsqlParser.ON)
                self.state = 930
                self.r_id()

            elif la_ == 2:
                self.state = 931
                self.match(tsqlParser.DEFAULT)


            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 934
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 935
                self.r_id()

            elif la_ == 2:
                self.state = 936
                self.match(tsqlParser.DEFAULT)


            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 939
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view" ):
                return visitor.visitCreate_view(self)
            else:
                return visitor.visitChildren(self)




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(tsqlParser.CREATE)
            self.state = 943
            self.match(tsqlParser.VIEW)
            self.state = 944
            self.simple_name()
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 945
                self.match(tsqlParser.LR_BRACKET)
                self.state = 946
                self.column_name_list()
                self.state = 947
                self.match(tsqlParser.RR_BRACKET)


            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 951
                self.match(tsqlParser.WITH)
                self.state = 952
                self.view_attribute()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 953
                    self.match(tsqlParser.COMMA)
                    self.state = 954
                    self.view_attribute()
                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 962
            self.match(tsqlParser.AS)
            self.state = 963
            self.select_statement()
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 964
                self.match(tsqlParser.WITH)
                self.state = 965
                self.match(tsqlParser.CHECK)
                self.state = 966
                self.match(tsqlParser.OPTION)


            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 969
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_attribute" ):
                return visitor.visitView_attribute(self)
            else:
                return visitor.visitChildren(self)




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(tsqlParser.ALTER)
            self.state = 975
            self.match(tsqlParser.TABLE)
            self.state = 976
            self.table_name()
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 977
                self.match(tsqlParser.SET)
                self.state = 978
                self.match(tsqlParser.LR_BRACKET)
                self.state = 979
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 980
                self.match(tsqlParser.EQUAL)
                self.state = 981
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 982
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.ADD]:
                self.state = 983
                self.match(tsqlParser.ADD)
                self.state = 984
                self.column_def_table_constraint()
                pass
            elif token in [tsqlParser.DROP]:
                self.state = 985
                self.match(tsqlParser.DROP)
                self.state = 986
                self.match(tsqlParser.CONSTRAINT)
                self.state = 987
                localctx.constraint = self.r_id()
                pass
            elif token in [tsqlParser.WITH]:
                self.state = 988
                self.match(tsqlParser.WITH)
                self.state = 989
                self.match(tsqlParser.CHECK)
                self.state = 990
                self.match(tsqlParser.ADD)
                self.state = 991
                self.match(tsqlParser.CONSTRAINT)
                self.state = 992
                localctx.constraint = self.r_id()
                self.state = 993
                self.match(tsqlParser.FOREIGN)
                self.state = 994
                self.match(tsqlParser.KEY)
                self.state = 995
                self.match(tsqlParser.LR_BRACKET)
                self.state = 996
                localctx.fk = self.column_name_list()
                self.state = 997
                self.match(tsqlParser.RR_BRACKET)
                self.state = 998
                self.match(tsqlParser.REFERENCES)
                self.state = 999
                self.table_name()
                self.state = 1000
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1001
                localctx.pk = self.column_name_list()
                self.state = 1002
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1004
                self.match(tsqlParser.CHECK)
                self.state = 1005
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1006
                localctx.constraint = self.r_id()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1009
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.new_name = None # R_idContext
            self.collation = None # R_idContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_database" ):
                return visitor.visitAlter_database(self)
            else:
                return visitor.visitChildren(self)




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(tsqlParser.ALTER)
            self.state = 1013
            self.match(tsqlParser.DATABASE)
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1014
                localctx.database = self.r_id()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 1015
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 1018
                self.match(tsqlParser.MODIFY)
                self.state = 1019
                self.match(tsqlParser.NAME)
                self.state = 1020
                self.match(tsqlParser.EQUAL)
                self.state = 1021
                localctx.new_name = self.r_id()
                pass
            elif token in [tsqlParser.COLLATE]:
                self.state = 1022
                self.match(tsqlParser.COLLATE)
                self.state = 1023
                localctx.collation = self.r_id()
                pass
            elif token in [tsqlParser.SET]:
                self.state = 1024
                self.match(tsqlParser.SET)
                self.state = 1025
                self.database_optionspec()
                self.state = 1028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1026
                    self.match(tsqlParser.WITH)
                    self.state = 1027
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1032
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def HADR_options(self):
            return self.getToken(tsqlParser.HADR_options, 0)

        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_optionspec" ):
                return visitor.visitDatabase_optionspec(self)
            else:
                return visitor.visitChildren(self)




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_database_optionspec)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1037
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1038
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1039
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1040
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1041
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1042
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1043
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1044
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1045
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1046
                self.match(tsqlParser.FILESTREAM)
                self.state = 1047
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1048
                self.match(tsqlParser.HADR_options)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1049
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1050
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1051
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1052
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1053
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1054
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1055
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1056
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuto_option" ):
                return visitor.visitAuto_option(self)
            else:
                return visitor.visitChildren(self)




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1060
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1062
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1063
                self.match(tsqlParser.ON)
                self.state = 1068
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1064
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1065
                    self.match(tsqlParser.EQUAL)
                    self.state = 1066
                    self.match(tsqlParser.ON)
                    pass
                elif token in [tsqlParser.OFF]:
                    self.state = 1067
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1070
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1071
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1072
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1073
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1074
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1075
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option" ):
                return visitor.visitChange_tracking_option(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1079
            self.match(tsqlParser.EQUAL)
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1080
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.state = 1081
                self.match(tsqlParser.ON)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1082
                    self.change_tracking_option_list()
                    self.state = 1087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1083
                        self.match(tsqlParser.COMMA)
                        self.state = 1084
                        self.change_tracking_option_list()
                        self.state = 1089
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option_list" ):
                return visitor.visitChange_tracking_option_list(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1098
                self.match(tsqlParser.EQUAL)
                self.state = 1099
                self.on_off()
                pass
            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1101
                self.match(tsqlParser.EQUAL)
                self.state = 1102
                _la = self._input.LA(1)
                if not(((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (tsqlParser.DAYS - 236)) | (1 << (tsqlParser.HOURS - 236)) | (1 << (tsqlParser.MINUTES - 236)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainment_option" ):
                return visitor.visitContainment_option(self)
            else:
                return visitor.visitChildren(self)




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1106
            self.match(tsqlParser.EQUAL)
            self.state = 1107
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_option" ):
                return visitor.visitCursor_option(self)
            else:
                return visitor.visitChildren(self)




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1109
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1110
                self.on_off()
                pass
            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1112
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate_correlation_optimization_option" ):
                return visitor.visitDate_correlation_optimization_option(self)
            else:
                return visitor.visitChildren(self)




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1116
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_encryption_option" ):
                return visitor.visitDb_encryption_option(self)
            else:
                return visitor.visitChildren(self)




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1119
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_state_option" ):
                return visitor.visitDb_state_option(self)
            else:
                return visitor.visitChildren(self)




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_update_option" ):
                return visitor.visitDb_update_option(self)
            else:
                return visitor.visitChildren(self)




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_user_access_option" ):
                return visitor.visitDb_user_access_option(self)
            else:
                return visitor.visitChildren(self)




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            _la = self._input.LA(1)
            if not(((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & ((1 << (tsqlParser.MULTI_USER - 303)) | (1 << (tsqlParser.RESTRICTED_USER - 303)) | (1 << (tsqlParser.SINGLE_USER - 303)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayed_durability_option" ):
                return visitor.visitDelayed_durability_option(self)
            else:
                return visitor.visitChildren(self)




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1128
            self.match(tsqlParser.EQUAL)
            self.state = 1129
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_access_option" ):
                return visitor.visitExternal_access_option(self)
            else:
                return visitor.visitChildren(self)




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1132
                self.on_off()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1133
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1134
                self.on_off()
                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1136
                self.match(tsqlParser.EQUAL)
                self.state = 1139
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1137
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1138
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1141
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1142
                self.match(tsqlParser.EQUAL)
                self.state = 1145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1143
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1144
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1147
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1148
                self.match(tsqlParser.EQUAL)
                self.state = 1149
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1150
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1151
                self.match(tsqlParser.EQUAL)
                self.state = 1152
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1153
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1154
                self.match(tsqlParser.EQUAL)
                self.state = 1155
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixed_page_allocation_option" ):
                return visitor.visitMixed_page_allocation_option(self)
            else:
                return visitor.visitChildren(self)




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1159
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterization_option" ):
                return visitor.visitParameterization_option(self)
            else:
                return visitor.visitChildren(self)




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1162
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecovery_option" ):
                return visitor.visitRecovery_option(self)
            else:
                return visitor.visitChildren(self)




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(tsqlParser.RECOVERY)
                self.state = 1165
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1167
                self.on_off()
                pass
            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1168
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitService_broker_option" ):
                return visitor.visitService_broker_option(self)
            else:
                return visitor.visitChildren(self)




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_service_broker_option)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1176
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1177
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSnapshot_option" ):
                return visitor.visitSnapshot_option(self)
            else:
                return visitor.visitChildren(self)




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1181
                self.on_off()
                pass
            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1183
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1184
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_option" ):
                return visitor.visitSql_option(self)
            else:
                return visitor.visitChildren(self)




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_sql_option)
        try:
            self.state = 1208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1188
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1190
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1192
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1193
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1194
                self.on_off()
                pass
            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1195
                self.match(tsqlParser.ARITHABORT)
                self.state = 1196
                self.on_off()
                pass
            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1197
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1198
                self.match(tsqlParser.EQUAL)
                self.state = 1199
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1200
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1201
                self.on_off()
                pass
            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1202
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1203
                self.on_off()
                pass
            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1204
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1205
                self.on_off()
                pass
            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1206
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1207
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_recovery_time_option" ):
                return visitor.visitTarget_recovery_time_option(self)
            else:
                return visitor.visitChildren(self)




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1211
            self.match(tsqlParser.EQUAL)
            self.state = 1212
            self.match(tsqlParser.DECIMAL)
            self.state = 1213
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermination" ):
                return visitor.visitTermination(self)
            else:
                return visitor.visitChildren(self)




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_termination)
        try:
            self.state = 1221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.match(tsqlParser.ROLLBACK)
                self.state = 1216
                self.match(tsqlParser.AFTER)
                self.state = 1217
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.match(tsqlParser.ROLLBACK)
                self.state = 1219
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1220
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index" ):
                return visitor.visitDrop_index(self)
            else:
                return visitor.visitChildren(self)




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(tsqlParser.DROP)
            self.state = 1224
            self.match(tsqlParser.INDEX)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1225
                self.match(tsqlParser.IF)
                self.state = 1226
                self.match(tsqlParser.EXISTS)


            self.state = 1229
            localctx.name = self.r_id()
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1230
                self.match(tsqlParser.ON)
                self.state = 1231
                self.table_name()


            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1234
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(tsqlParser.DROP)
            self.state = 1238
            self.match(tsqlParser.PROCEDURE)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1239
                self.match(tsqlParser.IF)
                self.state = 1240
                self.match(tsqlParser.EXISTS)


            self.state = 1243
            self.func_proc_name()
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1244
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_statistics" ):
                return visitor.visitDrop_statistics(self)
            else:
                return visitor.visitChildren(self)




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(tsqlParser.DROP)
            self.state = 1248
            self.match(tsqlParser.STATISTICS)
            self.state = 1252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.table_name()
                self.state = 1250
                self.match(tsqlParser.DOT)


            self.state = 1254
            localctx.name = self.r_id()
            self.state = 1255
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(tsqlParser.DROP)
            self.state = 1258
            self.match(tsqlParser.TABLE)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1259
                self.match(tsqlParser.IF)
                self.state = 1260
                self.match(tsqlParser.EXISTS)


            self.state = 1263
            self.table_name()
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1264
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_view" ):
                return visitor.visitDrop_view(self)
            else:
                return visitor.visitChildren(self)




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(tsqlParser.DROP)
            self.state = 1268
            self.match(tsqlParser.VIEW)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1269
                self.match(tsqlParser.IF)
                self.state = 1270
                self.match(tsqlParser.EXISTS)


            self.state = 1273
            self.simple_name()
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1274
                self.match(tsqlParser.COMMA)
                self.state = 1275
                self.simple_name()
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1281
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(tsqlParser.CREATE)
            self.state = 1285
            self.match(tsqlParser.TYPE)
            self.state = 1286
            localctx.name = self.simple_name()
            self.state = 1287
            self.match(tsqlParser.FROM)
            self.state = 1288
            self.data_type()
            self.state = 1289
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(tsqlParser.DROP)
            self.state = 1292
            self.match(tsqlParser.TYPE)
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1293
                self.match(tsqlParser.IF)
                self.state = 1294
                self.match(tsqlParser.EXISTS)


            self.state = 1297
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function_limited" ):
                return visitor.visitRowset_function_limited(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_rowset_function_limited)
        try:
            self.state = 1301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1299
                self.openquery()
                pass
            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1300
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # R_idContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenquery" ):
                return visitor.visitOpenquery(self)
            else:
                return visitor.visitChildren(self)




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(tsqlParser.OPENQUERY)
            self.state = 1304
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1305
            localctx.linked_server = self.r_id()
            self.state = 1306
            self.match(tsqlParser.COMMA)
            self.state = 1307
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1308
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # R_idContext
            self.scheme = None # R_idContext
            self.table = None # R_idContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpendatasource" ):
                return visitor.visitOpendatasource(self)
            else:
                return visitor.visitChildren(self)




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1311
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1312
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1313
            self.match(tsqlParser.COMMA)
            self.state = 1314
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1315
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1316
            self.match(tsqlParser.DOT)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                self.state = 1317
                localctx.database = self.r_id()


            self.state = 1320
            self.match(tsqlParser.DOT)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                self.state = 1321
                localctx.scheme = self.r_id()


            self.state = 1324
            self.match(tsqlParser.DOT)

            self.state = 1325
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.match(tsqlParser.DECLARE)
                self.state = 1328
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1329
                    self.match(tsqlParser.AS)


                self.state = 1332
                self.table_type_definition()
                self.state = 1334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1333
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1336
                self.match(tsqlParser.DECLARE)
                self.state = 1337
                self.declare_local()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1338
                    self.match(tsqlParser.COMMA)
                    self.state = 1339
                    self.declare_local()
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_statement" ):
                return visitor.visitCursor_statement(self)
            else:
                return visitor.visitChildren(self)




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cursor_statement)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.match(tsqlParser.CLOSE)
                self.state = 1352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self.match(tsqlParser.GLOBAL)


                self.state = 1354
                self.cursor_name()
                self.state = 1356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1355
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1359
                    self.match(tsqlParser.GLOBAL)


                self.state = 1362
                self.cursor_name()
                self.state = 1364
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1363
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1366
                self.declare_cursor()
                pass
            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1367
                self.fetch_cursor()
                pass
            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1368
                self.match(tsqlParser.OPEN)
                self.state = 1370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1369
                    self.match(tsqlParser.GLOBAL)


                self.state = 1372
                self.cursor_name()
                self.state = 1374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1373
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement" ):
                return visitor.visitExecute_statement(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.match(tsqlParser.EXECUTE)
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1379
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1380
                    self.match(tsqlParser.EQUAL)


                self.state = 1383
                self.func_proc_name()
                self.state = 1392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1384
                    self.execute_statement_arg()
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1385
                        self.match(tsqlParser.COMMA)
                        self.state = 1386
                        self.execute_statement_arg()
                        self.state = 1391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1394
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(tsqlParser.EXECUTE)
                self.state = 1398
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1399
                self.execute_var_string()
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1400
                    self.match(tsqlParser.PLUS)
                    self.state = 1401
                    self.execute_var_string()
                    self.state = 1406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1407
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1408
                        self.match(tsqlParser.AS)


                    self.state = 1411
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1412
                    self.match(tsqlParser.EQUAL)
                    self.state = 1413
                    self.match(tsqlParser.STRING)


                self.state = 1417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement_arg" ):
                return visitor.visitExecute_statement_arg(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1421
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1422
                self.match(tsqlParser.EQUAL)


            self.state = 1434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1427
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1425
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1426
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1429
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 1432
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [tsqlParser.NULL]:
                self.state = 1433
                self.match(tsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_var_string" ):
                return visitor.visitExecute_var_string(self)
            else:
                return visitor.visitChildren(self)




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self.to_principal = None # R_idContext
            self.as_principal = None # R_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_statement" ):
                return visitor.visitSecurity_statement(self)
            else:
                return visitor.visitChildren(self)




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1438
                self.execute_clause()
                self.state = 1440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1439
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(tsqlParser.GRANT)
                self.state = 1454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1443
                    self.match(tsqlParser.ALL)
                    self.state = 1445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1444
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1447
                    self.grant_permission()
                    self.state = 1452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1448
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1449
                        self.column_name_list()
                        self.state = 1450
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1456
                    self.match(tsqlParser.ON)
                    self.state = 1457
                    localctx.on_id = self.table_name()


                self.state = 1460
                self.match(tsqlParser.TO)

                self.state = 1461
                localctx.to_principal = self.r_id()
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1462
                    self.match(tsqlParser.WITH)
                    self.state = 1463
                    self.match(tsqlParser.GRANT)
                    self.state = 1464
                    self.match(tsqlParser.OPTION)


                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1467
                    self.match(tsqlParser.AS)
                    self.state = 1468
                    localctx.as_principal = self.r_id()


                self.state = 1472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1471
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self.match(tsqlParser.REVERT)
                self.state = 1481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1475
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1476
                    self.match(tsqlParser.WITH)
                    self.state = 1477
                    self.match(tsqlParser.COOKIE)
                    self.state = 1478
                    self.match(tsqlParser.EQUAL)
                    self.state = 1479
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1480
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1483
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_permission" ):
                return visitor.visitGrant_permission(self)
            else:
                return visitor.visitChildren(self)




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                self.match(tsqlParser.VIEW)
                self.state = 1490
                self.r_id()
                pass
            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1491
                self.match(tsqlParser.TAKE)
                self.state = 1492
                self.r_id()
                pass
            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1493
                self.match(tsqlParser.CONTROL)
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 1494
                    self.r_id()


                pass
            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1497
                self.match(tsqlParser.CREATE)
                self.state = 1498
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1499
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1500
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1501
                self.match(tsqlParser.SELECT)
                pass
            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1502
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1503
                self.match(tsqlParser.INSERT)
                pass
            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1504
                self.match(tsqlParser.ALTER)
                self.state = 1512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ANY or _la==tsqlParser.DATABASE or _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1505
                        self.match(tsqlParser.ANY)


                    self.state = 1510
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1508
                        self.r_id()
                        pass
                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1509
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # R_idContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_statement" ):
                return visitor.visitSet_statement(self)
            else:
                return visitor.visitChildren(self)




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1516
                self.match(tsqlParser.SET)
                self.state = 1517
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 1518
                    self.match(tsqlParser.DOT)
                    self.state = 1519
                    localctx.member_name = self.r_id()


                self.state = 1522
                self.match(tsqlParser.EQUAL)
                self.state = 1523
                self.expression(0)
                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1524
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1527
                self.match(tsqlParser.SET)
                self.state = 1528
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1529
                self.assignment_operator()
                self.state = 1530
                self.expression(0)
                self.state = 1532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1531
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1534
                self.match(tsqlParser.SET)
                self.state = 1535
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1536
                self.match(tsqlParser.EQUAL)
                self.state = 1537
                self.match(tsqlParser.CURSOR)
                self.state = 1538
                self.declare_set_cursor_common()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1539
                    self.match(tsqlParser.FOR)
                    self.state = 1547
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1540
                        self.match(tsqlParser.READ)
                        self.state = 1541
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1542
                        self.match(tsqlParser.UPDATE)
                        self.state = 1545
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1543
                            self.match(tsqlParser.OF)
                            self.state = 1544
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1551
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1554
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_statement" ):
                return visitor.visitTransaction_statement(self)
            else:
                return visitor.visitChildren(self)




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.match(tsqlParser.BEGIN)
                self.state = 1558
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1559
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1560
                    self.r_id()

                elif la_ == 2:
                    self.state = 1561
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1564
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1567
                self.match(tsqlParser.BEGIN)
                self.state = 1568
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1571
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1569
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1570
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1576
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                    if la_ == 1:
                        self.state = 1573
                        self.match(tsqlParser.WITH)
                        self.state = 1574
                        self.match(tsqlParser.MARK)
                        self.state = 1575
                        self.match(tsqlParser.STRING)




                self.state = 1581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.match(tsqlParser.COMMIT)
                self.state = 1584
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1587
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1585
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1586
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1595
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                    if la_ == 1:
                        self.state = 1589
                        self.match(tsqlParser.WITH)
                        self.state = 1590
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1591
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1592
                        self.match(tsqlParser.EQUAL)
                        self.state = 1593
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1594
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1599
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1602
                self.match(tsqlParser.COMMIT)
                self.state = 1604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1603
                    self.match(tsqlParser.WORK)


                self.state = 1607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1606
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1609
                self.match(tsqlParser.ROLLBACK)
                self.state = 1610
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1611
                    self.r_id()

                elif la_ == 2:
                    self.state = 1612
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1615
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1618
                self.match(tsqlParser.ROLLBACK)
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.match(tsqlParser.WORK)


                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1622
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1625
                self.match(tsqlParser.SAVE)
                self.state = 1626
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.r_id()

                elif la_ == 2:
                    self.state = 1628
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1631
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_statement" ):
                return visitor.visitGo_statement(self)
            else:
                return visitor.visitChildren(self)




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(tsqlParser.GO)
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 1637
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_statement" ):
                return visitor.visitUse_statement(self)
            else:
                return visitor.visitChildren(self)




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(tsqlParser.USE)
            self.state = 1641
            localctx.database = self.r_id()
            self.state = 1643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1642
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_clause" ):
                return visitor.visitExecute_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(tsqlParser.EXECUTE)
            self.state = 1646
            self.match(tsqlParser.AS)
            self.state = 1647
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_local" ):
                return visitor.visitDeclare_local(self)
            else:
                return visitor.visitChildren(self)




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1650
                self.match(tsqlParser.AS)


            self.state = 1653
            self.data_type()
            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1654
                self.match(tsqlParser.EQUAL)
                self.state = 1655
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(tsqlParser.TABLE)
            self.state = 1659
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1660
            self.column_def_table_constraints()
            self.state = 1661
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraints" ):
                return visitor.visitColumn_def_table_constraints(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.column_def_table_constraint()
            self.state = 1670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 1664
                        self.match(tsqlParser.COMMA)


                    self.state = 1667
                    self.column_def_table_constraint() 
                self.state = 1672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraint" ):
                return visitor.visitColumn_def_table_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_column_def_table_constraint)
        try:
            self.state = 1675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1673
                self.column_definition()
                pass
            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1674
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.seed = None # Token
            self.increment = None # Token

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.r_id()
            self.state = 1681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1678
                self.data_type()
                pass
            elif token in [tsqlParser.AS]:
                self.state = 1679
                self.match(tsqlParser.AS)
                self.state = 1680
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 1683
                self.match(tsqlParser.COLLATE)
                self.state = 1684
                self.r_id()


            self.state = 1688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 1687
                self.null_notnull()


            self.state = 1713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 1690
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1691
                    localctx.constraint = self.r_id()


                self.state = 1694
                self.match(tsqlParser.DEFAULT)
                self.state = 1695
                self.constant_expression()
                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1696
                    self.match(tsqlParser.WITH)
                    self.state = 1697
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1700
                self.match(tsqlParser.IDENTITY)
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 1701
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1702
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1703
                    self.match(tsqlParser.COMMA)
                    self.state = 1704
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1705
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1708
                    self.match(tsqlParser.NOT)
                    self.state = 1709
                    self.match(tsqlParser.FOR)
                    self.state = 1710
                    self.match(tsqlParser.REPLICATION)




            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 1715
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1718
                    self.column_constraint() 
                self.state = 1723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1724
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1725
                self.r_id()


            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL:
                self.state = 1728
                self.null_notnull()


            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1731
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1732
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1733
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1736
                    self.clustered()


                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.index_options()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1742
                self.match(tsqlParser.CHECK)
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1743
                    self.match(tsqlParser.NOT)
                    self.state = 1744
                    self.match(tsqlParser.FOR)
                    self.state = 1745
                    self.match(tsqlParser.REPLICATION)


                self.state = 1748
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1749
                self.search_condition(0)
                self.state = 1750
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1754
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1755
                self.r_id()


            self.state = 1789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1761
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1758
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1759
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1760
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1763
                    self.clustered()


                self.state = 1766
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1767
                self.column_name_list()
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 1768
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1771
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.index_options()


                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1775
                    self.match(tsqlParser.ON)
                    self.state = 1776
                    self.r_id()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1779
                self.match(tsqlParser.CHECK)
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1780
                    self.match(tsqlParser.NOT)
                    self.state = 1781
                    self.match(tsqlParser.FOR)
                    self.state = 1782
                    self.match(tsqlParser.REPLICATION)


                self.state = 1785
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1786
                self.search_condition(0)
                self.state = 1787
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_options" ):
                return visitor.visitIndex_options(self)
            else:
                return visitor.visitChildren(self)




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(tsqlParser.WITH)
            self.state = 1792
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1793
            self.index_option()
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1794
                self.match(tsqlParser.COMMA)
                self.state = 1795
                self.index_option()
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1801
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_option" ):
                return visitor.visitIndex_option(self)
            else:
                return visitor.visitChildren(self)




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.simple_id()
            self.state = 1804
            self.match(tsqlParser.EQUAL)
            self.state = 1808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.state = 1805
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1806
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 1807
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_cursor" ):
                return visitor.visitDeclare_cursor(self)
            else:
                return visitor.visitChildren(self)




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(tsqlParser.DECLARE)
            self.state = 1811
            self.cursor_name()
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1812
                self.match(tsqlParser.CURSOR)
                self.state = 1822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 1813
                    self.declare_set_cursor_common()
                    self.state = 1820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 1814
                        self.match(tsqlParser.FOR)
                        self.state = 1815
                        self.match(tsqlParser.UPDATE)
                        self.state = 1818
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1816
                            self.match(tsqlParser.OF)
                            self.state = 1817
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 1824
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 1827
                    self.match(tsqlParser.SCROLL)


                self.state = 1830
                self.match(tsqlParser.CURSOR)
                self.state = 1831
                self.match(tsqlParser.FOR)
                self.state = 1832
                self.select_statement()
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1833
                    self.match(tsqlParser.FOR)
                    self.state = 1839
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1834
                        self.match(tsqlParser.READ)
                        self.state = 1835
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1836
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [tsqlParser.OF]:
                        self.state = 1837
                        self.match(tsqlParser.OF)
                        self.state = 1838
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 1845
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common" ):
                return visitor.visitDeclare_set_cursor_common(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 1848
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 1851
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & ((1 << (tsqlParser.DYNAMIC - 248)) | (1 << (tsqlParser.FAST_FORWARD - 248)) | (1 << (tsqlParser.KEYSET - 248)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 1854
                _la = self._input.LA(1)
                if not(((((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & ((1 << (tsqlParser.DYNAMIC - 248)) | (1 << (tsqlParser.FAST_FORWARD - 248)) | (1 << (tsqlParser.KEYSET - 248)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (tsqlParser.OPTIMISTIC - 320)) | (1 << (tsqlParser.READ_ONLY - 320)) | (1 << (tsqlParser.SCROLL_LOCKS - 320)))) != 0):
                self.state = 1857
                _la = self._input.LA(1)
                if not(((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (tsqlParser.OPTIMISTIC - 320)) | (1 << (tsqlParser.READ_ONLY - 320)) | (1 << (tsqlParser.SCROLL_LOCKS - 320)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 1860
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 1863
            self.match(tsqlParser.FOR)
            self.state = 1864
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_cursor" ):
                return visitor.visitFetch_cursor(self)
            else:
                return visitor.visitChildren(self)




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(tsqlParser.FETCH)
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1873
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 1867
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 1868
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 1869
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 1870
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 1871
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1872
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 1875
                self.match(tsqlParser.FROM)


            self.state = 1879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1878
                self.match(tsqlParser.GLOBAL)


            self.state = 1881
            self.cursor_name()
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 1882
                self.match(tsqlParser.INTO)
                self.state = 1883
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1884
                    self.match(tsqlParser.COMMA)
                    self.state = 1885
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 1893
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_special" ):
                return visitor.visitSet_special(self)
            else:
                return visitor.visitChildren(self)




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_set_special)
        try:
            self.state = 1939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1896
                self.match(tsqlParser.SET)
                self.state = 1897
                self.r_id()
                self.state = 1901
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1898
                    self.r_id()
                    pass
                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1899
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 1900
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 1903
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(tsqlParser.SET)
                self.state = 1907
                self.match(tsqlParser.TRANSACTION)
                self.state = 1908
                self.match(tsqlParser.ISOLATION)
                self.state = 1909
                self.match(tsqlParser.LEVEL)
                self.state = 1918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1910
                    self.match(tsqlParser.READ)
                    self.state = 1911
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 1912
                    self.match(tsqlParser.READ)
                    self.state = 1913
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 1914
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 1915
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 1916
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 1917
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 1921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 1920
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1923
                self.match(tsqlParser.SET)
                self.state = 1924
                self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 1925
                self.table_name()
                self.state = 1926
                self.on_off()
                self.state = 1928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 1927
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1930
                self.match(tsqlParser.SET)
                self.state = 1931
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1932
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1933
                self.match(tsqlParser.SET)
                self.state = 1934
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1935
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1936
                self.match(tsqlParser.SET)
                self.state = 1937
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1938
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_LOCAL_ID" ):
                return visitor.visitConstant_LOCAL_ID(self)
            else:
                return visitor.visitChildren(self)




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 1943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1941
                self.constant()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_expression" ):
                return visitor.visitPrimitive_expression(self)
            else:
                return visitor.visitChildren(self)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_expression" ):
                listener.enterSubquery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_expression" ):
                listener.exitSubquery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_expression" ):
                return visitor.visitSubquery_expression(self)
            else:
                return visitor.visitChildren(self)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_expression" ):
                listener.enterOver_clause_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_expression" ):
                listener.exitOver_clause_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_expression" ):
                return visitor.visitOver_clause_expression(self)
            else:
                return visitor.visitChildren(self)


    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression" ):
                return visitor.visitCase_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_expression" ):
                return visitor.visitBracket_expression(self)
            else:
                return visitor.visitChildren(self)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression" ):
                listener.enterBinary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression" ):
                listener.exitBinary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression" ):
                return visitor.visitBinary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression" ):
                return visitor.visitUnary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_ref_expression" ):
                listener.enterColumn_ref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_ref_expression" ):
                listener.exitColumn_ref_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_ref_expression" ):
                return visitor.visitColumn_ref_expression(self)
            else:
                return visitor.visitChildren(self)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_expression" ):
                listener.enterFunction_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_expression" ):
                listener.exitFunction_call_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_expression" ):
                return visitor.visitFunction_call_expression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1946
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1947
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1948
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1949
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1950
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1951
                self.match(tsqlParser.CASE)
                self.state = 1952
                localctx.caseExpr = self.expression(0)
                self.state = 1954 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1953
                    self.switch_section()
                    self.state = 1956 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1958
                    self.match(tsqlParser.ELSE)
                    self.state = 1959
                    localctx.elseExpr = self.expression(0)


                self.state = 1962
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1964
                self.match(tsqlParser.CASE)
                self.state = 1966 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1965
                    self.switch_search_condition_section()
                    self.state = 1968 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1970
                    self.match(tsqlParser.ELSE)
                    self.state = 1971
                    localctx.elseExpr = self.expression(0)


                self.state = 1974
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1976
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1977
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1978
                self.expression(0)
                self.state = 1979
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1981
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1982
                self.subquery()
                self.state = 1983
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1985
                localctx.op = self.match(tsqlParser.BIT_NOT)
                self.state = 1986
                self.expression(6)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1987
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1988
                self.expression(4)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1989
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2005
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1992
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1993
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 431)) & ~0x3f) == 0 and ((1 << (_la - 431)) & ((1 << (tsqlParser.STAR - 431)) | (1 << (tsqlParser.DIVIDE - 431)) | (1 << (tsqlParser.MODULE - 431)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1994
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1995
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1996
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (tsqlParser.PLUS - 434)) | (1 << (tsqlParser.MINUS - 434)) | (1 << (tsqlParser.BIT_OR - 434)) | (1 << (tsqlParser.BIT_AND - 434)) | (1 << (tsqlParser.BIT_XOR - 434)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1997
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1998
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1999
                        self.comparison_operator()
                        self.state = 2000
                        localctx.right = self.expression(3)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2002
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2003
                        self.match(tsqlParser.COLLATE)
                        self.state = 2004
                        self.r_id()
                        pass

             
                self.state = 2009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_constant_expression)
        try:
            self.state = 2018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2010
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.constant()
                pass
            elif token in [tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULLIF, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2012
                self.function_call()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2013
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2014
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2015
                self.constant_expression()
                self.state = 2016
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_expression" ):
                return visitor.visitWith_expression(self)
            else:
                return visitor.visitChildren(self)




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(tsqlParser.WITH)
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2023
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2024
                self.match(tsqlParser.COMMA)


            self.state = 2027
            self.common_table_expression()
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2028
                self.match(tsqlParser.COMMA)
                self.state = 2029
                self.common_table_expression()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # R_idContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            localctx.expression_name = self.r_id()
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 2036
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2037
                self.column_name_list()
                self.state = 2038
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2042
            self.match(tsqlParser.AS)
            self.state = 2043
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2044
            self.select_statement()
            self.state = 2045
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # R_idContext
            self.method_name = None # R_idContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_elem" ):
                return visitor.visitUpdate_elem(self)
            else:
                return visitor.visitChildren(self)




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_update_elem)
        try:
            self.state = 2063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2047
                    self.full_column_name()
                    pass
                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 2048
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2051
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2052
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2055
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2056
                localctx.udt_column_name = self.r_id()
                self.state = 2057
                self.match(tsqlParser.DOT)
                self.state = 2058
                localctx.method_name = self.r_id()
                self.state = 2059
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2060
                self.expression_list()
                self.state = 2061
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_list" ):
                return visitor.visitSearch_condition_list(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.search_condition(0)
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2066
                self.match(tsqlParser.COMMA)
                self.state = 2067
                self.search_condition(0)
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Search_cond_andContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_and" ):
                listener.enterSearch_cond_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_and" ):
                listener.exitSearch_cond_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_and" ):
                return visitor.visitSearch_cond_and(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_predContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_pred" ):
                listener.enterSearch_cond_pred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_pred" ):
                listener.exitSearch_cond_pred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_pred" ):
                return visitor.visitSearch_cond_pred(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_orContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_or" ):
                listener.enterSearch_cond_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_or" ):
                listener.exitSearch_cond_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_or" ):
                return visitor.visitSearch_cond_or(self)
            else:
                return visitor.visitChildren(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = tsqlParser.Search_cond_predContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2074
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2084
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2082
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Search_cond_andContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2076
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2077
                        localctx.op = self.match(tsqlParser.AND)
                        self.state = 2078
                        localctx.right = self.search_condition(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Search_cond_orContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2079
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2080
                        localctx.op = self.match(tsqlParser.OR)
                        self.state = 2081
                        localctx.right = self.search_condition(3)
                        pass

             
                self.state = 2086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # PredicateContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression3" ):
                listener.enterUnary_operator_expression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression3" ):
                listener.exitUnary_operator_expression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression3" ):
                return visitor.visitUnary_operator_expression3(self)
            else:
                return visitor.visitChildren(self)


    class Binary_in_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_in_expression" ):
                listener.enterBinary_in_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_in_expression" ):
                listener.exitBinary_in_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_in_expression" ):
                return visitor.visitBinary_in_expression(self)
            else:
                return visitor.visitChildren(self)


    class Binary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)
        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression2" ):
                listener.enterBinary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression2" ):
                listener.exitBinary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression2" ):
                return visitor.visitBinary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Sublink_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.test_expr = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.pref = None # Token
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)
        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)
        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSublink_expression" ):
                listener.enterSublink_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSublink_expression" ):
                listener.exitSublink_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSublink_expression" ):
                return visitor.visitSublink_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_search_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_search_expression" ):
                listener.enterBracket_search_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_search_expression" ):
                listener.exitBracket_search_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_search_expression" ):
                return visitor.visitBracket_search_expression(self)
            else:
                return visitor.visitChildren(self)


    class Decimal_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal_expression" ):
                listener.enterDecimal_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal_expression" ):
                listener.exitDecimal_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal_expression" ):
                return visitor.visitDecimal_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # SubqueryContext
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression2" ):
                listener.enterUnary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression2" ):
                listener.exitUnary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression2" ):
                return visitor.visitUnary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Binary_mod_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_mod_expression" ):
                listener.enterBinary_mod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_mod_expression" ):
                listener.exitBinary_mod_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_mod_expression" ):
                return visitor.visitBinary_mod_expression(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2087
                localctx.op = self.match(tsqlParser.NOT)
                self.state = 2088
                localctx.expr = self.predicate()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2089
                localctx.op = self.match(tsqlParser.EXISTS)
                self.state = 2090
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2091
                localctx.expr = self.subquery()
                self.state = 2092
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2094
                localctx.left = self.expression(0)
                self.state = 2095
                localctx.op = self.comparison_operator()
                self.state = 2096
                localctx.right = self.expression(0)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Sublink_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2098
                localctx.test_expr = self.expression(0)
                self.state = 2099
                localctx.op = self.comparison_operator()
                self.state = 2100
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2101
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2102
                self.subquery()
                self.state = 2103
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2105
                localctx.left = self.expression(0)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2106
                    self.match(tsqlParser.NOT)


                self.state = 2109
                localctx.op = self.match(tsqlParser.BETWEEN)
                self.state = 2110
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2111
                self.match(tsqlParser.AND)
                self.state = 2112
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Binary_in_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2114
                localctx.left = self.expression(0)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2115
                    self.match(tsqlParser.NOT)


                self.state = 2118
                localctx.op = self.match(tsqlParser.IN)
                self.state = 2119
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2120
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2121
                    self.expression_list()
                    pass


                self.state = 2124
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2126
                localctx.left = self.expression(0)
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2127
                    self.match(tsqlParser.NOT)


                self.state = 2130
                localctx.op = self.match(tsqlParser.LIKE)
                self.state = 2131
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2132
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2133
                    localctx._expression = self.expression(0)
                    localctx.right.append(localctx._expression)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2136
                self.expression(0)
                self.state = 2137
                self.match(tsqlParser.IS)
                self.state = 2138
                self.null_notnull()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_search_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2140
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2141
                self.search_condition(0)
                self.state = 2142
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Decimal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2144
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Query_specification_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification_expression" ):
                listener.enterQuery_specification_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification_expression" ):
                listener.exitQuery_specification_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification_expression" ):
                return visitor.visitQuery_specification_expression(self)
            else:
                return visitor.visitChildren(self)


    class Union_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.left = None # Query_expressionContext
            self.op = None # Union_opContext
            self.right = None # Query_expressionContext
            self.copyFrom(ctx)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)

        def union_op(self):
            return self.getTypedRuleContext(tsqlParser.Union_opContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_query_expression" ):
                listener.enterUnion_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_query_expression" ):
                listener.exitUnion_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_query_expression" ):
                return visitor.visitUnion_query_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_query_expression" ):
                listener.enterBracket_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_query_expression" ):
                listener.exitBracket_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_query_expression" ):
                return visitor.visitBracket_query_expression(self)
            else:
                return visitor.visitChildren(self)



    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_query_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.LR_BRACKET]:
                localctx = tsqlParser.Bracket_query_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2148
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2149
                self.query_expression(0)
                self.state = 2150
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.SELECT]:
                localctx = tsqlParser.Query_specification_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2152
                self.query_specification()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = tsqlParser.Union_query_expressionContext(self, tsqlParser.Query_expressionContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                    self.state = 2155
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2156
                    localctx.op = self.union_op()
                    self.state = 2157
                    localctx.right = self.query_expression(3) 
                self.state = 2163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Union_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_op" ):
                listener.enterUnion_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_op" ):
                listener.exitUnion_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_op" ):
                return visitor.visitUnion_op(self)
            else:
                return visitor.visitChildren(self)




    def union_op(self):

        localctx = tsqlParser.Union_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_union_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2164
                self.match(tsqlParser.UNION)
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2165
                    self.match(tsqlParser.ALL)


                pass
            elif token in [tsqlParser.EXCEPT]:
                self.state = 2168
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [tsqlParser.INTERSECT]:
                self.state = 2169
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self.match(tsqlParser.SELECT)
            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2173
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2176
                self.top_clause()


            self.state = 2179
            self.select_list()
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2180
                self.match(tsqlParser.INTO)
                self.state = 2181
                self.table_name()


            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2184
                self.match(tsqlParser.FROM)
                self.state = 2185
                self.table_sources()


            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2188
                self.match(tsqlParser.WHERE)
                self.state = 2189
                localctx.where = self.search_condition(0)


            self.state = 2202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2192
                self.match(tsqlParser.GROUP)
                self.state = 2193
                self.match(tsqlParser.BY)
                self.state = 2194
                self.group_by_item()
                self.state = 2199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2195
                        self.match(tsqlParser.COMMA)
                        self.state = 2196
                        self.group_by_item() 
                    self.state = 2201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)



            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2204
                self.match(tsqlParser.HAVING)
                self.state = 2205
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause" ):
                return visitor.visitTop_clause(self)
            else:
                return visitor.visitChildren(self)




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            self.match(tsqlParser.TOP)
            self.state = 2209
            self.expression(0)
            self.state = 2211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2210
                self.match(tsqlParser.PERCENT)


            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2213
                self.match(tsqlParser.WITH)
                self.state = 2214
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def fetch_expression(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(tsqlParser.ORDER)
            self.state = 2218
            self.match(tsqlParser.BY)
            self.state = 2219
            self.order_by_expression()
            self.state = 2224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2220
                    self.match(tsqlParser.COMMA)
                    self.state = 2221
                    self.order_by_expression() 
                self.state = 2226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

            self.state = 2233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2227
                self.match(tsqlParser.OFFSET)
                self.state = 2228
                localctx.offset = self.expression(0)
                self.state = 2229
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2230
                    self.fetch_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_expression" ):
                listener.enterFetch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_expression" ):
                listener.exitFetch_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_expression" ):
                return visitor.visitFetch_expression(self)
            else:
                return visitor.visitChildren(self)




    def fetch_expression(self):

        localctx = tsqlParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.match(tsqlParser.FETCH)
            self.state = 2236
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FIRST or _la==tsqlParser.NEXT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2237
            self.expression(0)
            self.state = 2238
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2239
            self.match(tsqlParser.ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_clause" ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_for_clause)
        try:
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.match(tsqlParser.FOR)
                self.state = 2242
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2243
                self.match(tsqlParser.FOR)
                self.state = 2244
                self.match(tsqlParser.XML)
                self.state = 2245
                self.match(tsqlParser.AUTO)
                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2249
                self.match(tsqlParser.FOR)
                self.state = 2250
                self.match(tsqlParser.XML)
                self.state = 2251
                self.match(tsqlParser.PATH)
                self.state = 2255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2252
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2253
                    self.match(tsqlParser.STRING)
                    self.state = 2254
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 2257
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_common_directives" ):
                return visitor.visitXml_common_directives(self)
            else:
                return visitor.visitChildren(self)




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(tsqlParser.COMMA)
            self.state = 2267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2263
                self.match(tsqlParser.BINARY)
                self.state = 2264
                self.match(tsqlParser.BASE64)
                pass
            elif token in [tsqlParser.TYPE]:
                self.state = 2265
                self.match(tsqlParser.TYPE)
                pass
            elif token in [tsqlParser.ROOT]:
                self.state = 2266
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expression" ):
                return visitor.visitOrder_by_expression(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.expression(0)
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2270
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_clause" ):
                return visitor.visitOption_clause(self)
            else:
                return visitor.visitChildren(self)




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(tsqlParser.OPTION)
            self.state = 2276
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2277
            self.option()
            self.state = 2282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2278
                self.match(tsqlParser.COMMA)
                self.state = 2279
                self.option()
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2285
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2287
                self.match(tsqlParser.FAST)
                self.state = 2288
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2290
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2291
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2292
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2293
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2294
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2295
                self.match(tsqlParser.EXPAND)
                self.state = 2296
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2297
                self.match(tsqlParser.FORCE)
                self.state = 2298
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2299
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2300
                self.match(tsqlParser.KEEP)
                self.state = 2301
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2302
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2303
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2304
                self.match(tsqlParser.MAXDOP)
                self.state = 2305
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2306
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2307
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2308
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2309
                self.match(tsqlParser.FOR)
                self.state = 2310
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2311
                self.optimize_for_arg()
                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2312
                    self.match(tsqlParser.COMMA)
                    self.state = 2313
                    self.optimize_for_arg()
                    self.state = 2318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2319
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2321
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2322
                self.match(tsqlParser.FOR)
                self.state = 2323
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2324
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2325
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2326
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2327
                self.match(tsqlParser.ROBUST)
                self.state = 2328
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2329
                self.match(tsqlParser.USE)
                self.state = 2330
                self.match(tsqlParser.PLAN)
                self.state = 2331
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize_for_arg" ):
                return visitor.visitOptimize_for_arg(self)
            else:
                return visitor.visitChildren(self)




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2335
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [tsqlParser.EQUAL]:
                self.state = 2336
                self.match(tsqlParser.EQUAL)
                self.state = 2337
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.select_list_elem()
            self.state = 2345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,352,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2341
                    self.match(tsqlParser.COMMA)
                    self.state = 2342
                    self.select_list_elem() 
                self.state = 2347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Column_aliasContext

        def a_star(self):
            return self.getTypedRuleContext(tsqlParser.A_starContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elem" ):
                return visitor.visitSelect_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 2348
                    self.table_name()
                    self.state = 2349
                    self.match(tsqlParser.DOT)


                self.state = 2356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2353
                    self.a_star()
                    pass
                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2354
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2355
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2358
                localctx.alias = self.column_alias()
                self.state = 2359
                self.match(tsqlParser.EQUAL)
                self.state = 2360
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2362
                self.expression(0)
                self.state = 2367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2363
                        self.match(tsqlParser.AS)


                    self.state = 2366
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_sources" ):
                return visitor.visitTable_sources(self)
            else:
                return visitor.visitChildren(self)




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.table_source(0)
            self.state = 2376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2372
                    self.match(tsqlParser.COMMA)
                    self.state = 2373
                    self.table_source(0) 
                self.state = 2378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Table_source_item_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_join" ):
                listener.enterTable_source_item_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_join" ):
                listener.exitTable_source_item_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_join" ):
                return visitor.visitTable_source_item_join(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_table_sourceContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_table_source" ):
                listener.enterBracket_table_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_table_source" ):
                listener.exitBracket_table_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_table_source" ):
                return visitor.visitBracket_table_source(self)
            else:
                return visitor.visitChildren(self)


    class Standard_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def join_type(self):
            return self.getTypedRuleContext(tsqlParser.Join_typeContext,0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def ON(self):
            return self.getToken(tsqlParser.ON, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)


    class Apply_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)
        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApply_join" ):
                listener.enterApply_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApply_join" ):
                listener.exitApply_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApply_join" ):
                return visitor.visitApply_join(self)
            else:
                return visitor.visitChildren(self)


    class Cross_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCross_join" ):
                listener.enterCross_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCross_join" ):
                listener.exitCross_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCross_join" ):
                return visitor.visitCross_join(self)
            else:
                return visitor.visitChildren(self)



    def table_source(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Table_sourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_table_source, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Bracket_table_sourceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2380
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2381
                self.table_source(0)
                self.state = 2382
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_joinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2384
                self.table_source_item()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Cross_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2387
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2388
                        localctx.op = self.match(tsqlParser.CROSS)
                        self.state = 2389
                        self.match(tsqlParser.JOIN)
                        self.state = 2390
                        localctx.right = self.table_source(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Apply_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2391
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2392
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.CROSS or _la==tsqlParser.OUTER):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2393
                        self.match(tsqlParser.APPLY)
                        self.state = 2394
                        localctx.right = self.table_source(3)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Standard_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2395
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2396
                        self.join_type()
                        self.state = 2397
                        self.match(tsqlParser.JOIN)
                        self.state = 2398
                        localctx.right = self.table_source(0)
                        self.state = 2399
                        self.match(tsqlParser.ON)
                        self.state = 2400
                        self.search_condition(0)
                        pass

             
                self.state = 2406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_source_item_complexContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_complex" ):
                listener.enterTable_source_item_complex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_complex" ):
                listener.exitTable_source_item_complex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_complex" ):
                return visitor.visitTable_source_item_complex(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_nameContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_name" ):
                listener.enterTable_source_item_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_name" ):
                listener.exitTable_source_item_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_name" ):
                return visitor.visitTable_source_item_name(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_simpleContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_simple" ):
                listener.enterTable_source_item_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_simple" ):
                listener.exitTable_source_item_simple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_simple" ):
                return visitor.visitTable_source_item_simple(self)
            else:
                return visitor.visitChildren(self)



    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_source_item)
        try:
            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Table_source_item_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2407
                self.table_name()
                self.state = 2409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2408
                    self.table_alias()


                self.state = 2412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2411
                    self.with_table_hints()


                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2414
                self.rowset_function()
                self.state = 2416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2415
                    self.table_alias()


                pass

            elif la_ == 3:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2418
                self.derived_table()
                self.state = 2423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2419
                    self.table_alias()
                    self.state = 2421
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                    if la_ == 1:
                        self.state = 2420
                        self.column_alias_list()




                pass

            elif la_ == 4:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2425
                self.change_table()
                self.state = 2427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 2426
                    self.table_alias()


                pass

            elif la_ == 5:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2429
                self.function_call()
                self.state = 2431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 2430
                    self.table_alias()


                pass

            elif la_ == 6:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2433
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 2434
                    self.table_alias()


                pass

            elif la_ == 7:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2437
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2438
                self.match(tsqlParser.DOT)
                self.state = 2439
                self.function_call()
                self.state = 2444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 2440
                    self.table_alias()
                    self.state = 2442
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                    if la_ == 1:
                        self.state = 2441
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2448
                self.match(tsqlParser.AS)


            self.state = 2451
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_table" ):
                return visitor.visitChange_table(self)
            else:
                return visitor.visitChildren(self)




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2454
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2455
            self.match(tsqlParser.CHANGES)
            self.state = 2456
            self.table_name()
            self.state = 2457
            self.match(tsqlParser.COMMA)
            self.state = 2458
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2459
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_hint = None # Token

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = tsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                self.state = 2462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INNER:
                    self.state = 2461
                    self.match(tsqlParser.INNER)


                pass
            elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                self.state = 2464
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OUTER:
                    self.state = 2465
                    self.match(tsqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                self.state = 2470
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name_with_hint" ):
                return visitor.visitTable_name_with_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.table_name()
            self.state = 2475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 2474
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function" ):
                return visitor.visitRowset_function(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2477
                self.match(tsqlParser.OPENROWSET)
                self.state = 2478
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2479
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2480
                self.match(tsqlParser.COMMA)
                self.state = 2481
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2482
                self.match(tsqlParser.COMMA)
                self.state = 2483
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2484
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self.match(tsqlParser.OPENROWSET)
                self.state = 2486
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2487
                self.match(tsqlParser.BULK)
                self.state = 2488
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2489
                self.match(tsqlParser.COMMA)
                self.state = 2499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2490
                    self.bulk_option()
                    self.state = 2495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2491
                        self.match(tsqlParser.COMMA)
                        self.state = 2492
                        self.bulk_option()
                        self.state = 2497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2498
                    self.r_id()
                    pass


                self.state = 2501
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBulk_option" ):
                return visitor.visitBulk_option(self)
            else:
                return visitor.visitChildren(self)




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.r_id()
            self.state = 2506
            self.match(tsqlParser.EQUAL)
            self.state = 2507
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_derived_table)
        try:
            self.state = 2514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2509
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2510
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2511
                self.subquery()
                self.state = 2512
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simple_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)
        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)
        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_call" ):
                listener.enterSimple_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_call" ):
                listener.exitSimple_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_call" ):
                return visitor.visitSimple_call(self)
            else:
                return visitor.visitChildren(self)


    class Rank_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_call" ):
                listener.enterRank_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_call" ):
                listener.exitRank_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRank_call" ):
                return visitor.visitRank_call(self)
            else:
                return visitor.visitChildren(self)


    class Cast_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.alias = None # Data_typeContext
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_call" ):
                listener.enterCast_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_call" ):
                listener.exitCast_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_call" ):
                return visitor.visitCast_call(self)
            else:
                return visitor.visitChildren(self)


    class Standard_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)
        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)
        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)
        def ID(self):
            return self.getToken(tsqlParser.ID, 0)
        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)
        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)
        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)
        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_call" ):
                listener.enterStandard_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_call" ):
                listener.exitStandard_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_call" ):
                return visitor.visitStandard_call(self)
            else:
                return visitor.visitChildren(self)


    class Aggregate_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_call" ):
                listener.enterAggregate_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_call" ):
                listener.exitAggregate_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_call" ):
                return visitor.visitAggregate_call(self)
            else:
                return visitor.visitChildren(self)



    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Rank_callContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2516
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Aggregate_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2517
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2518
                self.scalar_function_name()
                self.state = 2519
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (tsqlParser.FORCESEEK - 72)) | (1 << (tsqlParser.IDENTITY - 72)) | (1 << (tsqlParser.LEFT - 72)) | (1 << (tsqlParser.NULL - 72)) | (1 << (tsqlParser.NULLIF - 72)) | (1 << (tsqlParser.OVER - 72)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (tsqlParser.RIGHT - 145)) | (1 << (tsqlParser.SESSION_USER - 145)) | (1 << (tsqlParser.SYSTEM_USER - 145)) | (1 << (tsqlParser.ABSOLUTE - 145)) | (1 << (tsqlParser.APPLY - 145)) | (1 << (tsqlParser.AUTO - 145)))) != 0) or ((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (tsqlParser.AVG - 210)) | (1 << (tsqlParser.BASE64 - 210)) | (1 << (tsqlParser.BINARY_CHECKSUM - 210)) | (1 << (tsqlParser.CALLER - 210)) | (1 << (tsqlParser.CAST - 210)) | (1 << (tsqlParser.CATCH - 210)) | (1 << (tsqlParser.CHECKSUM - 210)) | (1 << (tsqlParser.CHECKSUM_AGG - 210)) | (1 << (tsqlParser.COMMITTED - 210)) | (1 << (tsqlParser.CONCAT - 210)) | (1 << (tsqlParser.CONTROL - 210)) | (1 << (tsqlParser.COOKIE - 210)) | (1 << (tsqlParser.COUNT - 210)) | (1 << (tsqlParser.COUNT_BIG - 210)) | (1 << (tsqlParser.DATEADD - 210)) | (1 << (tsqlParser.DATEDIFF - 210)) | (1 << (tsqlParser.DATENAME - 210)) | (1 << (tsqlParser.DATEPART - 210)) | (1 << (tsqlParser.DELAY - 210)) | (1 << (tsqlParser.DELETED - 210)) | (1 << (tsqlParser.DENSE_RANK - 210)) | (1 << (tsqlParser.DISABLE - 210)) | (1 << (tsqlParser.DYNAMIC - 210)) | (1 << (tsqlParser.ENCRYPTION - 210)) | (1 << (tsqlParser.EXPAND - 210)) | (1 << (tsqlParser.FAST - 210)) | (1 << (tsqlParser.FAST_FORWARD - 210)) | (1 << (tsqlParser.FIRST - 210)) | (1 << (tsqlParser.FOLLOWING - 210)) | (1 << (tsqlParser.FORCE - 210)) | (1 << (tsqlParser.FORCED - 210)) | (1 << (tsqlParser.FORWARD_ONLY - 210)) | (1 << (tsqlParser.FULLSCAN - 210)) | (1 << (tsqlParser.GLOBAL - 210)) | (1 << (tsqlParser.GO - 210)) | (1 << (tsqlParser.GROUPING - 210)) | (1 << (tsqlParser.GROUPING_ID - 210)) | (1 << (tsqlParser.HASH - 210)))) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 274)) | (1 << (tsqlParser.IMPERSONATE - 274)) | (1 << (tsqlParser.INSENSITIVE - 274)) | (1 << (tsqlParser.INSERTED - 274)) | (1 << (tsqlParser.ISOLATION - 274)) | (1 << (tsqlParser.KEEP - 274)) | (1 << (tsqlParser.KEEPFIXED - 274)) | (1 << (tsqlParser.KEYSET - 274)) | (1 << (tsqlParser.LAST - 274)) | (1 << (tsqlParser.LEVEL - 274)) | (1 << (tsqlParser.LOCAL - 274)) | (1 << (tsqlParser.LOCK_ESCALATION - 274)) | (1 << (tsqlParser.LOGIN - 274)) | (1 << (tsqlParser.LOOP - 274)) | (1 << (tsqlParser.MARK - 274)) | (1 << (tsqlParser.MAX - 274)) | (1 << (tsqlParser.MAXDOP - 274)) | (1 << (tsqlParser.MAXRECURSION - 274)) | (1 << (tsqlParser.MIN - 274)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 274)) | (1 << (tsqlParser.MODIFY - 274)) | (1 << (tsqlParser.NAME - 274)) | (1 << (tsqlParser.NEXT - 274)) | (1 << (tsqlParser.NOCOUNT - 274)) | (1 << (tsqlParser.NOEXPAND - 274)) | (1 << (tsqlParser.NORECOMPUTE - 274)) | (1 << (tsqlParser.NTILE - 274)) | (1 << (tsqlParser.NUMBER - 274)) | (1 << (tsqlParser.OFFSET - 274)) | (1 << (tsqlParser.ONLINE - 274)) | (1 << (tsqlParser.ONLY - 274)) | (1 << (tsqlParser.OPTIMISTIC - 274)) | (1 << (tsqlParser.OPTIMIZE - 274)) | (1 << (tsqlParser.OUT - 274)) | (1 << (tsqlParser.OUTPUT - 274)) | (1 << (tsqlParser.OWNER - 274)) | (1 << (tsqlParser.PARAMETERIZATION - 274)) | (1 << (tsqlParser.PARTITION - 274)) | (1 << (tsqlParser.PATH - 274)) | (1 << (tsqlParser.PRECEDING - 274)) | (1 << (tsqlParser.PRIOR - 274)) | (1 << (tsqlParser.PRIVILEGES - 274)) | (1 << (tsqlParser.RANGE - 274)) | (1 << (tsqlParser.RANK - 274)) | (1 << (tsqlParser.READONLY - 274)) | (1 << (tsqlParser.READ_ONLY - 274)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (tsqlParser.RECOMPILE - 339)) | (1 << (tsqlParser.RELATIVE - 339)) | (1 << (tsqlParser.REMOTE - 339)) | (1 << (tsqlParser.REPEATABLE - 339)) | (1 << (tsqlParser.ROBUST - 339)) | (1 << (tsqlParser.ROOT - 339)) | (1 << (tsqlParser.ROW - 339)) | (1 << (tsqlParser.ROWGUID - 339)) | (1 << (tsqlParser.ROWS - 339)) | (1 << (tsqlParser.ROW_NUMBER - 339)) | (1 << (tsqlParser.SAMPLE - 339)) | (1 << (tsqlParser.SCHEMABINDING - 339)) | (1 << (tsqlParser.SCROLL - 339)) | (1 << (tsqlParser.SCROLL_LOCKS - 339)) | (1 << (tsqlParser.SELF - 339)) | (1 << (tsqlParser.SERIALIZABLE - 339)) | (1 << (tsqlParser.SIMPLE - 339)) | (1 << (tsqlParser.SIZE - 339)) | (1 << (tsqlParser.SNAPSHOT - 339)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 339)) | (1 << (tsqlParser.STATIC - 339)) | (1 << (tsqlParser.STATS_STREAM - 339)) | (1 << (tsqlParser.STDEV - 339)) | (1 << (tsqlParser.STDEVP - 339)) | (1 << (tsqlParser.SUM - 339)) | (1 << (tsqlParser.TEXTIMAGE_ON - 339)) | (1 << (tsqlParser.THROW - 339)) | (1 << (tsqlParser.TIES - 339)) | (1 << (tsqlParser.TIME - 339)) | (1 << (tsqlParser.TRY - 339)) | (1 << (tsqlParser.TYPE - 339)) | (1 << (tsqlParser.TYPE_WARNING - 339)) | (1 << (tsqlParser.UNBOUNDED - 339)) | (1 << (tsqlParser.UNCOMMITTED - 339)) | (1 << (tsqlParser.UNKNOWN - 339)) | (1 << (tsqlParser.USING - 339)) | (1 << (tsqlParser.VAR - 339)) | (1 << (tsqlParser.VARP - 339)) | (1 << (tsqlParser.VIEWS - 339)) | (1 << (tsqlParser.VIEW_METADATA - 339)) | (1 << (tsqlParser.WORK - 339)) | (1 << (tsqlParser.XML - 339)) | (1 << (tsqlParser.XMLNAMESPACES - 339)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 339)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 339)) | (1 << (tsqlParser.LOCAL_ID - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (tsqlParser.DECIMAL - 403)) | (1 << (tsqlParser.ID - 403)) | (1 << (tsqlParser.STRING - 403)) | (1 << (tsqlParser.BINARY - 403)) | (1 << (tsqlParser.FLOAT - 403)) | (1 << (tsqlParser.REAL - 403)) | (1 << (tsqlParser.DOLLAR - 403)) | (1 << (tsqlParser.LR_BRACKET - 403)) | (1 << (tsqlParser.PLUS - 403)) | (1 << (tsqlParser.MINUS - 403)) | (1 << (tsqlParser.BIT_NOT - 403)))) != 0):
                    self.state = 2520
                    self.expression_list()


                self.state = 2523
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2525
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2526
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2527
                self.match(tsqlParser.STAR)
                self.state = 2528
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2529
                self.match(tsqlParser.CAST)
                self.state = 2530
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2531
                self.expression(0)
                self.state = 2532
                self.match(tsqlParser.AS)
                self.state = 2533
                localctx.alias = self.data_type()
                self.state = 2534
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2536
                self.match(tsqlParser.CONVERT)
                self.state = 2537
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2538
                self.data_type()
                self.state = 2539
                self.match(tsqlParser.COMMA)
                self.state = 2540
                self.expression(0)
                self.state = 2543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2541
                    self.match(tsqlParser.COMMA)
                    self.state = 2542
                    localctx.style = self.expression(0)


                self.state = 2545
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2547
                self.match(tsqlParser.CHECKSUM)
                self.state = 2548
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2549
                self.match(tsqlParser.STAR)
                self.state = 2550
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2551
                self.match(tsqlParser.COALESCE)
                self.state = 2552
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2553
                self.expression_list()
                self.state = 2554
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2556
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2557
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2558
                self.match(tsqlParser.DATEADD)
                self.state = 2559
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2560
                self.match(tsqlParser.ID)
                self.state = 2561
                self.match(tsqlParser.COMMA)
                self.state = 2562
                self.expression(0)
                self.state = 2563
                self.match(tsqlParser.COMMA)
                self.state = 2564
                self.expression(0)
                self.state = 2565
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2567
                self.match(tsqlParser.DATEDIFF)
                self.state = 2568
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2569
                self.match(tsqlParser.ID)
                self.state = 2570
                self.match(tsqlParser.COMMA)
                self.state = 2571
                self.expression(0)
                self.state = 2572
                self.match(tsqlParser.COMMA)
                self.state = 2573
                self.expression(0)
                self.state = 2574
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2576
                self.match(tsqlParser.DATENAME)
                self.state = 2577
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2578
                self.match(tsqlParser.ID)
                self.state = 2579
                self.match(tsqlParser.COMMA)
                self.state = 2580
                self.expression(0)
                self.state = 2581
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2583
                self.match(tsqlParser.DATEPART)
                self.state = 2584
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2585
                self.match(tsqlParser.ID)
                self.state = 2586
                self.match(tsqlParser.COMMA)
                self.state = 2587
                self.expression(0)
                self.state = 2588
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2590
                self.match(tsqlParser.IDENTITY)
                self.state = 2591
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2592
                self.data_type()
                self.state = 2595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 2593
                    self.match(tsqlParser.COMMA)
                    self.state = 2594
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2597
                    self.match(tsqlParser.COMMA)
                    self.state = 2598
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2601
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2603
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 17:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2604
                self.match(tsqlParser.NULLIF)
                self.state = 2605
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2606
                self.expression(0)
                self.state = 2607
                self.match(tsqlParser.COMMA)
                self.state = 2608
                self.expression(0)
                self.state = 2609
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2611
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 19:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2612
                self.match(tsqlParser.SYSTEM_USER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_section" ):
                return visitor.visitSwitch_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.match(tsqlParser.WHEN)
            self.state = 2616
            localctx.whenExpr = self.expression(0)
            self.state = 2617
            self.match(tsqlParser.THEN)
            self.state = 2618
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # Search_conditionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_search_condition_section" ):
                return visitor.visitSwitch_search_condition_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(tsqlParser.WHEN)
            self.state = 2621
            localctx.whenExpr = self.search_condition(0)
            self.state = 2622
            self.match(tsqlParser.THEN)
            self.state = 2623
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_table_hints" ):
                return visitor.visitWith_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2625
                self.match(tsqlParser.WITH)


            self.state = 2628
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2629
            self.table_hint()
            self.state = 2634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2630
                self.match(tsqlParser.COMMA)
                self.state = 2631
                self.table_hint()
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2637
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_with_table_hints" ):
                return visitor.visitInsert_with_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.match(tsqlParser.WITH)
            self.state = 2640
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2641
            self.table_hint()
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2642
                self.match(tsqlParser.COMMA)
                self.state = 2643
                self.table_hint()
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2649
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_hint" ):
                return visitor.visitTable_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 2651
                self.match(tsqlParser.NOEXPAND)


            self.state = 2692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 2654
                self.match(tsqlParser.INDEX)
                self.state = 2655
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2656
                self.index_value()
                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2657
                    self.match(tsqlParser.COMMA)
                    self.state = 2658
                    self.index_value()
                    self.state = 2663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2664
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 2666
                self.match(tsqlParser.INDEX)
                self.state = 2667
                self.match(tsqlParser.EQUAL)
                self.state = 2668
                self.index_value()

            elif la_ == 3:
                self.state = 2669
                self.match(tsqlParser.FORCESEEK)
                self.state = 2684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 2670
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2671
                    self.index_value()
                    self.state = 2672
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2673
                    self.match(tsqlParser.ID)
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2674
                        self.match(tsqlParser.COMMA)
                        self.state = 2675
                        self.match(tsqlParser.ID)
                        self.state = 2680
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2681
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 2682
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 2686
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 2687
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 2688
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 2689
                self.match(tsqlParser.EQUAL)
                self.state = 2690
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 2691
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_value" ):
                return visitor.visitIndex_value(self)
            else:
                return visitor.visitChildren(self)




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_index_value)
        try:
            self.state = 2696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2694
                self.r_id()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2695
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias_list" ):
                return visitor.visitColumn_alias_list(self)
            else:
                return visitor.visitChildren(self)




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2699
            self.column_alias()
            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2700
                self.match(tsqlParser.COMMA)
                self.state = 2701
                self.column_alias()
                self.state = 2706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2707
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_column_alias)
        try:
            self.state = 2711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2709
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2710
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class A_starContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_a_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_star" ):
                listener.enterA_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_star" ):
                listener.exitA_star(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitA_star" ):
                return visitor.visitA_star(self)
            else:
                return visitor.visitChildren(self)




    def a_star(self):

        localctx = tsqlParser.A_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_a_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(tsqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Expression_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_value_constructor" ):
                return visitor.visitTable_value_constructor(self)
            else:
                return visitor.visitChildren(self)




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2715
            self.match(tsqlParser.VALUES)
            self.state = 2716
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2717
            self.expression_list()
            self.state = 2718
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2719
                self.match(tsqlParser.COMMA)
                self.state = 2720
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2721
                self.expression_list()
                self.state = 2722
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2729
            self.expression(0)
            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2730
                self.match(tsqlParser.COMMA)
                self.state = 2731
                self.expression(0)
                self.state = 2736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRanking_windowed_function" ):
                return visitor.visitRanking_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2738
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2739
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2740
                self.over_clause()
                pass
            elif token in [tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2741
                self.match(tsqlParser.NTILE)
                self.state = 2742
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2743
                self.expression(0)
                self.state = 2744
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2745
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(tsqlParser.All_distinctContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2749
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (tsqlParser.STDEV - 367)) | (1 << (tsqlParser.STDEVP - 367)) | (1 << (tsqlParser.SUM - 367)) | (1 << (tsqlParser.VAR - 367)) | (1 << (tsqlParser.VARP - 367)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2750
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2751
                    self.all_distinct()


                self.state = 2754
                self.expression(0)
                self.state = 2755
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 2756
                    self.over_clause()


                pass
            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2759
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2760
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2761
                    localctx.args = self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.ALL, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 2763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                        self.state = 2762
                        self.all_distinct()


                    self.state = 2765
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2768
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 2769
                    self.over_clause()


                pass
            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2772
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 2773
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2774
                    self.all_distinct()


                self.state = 2777
                self.expression(0)
                self.state = 2778
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2780
                self.match(tsqlParser.GROUPING)
                self.state = 2781
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2782
                self.expression(0)
                self.state = 2783
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2785
                self.match(tsqlParser.GROUPING_ID)
                self.state = 2786
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2787
                self.expression_list()
                self.state = 2788
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_distinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAll_distinct" ):
                return visitor.visitAll_distinct(self)
            else:
                return visitor.visitChildren(self)




    def all_distinct(self):

        localctx = tsqlParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2794
            self.match(tsqlParser.OVER)
            self.state = 2795
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 2796
                self.match(tsqlParser.PARTITION)
                self.state = 2797
                self.match(tsqlParser.BY)
                self.state = 2798
                self.expression_list()


            self.state = 2802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 2801
                self.order_by_clause()


            self.state = 2805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 2804
                self.row_or_range_clause()


            self.state = 2807
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_or_range_clause" ):
                return visitor.visitRow_or_range_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2810
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_extent" ):
                return visitor.visitWindow_frame_extent(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_window_frame_extent)
        try:
            self.state = 2818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2812
                self.window_frame_preceding()
                pass
            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2813
                self.match(tsqlParser.BETWEEN)
                self.state = 2814
                self.window_frame_bound()
                self.state = 2815
                self.match(tsqlParser.AND)
                self.state = 2816
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_bound" ):
                return visitor.visitWindow_frame_bound(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_window_frame_bound)
        try:
            self.state = 2822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2820
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2821
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_preceding" ):
                return visitor.visitWindow_frame_preceding(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_window_frame_preceding)
        try:
            self.state = 2830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2824
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2825
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2826
                self.match(tsqlParser.DECIMAL)
                self.state = 2827
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2828
                self.match(tsqlParser.CURRENT)
                self.state = 2829
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_following" ):
                return visitor.visitWindow_frame_following(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_window_frame_following)
        try:
            self.state = 2836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2832
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2833
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2834
                self.match(tsqlParser.DECIMAL)
                self.state = 2835
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_option" ):
                return visitor.visitCreate_database_option(self)
            else:
                return visitor.visitChildren(self)




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 2872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2838
                self.match(tsqlParser.FILESTREAM)

                self.state = 2839
                self.database_filestream_option()
                self.state = 2844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2840
                        self.match(tsqlParser.COMMA)
                        self.state = 2841
                        self.database_filestream_option() 
                    self.state = 2846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,416,self._ctx)

                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2847
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 2848
                self.match(tsqlParser.EQUAL)
                self.state = 2851
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2849
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2850
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2853
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 2854
                self.match(tsqlParser.EQUAL)
                self.state = 2857
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2855
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2856
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2859
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 2860
                self.match(tsqlParser.EQUAL)
                self.state = 2861
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2862
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 2863
                self.match(tsqlParser.EQUAL)
                self.state = 2864
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2865
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 2866
                self.match(tsqlParser.EQUAL)
                self.state = 2867
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2868
                self.match(tsqlParser.DB_CHAINING)
                self.state = 2869
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2870
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 2871
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_filestream_option" ):
                return visitor.visitDatabase_filestream_option(self)
            else:
                return visitor.visitChildren(self)




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2874
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 2875
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 2876
                self.match(tsqlParser.EQUAL)
                self.state = 2877
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 2878
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 2879
                self.match(tsqlParser.EQUAL)
                self.state = 2880
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2883
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_file_spec" ):
                return visitor.visitDatabase_file_spec(self)
            else:
                return visitor.visitChildren(self)




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_database_file_spec)
        try:
            self.state = 2887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2885
                self.file_group()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2886
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_group" ):
                return visitor.visitFile_group(self)
            else:
                return visitor.visitChildren(self)




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            self.match(tsqlParser.FILEGROUP)
            self.state = 2890
            self.r_id()
            self.state = 2893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 2891
                self.match(tsqlParser.CONTAINS)
                self.state = 2892
                self.match(tsqlParser.FILESTREAM)


            self.state = 2896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 2895
                self.match(tsqlParser.DEFAULT)


            self.state = 2900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 2898
                self.match(tsqlParser.CONTAINS)
                self.state = 2899
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 2902
            self.file_spec()
            self.state = 2907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2903
                    self.match(tsqlParser.COMMA)
                    self.state = 2904
                    self.file_spec() 
                self.state = 2909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_file = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_spec" ):
                return visitor.visitFile_spec(self)
            else:
                return visitor.visitChildren(self)




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2910
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2911
            self.match(tsqlParser.NAME)
            self.state = 2912
            self.match(tsqlParser.EQUAL)
            self.state = 2915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 2913
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.state = 2914
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2917
                self.match(tsqlParser.COMMA)


            self.state = 2920
            self.match(tsqlParser.FILENAME)
            self.state = 2921
            self.match(tsqlParser.EQUAL)
            self.state = 2922
            localctx.r_file = self.match(tsqlParser.STRING)
            self.state = 2924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2923
                self.match(tsqlParser.COMMA)


            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 2926
                self.match(tsqlParser.SIZE)
                self.state = 2927
                self.match(tsqlParser.EQUAL)
                self.state = 2928
                self.file_size()
                self.state = 2930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2929
                    self.match(tsqlParser.COMMA)




            self.state = 2943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 2934
                self.match(tsqlParser.MAXSIZE)
                self.state = 2935
                self.match(tsqlParser.EQUAL)
                self.state = 2938
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 2936
                    self.file_size()
                    pass
                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 2937
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2940
                    self.match(tsqlParser.COMMA)




            self.state = 2951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 2945
                self.match(tsqlParser.FILEGROWTH)
                self.state = 2946
                self.match(tsqlParser.EQUAL)
                self.state = 2947
                self.file_size()
                self.state = 2949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2948
                    self.match(tsqlParser.COMMA)




            self.state = 2953
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # R_idContext
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_table_name" ):
                return visitor.visitFull_table_name(self)
            else:
                return visitor.visitChildren(self)




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 2955
                localctx.server = self.r_id()
                self.state = 2956
                self.match(tsqlParser.DOT)
                self.state = 2957
                localctx.database = self.r_id()
                self.state = 2958
                self.match(tsqlParser.DOT)
                self.state = 2959
                localctx.schema = self.r_id()
                self.state = 2960
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 2962
                localctx.database = self.r_id()
                self.state = 2963
                self.match(tsqlParser.DOT)
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 2964
                    localctx.schema = self.r_id()


                self.state = 2967
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 2969
                localctx.schema = self.r_id()
                self.state = 2970
                self.match(tsqlParser.DOT)


            self.state = 2974
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 2976
                localctx.database = self.r_id()
                self.state = 2977
                self.match(tsqlParser.DOT)
                self.state = 2979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 2978
                    localctx.schema = self.r_id()


                self.state = 2981
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 2983
                localctx.schema = self.r_id()
                self.state = 2984
                self.match(tsqlParser.DOT)


            self.state = 2988
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # R_idContext
            self.name = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_name" ):
                return visitor.visitSimple_name(self)
            else:
                return visitor.visitChildren(self)




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 2990
                localctx.schema = self.r_id()
                self.state = 2991
                self.match(tsqlParser.DOT)


            self.state = 2995
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.procedure = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name" ):
                return visitor.visitFunc_proc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 2997
                localctx.database = self.r_id()
                self.state = 2998
                self.match(tsqlParser.DOT)
                self.state = 3000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 388)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 388)) | (1 << (tsqlParser.ID - 388)))) != 0):
                    self.state = 2999
                    localctx.schema = self.r_id()


                self.state = 3002
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3004
                localctx.schema = self.r_id()
                self.state = 3005
                self.match(tsqlParser.DOT)


            self.state = 3009
            localctx.procedure = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_object" ):
                return visitor.visitDdl_object(self)
            else:
                return visitor.visitChildren(self)




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_ddl_object)
        try:
            self.state = 3013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3011
                self.full_table_name()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3012
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # Table_nameContext
            self.name = None # R_idContext

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name" ):
                return visitor.visitFull_column_name(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3015
                localctx.table = self.table_name()
                self.state = 3016
                self.match(tsqlParser.DOT)


            self.state = 3020
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3022
            self.r_id()
            self.state = 3027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3023
                self.match(tsqlParser.COMMA)
                self.state = 3024
                self.r_id()
                self.state = 3029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_cursor_name)
        try:
            self.state = 3032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3030
                self.r_id()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3031
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_off" ):
                return visitor.visitOn_off(self)
            else:
                return visitor.visitChildren(self)




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClustered" ):
                return visitor.visitClustered(self)
            else:
                return visitor.visitChildren(self)




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3036
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_notnull" ):
                return visitor.visitNull_notnull(self)
            else:
                return visitor.visitChildren(self)




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3038
                self.match(tsqlParser.NOT)


            self.state = 3041
            self.match(tsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_function_name" ):
                return visitor.visitScalar_function_name(self)
            else:
                return visitor.visitChildren(self)




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_scalar_function_name)
        try:
            self.state = 3048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3043
                self.func_proc_name()
                pass
            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3044
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3045
                self.match(tsqlParser.LEFT)
                pass
            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3046
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3047
                self.match(tsqlParser.CHECKSUM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3050
            self.r_id()
            self.state = 3052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 3051
                self.match(tsqlParser.IDENTITY)


            self.state = 3061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.state = 3054
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3055
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3056
                    self.match(tsqlParser.COMMA)
                    self.state = 3057
                    self.match(tsqlParser.DECIMAL)


                self.state = 3060
                self.match(tsqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_default_value)
        try:
            self.state = 3065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3063
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3064
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3067
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3068
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3069
                    self.sign()


                self.state = 3072
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3073
                    self.sign()


                self.state = 3076
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3077
                    self.sign()


                self.state = 3080
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3081
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3084
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = tsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_r_id)
        try:
            self.state = 3089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3086
                self.simple_id()
                pass
            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3087
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3088
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_id" ):
                return visitor.visitSimple_id(self)
            else:
                return visitor.visitChildren(self)




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3091
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCESEEK or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (tsqlParser.ABSOLUTE - 193)) | (1 << (tsqlParser.APPLY - 193)) | (1 << (tsqlParser.AUTO - 193)) | (1 << (tsqlParser.AVG - 193)) | (1 << (tsqlParser.BASE64 - 193)) | (1 << (tsqlParser.CALLER - 193)) | (1 << (tsqlParser.CAST - 193)) | (1 << (tsqlParser.CATCH - 193)) | (1 << (tsqlParser.CHECKSUM_AGG - 193)) | (1 << (tsqlParser.COMMITTED - 193)) | (1 << (tsqlParser.CONCAT - 193)) | (1 << (tsqlParser.CONTROL - 193)) | (1 << (tsqlParser.COOKIE - 193)) | (1 << (tsqlParser.COUNT - 193)) | (1 << (tsqlParser.COUNT_BIG - 193)) | (1 << (tsqlParser.DELAY - 193)) | (1 << (tsqlParser.DELETED - 193)) | (1 << (tsqlParser.DENSE_RANK - 193)) | (1 << (tsqlParser.DISABLE - 193)) | (1 << (tsqlParser.DYNAMIC - 193)) | (1 << (tsqlParser.ENCRYPTION - 193)) | (1 << (tsqlParser.EXPAND - 193)) | (1 << (tsqlParser.FAST - 193)) | (1 << (tsqlParser.FAST_FORWARD - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (tsqlParser.FIRST - 259)) | (1 << (tsqlParser.FOLLOWING - 259)) | (1 << (tsqlParser.FORCE - 259)) | (1 << (tsqlParser.FORCED - 259)) | (1 << (tsqlParser.FORWARD_ONLY - 259)) | (1 << (tsqlParser.FULLSCAN - 259)) | (1 << (tsqlParser.GLOBAL - 259)) | (1 << (tsqlParser.GO - 259)) | (1 << (tsqlParser.GROUPING - 259)) | (1 << (tsqlParser.GROUPING_ID - 259)) | (1 << (tsqlParser.HASH - 259)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1 << (tsqlParser.IMPERSONATE - 259)) | (1 << (tsqlParser.INSENSITIVE - 259)) | (1 << (tsqlParser.INSERTED - 259)) | (1 << (tsqlParser.ISOLATION - 259)) | (1 << (tsqlParser.KEEP - 259)) | (1 << (tsqlParser.KEEPFIXED - 259)) | (1 << (tsqlParser.KEYSET - 259)) | (1 << (tsqlParser.LAST - 259)) | (1 << (tsqlParser.LEVEL - 259)) | (1 << (tsqlParser.LOCAL - 259)) | (1 << (tsqlParser.LOCK_ESCALATION - 259)) | (1 << (tsqlParser.LOGIN - 259)) | (1 << (tsqlParser.LOOP - 259)) | (1 << (tsqlParser.MARK - 259)) | (1 << (tsqlParser.MAX - 259)) | (1 << (tsqlParser.MAXDOP - 259)) | (1 << (tsqlParser.MAXRECURSION - 259)) | (1 << (tsqlParser.MIN - 259)) | (1 << (tsqlParser.MODIFY - 259)) | (1 << (tsqlParser.NAME - 259)) | (1 << (tsqlParser.NEXT - 259)) | (1 << (tsqlParser.NOCOUNT - 259)) | (1 << (tsqlParser.NOEXPAND - 259)) | (1 << (tsqlParser.NORECOMPUTE - 259)) | (1 << (tsqlParser.NTILE - 259)) | (1 << (tsqlParser.NUMBER - 259)) | (1 << (tsqlParser.OFFSET - 259)) | (1 << (tsqlParser.ONLINE - 259)) | (1 << (tsqlParser.ONLY - 259)) | (1 << (tsqlParser.OPTIMISTIC - 259)) | (1 << (tsqlParser.OPTIMIZE - 259)) | (1 << (tsqlParser.OUT - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (tsqlParser.OUTPUT - 323)) | (1 << (tsqlParser.OWNER - 323)) | (1 << (tsqlParser.PARAMETERIZATION - 323)) | (1 << (tsqlParser.PARTITION - 323)) | (1 << (tsqlParser.PATH - 323)) | (1 << (tsqlParser.PRECEDING - 323)) | (1 << (tsqlParser.PRIOR - 323)) | (1 << (tsqlParser.PRIVILEGES - 323)) | (1 << (tsqlParser.RANGE - 323)) | (1 << (tsqlParser.RANK - 323)) | (1 << (tsqlParser.READONLY - 323)) | (1 << (tsqlParser.READ_ONLY - 323)) | (1 << (tsqlParser.RECOMPILE - 323)) | (1 << (tsqlParser.RELATIVE - 323)) | (1 << (tsqlParser.REMOTE - 323)) | (1 << (tsqlParser.REPEATABLE - 323)) | (1 << (tsqlParser.ROBUST - 323)) | (1 << (tsqlParser.ROOT - 323)) | (1 << (tsqlParser.ROW - 323)) | (1 << (tsqlParser.ROWGUID - 323)) | (1 << (tsqlParser.ROWS - 323)) | (1 << (tsqlParser.ROW_NUMBER - 323)) | (1 << (tsqlParser.SAMPLE - 323)) | (1 << (tsqlParser.SCHEMABINDING - 323)) | (1 << (tsqlParser.SCROLL - 323)) | (1 << (tsqlParser.SCROLL_LOCKS - 323)) | (1 << (tsqlParser.SELF - 323)) | (1 << (tsqlParser.SERIALIZABLE - 323)) | (1 << (tsqlParser.SIMPLE - 323)) | (1 << (tsqlParser.SIZE - 323)) | (1 << (tsqlParser.SNAPSHOT - 323)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 323)) | (1 << (tsqlParser.STATIC - 323)) | (1 << (tsqlParser.STATS_STREAM - 323)) | (1 << (tsqlParser.STDEV - 323)) | (1 << (tsqlParser.STDEVP - 323)) | (1 << (tsqlParser.SUM - 323)) | (1 << (tsqlParser.TEXTIMAGE_ON - 323)) | (1 << (tsqlParser.THROW - 323)) | (1 << (tsqlParser.TIES - 323)) | (1 << (tsqlParser.TIME - 323)) | (1 << (tsqlParser.TRY - 323)) | (1 << (tsqlParser.TYPE - 323)) | (1 << (tsqlParser.TYPE_WARNING - 323)) | (1 << (tsqlParser.UNBOUNDED - 323)) | (1 << (tsqlParser.UNCOMMITTED - 323)) | (1 << (tsqlParser.UNKNOWN - 323)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (tsqlParser.USING - 388)) | (1 << (tsqlParser.VAR - 388)) | (1 << (tsqlParser.VARP - 388)) | (1 << (tsqlParser.VIEWS - 388)) | (1 << (tsqlParser.VIEW_METADATA - 388)) | (1 << (tsqlParser.WORK - 388)) | (1 << (tsqlParser.XML - 388)) | (1 << (tsqlParser.XMLNAMESPACES - 388)) | (1 << (tsqlParser.ID - 388)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_operator" ):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_comparison_operator)
        try:
            self.state = 3108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3093
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3094
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3095
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3096
                self.match(tsqlParser.LESS)
                self.state = 3097
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3098
                self.match(tsqlParser.GREATER)
                self.state = 3099
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3100
                self.match(tsqlParser.LESS)
                self.state = 3101
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3102
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3103
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3104
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3105
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3106
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3107
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3110
            _la = self._input.LA(1)
            if not(((((_la - 413)) & ~0x3f) == 0 and ((1 << (_la - 413)) & ((1 << (tsqlParser.PLUS_ASSIGN - 413)) | (1 << (tsqlParser.MINUS_ASSIGN - 413)) | (1 << (tsqlParser.MULT_ASSIGN - 413)) | (1 << (tsqlParser.DIV_ASSIGN - 413)) | (1 << (tsqlParser.MOD_ASSIGN - 413)) | (1 << (tsqlParser.AND_ASSIGN - 413)) | (1 << (tsqlParser.XOR_ASSIGN - 413)) | (1 << (tsqlParser.OR_ASSIGN - 413)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_size" ):
                return visitor.visitFile_size(self)
            else:
                return visitor.visitChildren(self)




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self.match(tsqlParser.DECIMAL)
            self.state = 3114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (tsqlParser.GB - 265)) | (1 << (tsqlParser.KB - 265)) | (1 << (tsqlParser.MB - 265)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3113
                _la = self._input.LA(1)
                if not(((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (tsqlParser.GB - 265)) | (1 << (tsqlParser.KB - 265)) | (1 << (tsqlParser.MB - 265)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[85] = self.expression_sempred
        self._predicates[92] = self.search_condition_sempred
        self._predicates[94] = self.query_expression_sempred
        self._predicates[110] = self.table_source_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def table_source_sempred(self, localctx:Table_sourceContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         




