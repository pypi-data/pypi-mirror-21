#!/usr/bin/env python
import json
import os
import subprocess
import time
import urllib
import urllib2


def osascript(player, command):
    command = 'tell application "{0}" to {1} as string'.format(
        player,
        command
    )
    command = "osascript -e '{0}'".format(command)
    return subprocess.check_output(command, shell=True).strip()


def update_status(is_playing, text=None):
    status_text = ''
    status_emoji = ''
    if is_playing:
        status_text = text
        status_emoji = ':musical_note:'

    content = urllib.urlencode({
      'token': os.getenv('SLACK_API_TOKEN'),
      'profile': {
        "status_text": status_text,
        "status_emoji": status_emoji,
      },
    })

    opener = urllib2.build_opener(urllib2.HTTPHandler)
    url = 'https://slack.com/api/users.profile.set'
    request = urllib2.Request(url, data=content)
    request.get_method = lambda: 'POST'
    url = opener.open(request)
    if int(url.getcode()) != 200:
        print "error: {0}".format(url.getcode())

    return int(url.getcode()) != 200


def spotify_song():
    return osascript('Spotify', 'if player state is playing then name of current track & " - " & artist of current track')  # pep8


def itunes_song():
    return osascript('iTunes', 'if player state is playing then name of current track & " - " & artist of current track')  # pep8


def check_song(old_status=None, first_run=False):
    current_status = spotify_song()
    if not current_status:
        current_status = itunes_song()

    if not current_status:
        if old_status or first_run:
            print 'Not currently playing'
            update_status(is_playing=False)
        return None

    if old_status == current_status:
        return current_status

    print "Current status: {0}".format(current_status)
    update_status(is_playing=True, text=current_status)

    return current_status


def main():
    if not os.getenv('SLACK_API_TOKEN', None):
        print 'Missing SLACK_API_TOKEN environment variable'
        return

    current_status = None
    first_run = True
    while True:
        current_status = check_song(current_status, first_run)
        first_run = False
        time.sleep(10)


if __name__ == "__main__":
    main()
