Windows Printer Installer
=========================

WPI 是一个使用 Python 3 编写的安装非本地打印机 （包括驱动，端口） 的工具。


通过 Resilio Sync (原 BitTorrent Sync)  直接获取独立程序
=============================================
如果你只想获取独立的程序，那么需使用 Resilio Sync 同步以生成好的程序。

Resilio Sync 下载地址：

https://www.resilio.com/platforms/desktop/

同步密钥：

B3KUPPWRRZIVFOF4FGBVWMYJS2C53VLQB


通过 Python 模块方式安装
================

先安装 `Python 3 <https://www.python.org/downloads/windows/>`_ (建议选择的 32位 3.4 版)，安装时注意勾选 pip 组件。

然后手动下载安装相应版本的 `pywin32 <https://sourceforge.net/projects/pywin32/files/pywin32/>`_

再以管理员管理员权限运行：
::

    pip install wpi


完成安装后，wpi 应该就可以直接在命令行下运行了。

注：为了解压在压缩包里的驱动，应当下载安装 `7-Zip <http://www.7-zip.org/download.html>`_ ，
如果想把 wpi 打包成可以多系统下执行的独立程序，应当安装32位的 7-Zip

生成独立的程序
-------

如果想在没有 Python 环境的系统下运行，得把 Python 环境和 wpi 及其依赖的模块打包在一起。
先安装 Pyinstaller：
::

    pip install pyinstaller


然后运行 wpi 的打包命令:
::

   wpi2exe


这样会生成独立的 exe 文件， wpi2exe 使用 *LOCALAPPDATA%\\wpi2exe\\config.py* 作为配置文件，如果此文件不存在，*wpi2exe* 会自动创建它。
可以编辑它以设置输出目录等。正如后缀名所示，此配置文件是一个 Python 脚本。


参数用法
====

命令行参数的定义类似 Python 函数。

具名参数运行例子:
::

    wpi ps=my_printers.py config=my_config.py

如果把 wpi 当成一个 Python 函数看待，那么 wpi 的定义就是 *wpi(ps=None, config=None)*。


参数 ps
-----

*ps* 用来指定一个已定义了打印机列表的文件。


参数 config
---------

*config* 用来指定配置文件。


独立的 exe 运行和模块脚本运行的行为的不同
=======================

虽然两种方式运行时参数一样，当时当参数不全时，或 *config* 里的某些项目没有设置时，程序的行为不一样。


以独立的 exe 方式运行时的行为
-----------------

资源目录是程序同目录


如果没有提供 *config* 参数，则会使用同目录下的 *config.py* 作为配置文件。

如果配置文件中的 *drivers_dir* 没有设置，则会使用 *程序同目录下的 drivers* 作为驱动目录。

如果没有 ps 参数，则会使用程序同目录下的 *ps.py*，如果不存在这个文件，就会进入交互模式。


以模块脚本方式运行时的行为
-------------

资源目录是 *%LOCALAPPDATA%*


如果没有提供 *config* 参数，则会使用 *%LOCALAPPDATA%\\wpi\\config.py* 作为配置文件。

如果配置文件中的 drivers_dir 没有设置，则会使用 *%LOCALAPPDATA%\\wpi\\drivers* 作为驱动目录。

如果没有 ps 参数，会进入交互式模式。


%LOCALAPPDATA% 在哪？
``````````````````
它是一个环境变量，如果你的账户名是 *韩梅梅*，而且系统是 Windows 7 的话，
那么 *%LOCALAPPDATA%* 可能就是： *C:\\Users\\韩梅梅\\AppData\\Local\\*


问：交互式界面里的 m 命令有什么用？
===================

创建配置文件
``````
m 命令会在 *资源目录* 里创建 *config\_.py*，这个是样例配置文件，仅作为参考，如果文件内容被修改过，再一次执行 m 命令时会重写这个文件。

正真的默认配置文件名是 *config.py*，如果 *config.py* 不存在，也会创建它。

**应当尝试修改 config.py 以贴合你的使用**


创建样例打印机列表文件
```````````
m 命令会在 *资源目录* 里创建 *ps\_.py*，样例打印机列表文件，同样仅作为参考。 m 命令再一次运行时，同样也会重写它。

**强烈建议参考它来编写你自己的打印机列表文件！**


创建供存放打印机驱动的目录结构
```````````````
如题，请再查看上面关于运行时行为的那段和 *m 命令* 以确定驱动目录在哪和怎么创建目录结构。

**打开此目录看看里面的结构，就能明白怎么放置驱动程序了**

驱动程序包裹可放置在特定的系统版本目录下，也可放置在上一级，这样就表示这个驱动可用于多系统。

下载的驱动文件只要是 7-Zip 可以解包（解压）的文件就无需手动解包。程序会自动寻找包裹里的 inf 文件并比较在打印机列表文件里给定的驱动名，符合就会使用此包裹里的这个 inf 文件。
包裹里的 inf 文件只能在第一级包裹里，举个反例: 把 inf 打包为包裹1，然后把包裹1再打包成包裹2。这样的情况下程序就找不到 inf 文件了，因为包裹2的文件列表里无 inf 文件！


问：怎么运行一下程序就安装好打印机？
==================

必须使用打包好的单一的 wpi.exe，并且需要把编写好的打印机文件以 *ps.py* 命名后放置在程序同目录下。
