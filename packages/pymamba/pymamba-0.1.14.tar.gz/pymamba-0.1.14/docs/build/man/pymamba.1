.\" Man page generated from reStructuredText.
.
.TH "PYMAMBA" "1" "Apr 10, 2017" "0.1" "pymamba"
.SH NAME
pymamba \- pymamba Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.TP
.B Contents:
pymamba \- Python Database Library 0.11
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.sp
PyMamba is a database schema that sits on top of the LMDB storage engine. It provides a
higher level of functionality than is provided by the RAW LMDB API, primarily the ability
to transparently handle indexes, and the ability to transparently read and write Python
variables (including list/dict structures). Currently it\(aqs \fImuch\fP faster than Mongo, but 
not feature complete and not exhaustively tested in the real world.
.INDENT 0.0
.TP
.B class mamba.Database(name, conf=None)
Bases: \fBobject\fP
.sp
Representation of a Database, this is the main API class
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- The name of the database to open
.IP \(bu 2
\fBconf\fP (\fIdict\fP) \-\- Any additional or custom options for this environment
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B close()
Close the current database
.UNINDENT
.INDENT 7.0
.TP
.B exists(name)
Test whether a table with a given name already exists
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- Table name
.TP
.B Returns
True if table exists
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B table(name)
Return a reference to a table with a given name, creating first if it doesn\(aqt exist
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- Name of table
.TP
.B Returns
Reference to table
.TP
.B Return type
\fI\%Table\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tables
PROPERTY \- Generate a list of names of the tables associated with this database
.INDENT 7.0
.TP
.B Getter
Returns a list of table names
.TP
.B Type
list
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mamba.Index(env, name, func, conf)
Bases: \fBobject\fP
.sp
Mapping for table indecies, this is version #2 with a much simplified indexing scheme.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBenv\fP (\fIEnvironment\fP) \-\- An LMDB Environment object
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- The name of the index we\(aqre working with
.IP \(bu 2
\fBfunc\fP (\fIstr\fP) \-\- Is a Python format string that specified the index layout
.IP \(bu 2
\fBconf\fP (\fIdict\fP) \-\- Configuration options for this index
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B count(txn=None)
Count the number of items currently present in this index
.INDENT 7.0
.TP
.B Parameters
\fBtxn\fP (\fITransaction\fP) \-\- Is an open Transaction
.TP
.B Returns
The number if items in the index
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cursor(txn)
Return a cursor into the current index
.INDENT 7.0
.TP
.B Parameters
\fBtxn\fP (\fITransaction\fP) \-\- Is an open Transaction
.TP
.B Returns
An active Cursor object
.TP
.B Return type
Cursor
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B delete(txn, key, record)
Delete the selected record from the current index
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- Is an open (write) Transaction
.IP \(bu 2
\fBkey\fP (\fIstr\fP) \-\- A database key
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- A currently existing record
.UNINDENT
.TP
.B Returns
True if the record was deleted
.TP
.B Return type
boolean
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B drop(txn)
Drop the current index
.INDENT 7.0
.TP
.B Parameters
\fBtxn\fP (\fITransaction\fP) \-\- Is an open Transaction
.TP
.B Returns
The record recovered from the index
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B empty(txn)
Empty the current index of all records
.INDENT 7.0
.TP
.B Parameters
\fBtxn\fP \-\- Is an open Transaction
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get(txn, record)
Read a single record from the index
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- Is an open Transaction
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- Is a record template from which we can extract an index field
.UNINDENT
.TP
.B Returns
The record recovered from the index
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B put(txn, key, record)
Write a new entry into the index
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- Is an open Transaction
.IP \(bu 2
\fBkey\fP (\fIstr|int\fP) \-\- Is the key to of the record to write
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- Is the record to write
.UNINDENT
.TP
.B Returns
True if the record was written successfully
.TP
.B Return type
boolean
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B reindex(db, txn=None)
Reindex the current index, rec
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdb\fP (\fIdatabase handle\fP) \-\- A handle to the database table to index
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- An open transaction
.UNINDENT
.TP
.B Returns
Number of index entries created
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B save(txn, key, old, rec)
Save any changes to the keys for this record
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- An active transaction
.IP \(bu 2
\fBkey\fP (\fIstr\fP) \-\- The key for the record in question
.IP \(bu 2
\fBold\fP (\fIdict\fP) \-\- The record in it\(aqs previous state
.IP \(bu 2
\fBrec\fP (\fIdict\fP) \-\- The record in it\(aqs amended state
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_key(cursor, record)
Set the cursor to the first matching record
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcursor\fP (\fICursor\fP) \-\- An active cursor
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- A template record specifying the key to use
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_next(cursor, record)
Find the next matching record lower than the key specified
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcursor\fP (\fICursor\fP) \-\- An active cursor
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- A template record specifying the key to use
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_range(cursor, record)
Set the cursor to the first matching record
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcursor\fP (\fICursor\fP) \-\- An active cursor
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- A template record specifying the key to use
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class mamba.Table(env, name=None)
Bases: \fBobject\fP
.sp
Representation of a database table
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBenv\fP (\fIEnvironment\fP) \-\- An open database Environment
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- A table name
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B append(record, txn=None)
Append a new record to this table
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- The record to append
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- An open transaction
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B delete(keys)
Delete a record from this table
.INDENT 7.0
.TP
.B Parameters
\fBkeys\fP (\fIlist\fP) \-\- A list of database keys to delete
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B drop(delete=True)
Drop this tablex and all it\(aqs indecies
.INDENT 7.0
.TP
.B Parameters
\fBdelete\fP (\fIbool\fP) \-\- Whether we delete the table after removing all items
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B empty()
Clear all records from the current table
.INDENT 7.0
.TP
.B Returns
True if the table was cleared
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B exists(name)
See whether an index already exists or not
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- Name of the index
.TP
.B Returns
True if index already exists
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B find(index=None, expression=None, limit=9223372036854775807)
Find all records either sequential or based on an index
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\fIstr\fP) \-\- The name of the index to use [OR use natural order]
.IP \(bu 2
\fBexpression\fP (\fIfunction\fP) \-\- An optional filter expression
.IP \(bu 2
\fBlimit\fP (\fIint\fP) \-\- The maximum number of records to return
.UNINDENT
.TP
.B Returns
The next record (generator)
.TP
.B Return type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get(key)
Get a single record based on it\(aqs key
.INDENT 7.0
.TP
.B Parameters
\fBkey\fP (\fIstr\fP) \-\- The _id of the record to get
.TP
.B Returns
The requested record
.TP
.B Return type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B index(name, func=None, duplicates=False)
Return a reference for a names index, or create if not available
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- The name of the index to create
.IP \(bu 2
\fBfunc\fP (\fIstr\fP) \-\- A specification of the index, !<function>|<field name>
.IP \(bu 2
\fBduplicates\fP (\fIbool\fP) \-\- Whether this index will allow duplicate keys
.UNINDENT
.TP
.B Returns
A reference to the index, created index, or None if index creation fails
.TP
.B Return type
\fI\%Index\fP
.TP
.B Raises
lmdb_Aborted on error
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B indexes
PROPERTY \- Recover a list of indexes for this table
.INDENT 7.0
.TP
.B Getter
The indexes for this table
.TP
.B Type
list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B range(index, lower, upper)
Find all records with a key >= lower and <= upper
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\fIstr\fP) \-\- The name of the index to search
.IP \(bu 2
\fBlower\fP (\fIdict\fP) \-\- A template record containing the lower end of the range
.IP \(bu 2
\fBupper\fP (\fIdict\fP) \-\- A template record containing the upper end of the range
.UNINDENT
.TP
.B Returns
The records with keys witin the specified range (generator)
.TP
.B Type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B records
PROPERTY \- Recover the number of records in this table
.INDENT 7.0
.TP
.B Getter
Record count
.TP
.B Type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B save(record, txn=None)
Save an changes to a pre\-existing record
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- The record to be saved
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- An open transaction
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B seek(index, record)
Find all records matching the key in the specified index.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBindex\fP (\fIstr\fP) \-\- Name of the index to seek on
.IP \(bu 2
\fBrecord\fP (\fIdict\fP) \-\- A template record containing the fields to search on
.UNINDENT
.TP
.B Returns
The records with matching keys (generator)
.TP
.B Type
dict
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B unindex(name, txn=None)
Delete the named index
.INDENT 7.0
.TP
.B Returns

.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- The name of the index
.IP \(bu 2
\fBtxn\fP (\fITransaction\fP) \-\- An active transaction
.UNINDENT
.TP
.B Raises
lmdb_IndexMissing if the index does not exist
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xAborted
Bases: \fBException\fP
.sp
Exception \- transaction did not complete
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xIndexExists
Bases: \fBException\fP
.sp
Exception \- index already exists
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xIndexMissing
Bases: \fBException\fP
.sp
Exception \- index does not exist
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xNotFound
Bases: \fBException\fP
.sp
Exception \- expected record was not found
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xTableExists
Bases: \fBException\fP
.sp
Exception \- database table already exists
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xTableMissing
Bases: \fBException\fP
.sp
Exception \- database table does not exist
.UNINDENT
.INDENT 0.0
.TP
.B exception mamba.xWriteFail
Bases: \fBException\fP
.sp
Exception \- write failed
.UNINDENT
.SH AUTHOR
Gareth Bult
.SH COPYRIGHT
2017, Gareth Bult
.\" Generated by docutils manpage writer.
.
