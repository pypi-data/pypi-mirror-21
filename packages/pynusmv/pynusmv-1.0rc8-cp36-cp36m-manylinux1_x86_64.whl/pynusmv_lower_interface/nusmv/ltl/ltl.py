# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ltl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ltl')
    _ltl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ltl', [dirname(__file__)])
        except ImportError:
            import _ltl
            return _ltl
        try:
            _mod = imp.load_module('_ltl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ltl = swig_import_helper()
    del swig_import_helper
else:
    import _ltl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Ltl_StructCheckLtlSpec_TAG(_object):
    """Proxy of C Ltl_StructCheckLtlSpec_TAG struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ltl_StructCheckLtlSpec_TAG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ltl_StructCheckLtlSpec_TAG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop"] = _ltl.Ltl_StructCheckLtlSpec_TAG_prop_set
    __swig_getmethods__["prop"] = _ltl.Ltl_StructCheckLtlSpec_TAG_prop_get
    if _newclass:
        prop = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_prop_get, _ltl.Ltl_StructCheckLtlSpec_TAG_prop_set)
    __swig_setmethods__["fsm"] = _ltl.Ltl_StructCheckLtlSpec_TAG_fsm_set
    __swig_getmethods__["fsm"] = _ltl.Ltl_StructCheckLtlSpec_TAG_fsm_get
    if _newclass:
        fsm = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_fsm_get, _ltl.Ltl_StructCheckLtlSpec_TAG_fsm_set)
    __swig_setmethods__["bdd_enc"] = _ltl.Ltl_StructCheckLtlSpec_TAG_bdd_enc_set
    __swig_getmethods__["bdd_enc"] = _ltl.Ltl_StructCheckLtlSpec_TAG_bdd_enc_get
    if _newclass:
        bdd_enc = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_bdd_enc_get, _ltl.Ltl_StructCheckLtlSpec_TAG_bdd_enc_set)
    __swig_setmethods__["dd"] = _ltl.Ltl_StructCheckLtlSpec_TAG_dd_set
    __swig_getmethods__["dd"] = _ltl.Ltl_StructCheckLtlSpec_TAG_dd_get
    if _newclass:
        dd = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_dd_get, _ltl.Ltl_StructCheckLtlSpec_TAG_dd_set)
    __swig_setmethods__["symb_table"] = _ltl.Ltl_StructCheckLtlSpec_TAG_symb_table_set
    __swig_getmethods__["symb_table"] = _ltl.Ltl_StructCheckLtlSpec_TAG_symb_table_get
    if _newclass:
        symb_table = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_symb_table_get, _ltl.Ltl_StructCheckLtlSpec_TAG_symb_table_set)
    __swig_setmethods__["tableau_layer"] = _ltl.Ltl_StructCheckLtlSpec_TAG_tableau_layer_set
    __swig_getmethods__["tableau_layer"] = _ltl.Ltl_StructCheckLtlSpec_TAG_tableau_layer_get
    if _newclass:
        tableau_layer = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_tableau_layer_get, _ltl.Ltl_StructCheckLtlSpec_TAG_tableau_layer_set)
    __swig_setmethods__["s0"] = _ltl.Ltl_StructCheckLtlSpec_TAG_s0_set
    __swig_getmethods__["s0"] = _ltl.Ltl_StructCheckLtlSpec_TAG_s0_get
    if _newclass:
        s0 = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_s0_get, _ltl.Ltl_StructCheckLtlSpec_TAG_s0_set)
    __swig_setmethods__["spec_formula"] = _ltl.Ltl_StructCheckLtlSpec_TAG_spec_formula_set
    __swig_getmethods__["spec_formula"] = _ltl.Ltl_StructCheckLtlSpec_TAG_spec_formula_get
    if _newclass:
        spec_formula = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_spec_formula_get, _ltl.Ltl_StructCheckLtlSpec_TAG_spec_formula_set)
    __swig_setmethods__["oreg2smv"] = _ltl.Ltl_StructCheckLtlSpec_TAG_oreg2smv_set
    __swig_getmethods__["oreg2smv"] = _ltl.Ltl_StructCheckLtlSpec_TAG_oreg2smv_get
    if _newclass:
        oreg2smv = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_oreg2smv_get, _ltl.Ltl_StructCheckLtlSpec_TAG_oreg2smv_set)
    __swig_setmethods__["ltl2smv"] = _ltl.Ltl_StructCheckLtlSpec_TAG_ltl2smv_set
    __swig_getmethods__["ltl2smv"] = _ltl.Ltl_StructCheckLtlSpec_TAG_ltl2smv_get
    if _newclass:
        ltl2smv = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_ltl2smv_get, _ltl.Ltl_StructCheckLtlSpec_TAG_ltl2smv_set)
    __swig_setmethods__["negate_formula"] = _ltl.Ltl_StructCheckLtlSpec_TAG_negate_formula_set
    __swig_getmethods__["negate_formula"] = _ltl.Ltl_StructCheckLtlSpec_TAG_negate_formula_get
    if _newclass:
        negate_formula = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_negate_formula_get, _ltl.Ltl_StructCheckLtlSpec_TAG_negate_formula_set)
    __swig_setmethods__["removed_layer"] = _ltl.Ltl_StructCheckLtlSpec_TAG_removed_layer_set
    __swig_getmethods__["removed_layer"] = _ltl.Ltl_StructCheckLtlSpec_TAG_removed_layer_get
    if _newclass:
        removed_layer = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_removed_layer_get, _ltl.Ltl_StructCheckLtlSpec_TAG_removed_layer_set)
    __swig_setmethods__["do_rewriting"] = _ltl.Ltl_StructCheckLtlSpec_TAG_do_rewriting_set
    __swig_getmethods__["do_rewriting"] = _ltl.Ltl_StructCheckLtlSpec_TAG_do_rewriting_get
    if _newclass:
        do_rewriting = _swig_property(_ltl.Ltl_StructCheckLtlSpec_TAG_do_rewriting_get, _ltl.Ltl_StructCheckLtlSpec_TAG_do_rewriting_set)

    def __init__(self):
        """__init__(Ltl_StructCheckLtlSpec_TAG self) -> Ltl_StructCheckLtlSpec_TAG"""
        this = _ltl.new_Ltl_StructCheckLtlSpec_TAG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ltl.delete_Ltl_StructCheckLtlSpec_TAG
    __del__ = lambda self: None
Ltl_StructCheckLtlSpec_TAG_swigregister = _ltl.Ltl_StructCheckLtlSpec_TAG_swigregister
Ltl_StructCheckLtlSpec_TAG_swigregister(Ltl_StructCheckLtlSpec_TAG)


def witness(fsm: 'BddFsm_ptr', enc: 'BddEnc_ptr', feasible: 'bdd_ptr') -> "node_ptr":
    """witness(BddFsm_ptr fsm, BddEnc_ptr enc, bdd_ptr feasible) -> node_ptr"""
    return _ltl.witness(fsm, enc, feasible)
PRIuPTR = _ltl.PRIuPTR
PRIdPTR = _ltl.PRIdPTR
LLU = _ltl.LLU
LLO = _ltl.LLO
LLX = _ltl.LLX
false = _ltl.false
true = _ltl.true
OUTCOME_GENERIC_ERROR = _ltl.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _ltl.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _ltl.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _ltl.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _ltl.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _ltl.OUTCOME_SUCCESS

def print_ltlspec(arg1: 'FILE *', arg2: 'Prop_ptr') -> "void":
    """print_ltlspec(FILE * arg1, Prop_ptr arg2)"""
    return _ltl.print_ltlspec(arg1, arg2)

def Ltl_Init() -> "void":
    """Ltl_Init()"""
    return _ltl.Ltl_Init()

def Ltl_CheckLtlSpec(prop: 'Prop_ptr') -> "void":
    """Ltl_CheckLtlSpec(Prop_ptr prop)"""
    return _ltl.Ltl_CheckLtlSpec(prop)

def Ltl_spec_to_hierarchy(spec: 'Expr_ptr', context: 'node_ptr', st: 'SymbTable_ptr', what2smv: 'node_ptr (*)(unsigned int,node_ptr)', layer: 'SymbLayer_ptr', outfh: 'FlatHierarchy_ptr') -> "void":
    """Ltl_spec_to_hierarchy(Expr_ptr spec, node_ptr context, SymbTable_ptr st, node_ptr (*)(unsigned int,node_ptr) what2smv, SymbLayer_ptr layer, FlatHierarchy_ptr outfh)"""
    return _ltl.Ltl_spec_to_hierarchy(spec, context, st, what2smv, layer, outfh)

def Ltl_apply_input_vars_rewriting(spec: 'Expr_ptr', st: 'SymbTable_ptr', layer: 'SymbLayer_ptr', outfh: 'FlatHierarchy_ptr') -> "Expr_ptr":
    """Ltl_apply_input_vars_rewriting(Expr_ptr spec, SymbTable_ptr st, SymbLayer_ptr layer, FlatHierarchy_ptr outfh) -> Expr_ptr"""
    return _ltl.Ltl_apply_input_vars_rewriting(spec, st, layer, outfh)

def Ltl_StructCheckLtlSpec_create(prop: 'Prop_ptr') -> "Ltl_StructCheckLtlSpec_ptr":
    """Ltl_StructCheckLtlSpec_create(Prop_ptr prop) -> Ltl_StructCheckLtlSpec_TAG"""
    return _ltl.Ltl_StructCheckLtlSpec_create(prop)

def Ltl_StructCheckLtlSpec_destroy(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "void":
    """Ltl_StructCheckLtlSpec_destroy(Ltl_StructCheckLtlSpec_TAG arg1)"""
    return _ltl.Ltl_StructCheckLtlSpec_destroy(arg1)

def Ltl_StructCheckLtlSpec_set_oreg2smv(arg1: 'Ltl_StructCheckLtlSpec_TAG', oreg2smv: 'Ltl_StructCheckLtlSpec_oreg2smv') -> "void":
    """Ltl_StructCheckLtlSpec_set_oreg2smv(Ltl_StructCheckLtlSpec_TAG arg1, Ltl_StructCheckLtlSpec_oreg2smv oreg2smv)"""
    return _ltl.Ltl_StructCheckLtlSpec_set_oreg2smv(arg1, oreg2smv)

def Ltl_StructCheckLtlSpec_set_ltl2smv(arg1: 'Ltl_StructCheckLtlSpec_TAG', ltl2smv: 'Ltl_StructCheckLtlSpec_ltl2smv') -> "void":
    """Ltl_StructCheckLtlSpec_set_ltl2smv(Ltl_StructCheckLtlSpec_TAG arg1, Ltl_StructCheckLtlSpec_ltl2smv ltl2smv)"""
    return _ltl.Ltl_StructCheckLtlSpec_set_ltl2smv(arg1, ltl2smv)

def Ltl_StructCheckLtlSpec_set_negate_formula(arg1: 'Ltl_StructCheckLtlSpec_TAG', negate_formula: 'boolean') -> "void":
    """Ltl_StructCheckLtlSpec_set_negate_formula(Ltl_StructCheckLtlSpec_TAG arg1, boolean negate_formula)"""
    return _ltl.Ltl_StructCheckLtlSpec_set_negate_formula(arg1, negate_formula)

def Ltl_StructCheckLtlSpec_set_do_rewriting(arg1: 'Ltl_StructCheckLtlSpec_TAG', do_rewriting: 'boolean') -> "void":
    """Ltl_StructCheckLtlSpec_set_do_rewriting(Ltl_StructCheckLtlSpec_TAG arg1, boolean do_rewriting)"""
    return _ltl.Ltl_StructCheckLtlSpec_set_do_rewriting(arg1, do_rewriting)

def Ltl_StructCheckLtlSpec_get_s0(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "bdd_ptr":
    """Ltl_StructCheckLtlSpec_get_s0(Ltl_StructCheckLtlSpec_TAG arg1) -> bdd_ptr"""
    return _ltl.Ltl_StructCheckLtlSpec_get_s0(arg1)

def Ltl_StructCheckLtlSpec_get_clean_s0(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "bdd_ptr":
    """Ltl_StructCheckLtlSpec_get_clean_s0(Ltl_StructCheckLtlSpec_TAG arg1) -> bdd_ptr"""
    return _ltl.Ltl_StructCheckLtlSpec_get_clean_s0(arg1)

def Ltl_StructCheckLtlSpec_build(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "void":
    """Ltl_StructCheckLtlSpec_build(Ltl_StructCheckLtlSpec_TAG arg1)"""
    return _ltl.Ltl_StructCheckLtlSpec_build(arg1)

def Ltl_StructCheckLtlSpec_check(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "void":
    """Ltl_StructCheckLtlSpec_check(Ltl_StructCheckLtlSpec_TAG arg1)"""
    return _ltl.Ltl_StructCheckLtlSpec_check(arg1)

def Ltl_StructCheckLtlSpec_print_result(arg1: 'Ltl_StructCheckLtlSpec_TAG') -> "void":
    """Ltl_StructCheckLtlSpec_print_result(Ltl_StructCheckLtlSpec_TAG arg1)"""
    return _ltl.Ltl_StructCheckLtlSpec_print_result(arg1)

def Ltl_StructCheckLtlSpec_build_counter_example(arg1: 'Ltl_StructCheckLtlSpec_TAG', symbols: 'NodeList_ptr') -> "Trace_ptr":
    """Ltl_StructCheckLtlSpec_build_counter_example(Ltl_StructCheckLtlSpec_TAG arg1, NodeList_ptr symbols) -> Trace_ptr"""
    return _ltl.Ltl_StructCheckLtlSpec_build_counter_example(arg1, symbols)

def Ltl_StructCheckLtlSpec_explain(arg1: 'Ltl_StructCheckLtlSpec_TAG', symbols: 'NodeList_ptr') -> "void":
    """Ltl_StructCheckLtlSpec_explain(Ltl_StructCheckLtlSpec_TAG arg1, NodeList_ptr symbols)"""
    return _ltl.Ltl_StructCheckLtlSpec_explain(arg1, symbols)
# This file is compatible with both classic and new-style classes.


