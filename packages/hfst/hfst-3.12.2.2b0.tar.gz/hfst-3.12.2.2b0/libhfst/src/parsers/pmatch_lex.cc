#line 2 "pmatch_lex.cc"

#line 4 "pmatch_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pmatch_create_buffer
#define yy_delete_buffer pmatch_delete_buffer
#define yy_flex_debug pmatch_flex_debug
#define yy_init_buffer pmatch_init_buffer
#define yy_flush_buffer pmatch_flush_buffer
#define yy_load_buffer_state pmatch_load_buffer_state
#define yy_switch_to_buffer pmatch_switch_to_buffer
#define yyin pmatchin
#define yyleng pmatchleng
#define yylex pmatchlex
#define yylineno pmatchlineno
#define yyout pmatchout
#define yyrestart pmatchrestart
#define yytext pmatchtext
#define yywrap pmatchwrap
#define yyalloc pmatchalloc
#define yyrealloc pmatchrealloc
#define yyfree pmatchfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pmatchrestart(pmatchin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pmatchleng;

extern FILE *pmatchin, *pmatchout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pmatchlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pmatchlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pmatchleng; ++yyl )\
                    if ( pmatchtext[yyl] == '\n' )\
                        --pmatchlineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --pmatchlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pmatchtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pmatchrestart()), so that the user can continue scanning by
	 * just pointing pmatchin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pmatchtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pmatchleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pmatchwrap()'s to do buffer switches
 * instead of setting up a fresh pmatchin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pmatchrestart (FILE *input_file  );
void pmatch_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pmatch_create_buffer (FILE *file,int size  );
void pmatch_delete_buffer (YY_BUFFER_STATE b  );
void pmatch_flush_buffer (YY_BUFFER_STATE b  );
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pmatchpop_buffer_state (void );

static void pmatchensure_buffer_stack (void );
static void pmatch_load_buffer_state (void );
static void pmatch_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pmatch_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pmatch_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pmatch_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pmatch_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pmatchalloc (yy_size_t  );
void *pmatchrealloc (void *,yy_size_t  );
void pmatchfree (void *  );

#define yy_new_buffer pmatch_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pmatchwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pmatchin = (FILE *) 0, *pmatchout = (FILE *) 0;

typedef int yy_state_type;

extern int pmatchlineno;

int pmatchlineno = 1;

extern char *pmatchtext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr pmatchtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pmatchtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pmatchleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[981] =
    {   0,
      136,  136,  140,  138,  136,  136,  131,  131,   64,   54,
      138,   50,  131,  121,  122,   56,   55,  133,   51,  131,
       58,   62,  127,  135,   66,  131,   67,   63,  138,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  119,   49,  120,  138,   96,   77,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  138,   59,   48,
      138,  138,  138,  138,  138,  138,  138,  138,  127,  136,
      125,    0,  137,  131,    0,  116,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  131,   60,    0,  116,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,

        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
       52,   53,  131,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,   82,  131,    0,  131,    0,    0,
      131,  131,  118,  105,  107,  131,  131,  131,  104,  131,
      106,  131,   93,  126,    0,    0,  134,   84,   80,   65,
       81,   91,    0,    0,   89,    0,    0,    0,    0,    0,
        0,    0,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  117,   61,    0,
        0,   94,  103,  103,    0,    0,    0,   96,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,  124,  123,
      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  130,    0,    0,  131,
      130,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  131,  130,  131,  131,    0,    0,    0,    0,
        0,    0,    0,    0,  130,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   90,   64,    0,    0,   97,   57,    0,
       69,   73,    0,   68,   74,   24,   72,  128,    0,   86,

       79,    0,   88,    0,    0,    0,    0,    0,    0,    0,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,   18,  131,  131,  131,  131,  131,  131,
       36,   22,  131,  131,   19,  131,  131,  131,  131,   95,
       78,   98,    0,  103,  102,  102,  101,  101,    0,    0,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
        4,  131,  129,  129,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  131,  130,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   83,   85,    0,   76,   75,  131,   71,
       70,    0,  134,  108,    0,    0,    0,    0,    0,    0,
        0,   23,  131,  131,    9,  131,  131,  131,  131,  131,
      131,   26,  131,  131,    7,  131,  131,    6,  131,   25,
       20,   21,  131,  131,  131,  131,  131,  131,  131,  131,
       99,   99,  102,  101,    0,    0,  131,  131,  131,    5,
      131,  131,    0,  131,  131,  131,    0,    0,    0,  115,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  115,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  115,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  131,  115,    0,  116,    0,    0,    0,    0,
        0,    0,    0,    0,  131,  115,  131,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   87,  128,    0,
        0,    0,    0,    0,    0,    0,   33,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,   27,  131,  131,

      131,  131,   37,  131,  131,  131,  131,   99,    0,    0,
      131,  131,  131,  131,    0,    0,    0,    0,    3,  131,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
        0,    0,    0,    0,  131,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      111,  113,    0,    0,    0,  131,  131,    2,   32,    1,
      131,  131,  131,  131,  131,  131,  131,  131,  131,   29,
      131,  131,  131,  100,    0,    0,  131,  131,  131,    0,

        0,    0,    0,  131,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  131,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,  131,    0,    0,    0,    0,    0,    0,    0,  109,
      114,  131,  131,   31,  131,    8,  131,  131,  131,  131,
       10,  131,  131,   12,  131,  131,    0,    0,  131,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  131,  115,  131,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
      131,    0,  112,  110,   15,   30,  131,   16,   17,  131,

      131,  131,  131,  131,  131,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,  131,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  131,  131,    0,   11,  131,  131,  131,  131,
      131,  131,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  131,  131,    0,    0,    0,
      131,  131,    0,  131,  131,  131,   13,  131,   38,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  131,  131,  131,    0,  131,  131,  131,  131,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  131,  131,  131,   28,  131,   14,  131,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,  131,  131,  131,  131,    0,    0,    0,    0,   43,
        0,   46,    0,    0,    0,  131,  131,   35,   34,   39,
        0,    0,    0,    0,    0,    0,  131,   40,    0,   42,
        0,   44,    0,  131,   41,    0,    0,  131,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   12,   31,   32,   33,   34,
       12,   12,   35,   12,   12,   36,   12,   37,   38,   39,
       12,   40,   41,   42,   43,   12,   44,   12,   12,   12,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   12,   67,   68,   69,   70,   71,   72,   73,
       74,   12,   75,   76,   77,   78,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   88,   89,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[90] =
    {   0,
        1,    1,    1,    1,    2,    3,    4,    3,    2,    3,
        2,    3,    3,    2,    2,    2,    2,    2,    3,    2,
        3,    3,    2,    2,    2,    3,    2,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    5,    2,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_uint16_t yy_base[1002] =
    {   0,
        0, 2703, 2704, 4260,   88,   92,  115,  204,  284,   79,
       17, 4260,  292,  278, 4260, 4260, 4260, 2683, 2670,  374,
     2676,  318,  296,  302,  288,  398, 2662, 4260,  402,  413,
      271,  275,  279,  283,  295,  452,  324,  280,  352,  360,
      412,  453,  291,  309, 4260,  482,  456,  391,  469,  457,
      473,  486,  476,  492,  504,  505,  515, 2612, 2575, 4260,
       29, 2569,   33,  269,  351,  315,  386, 2567,  559,  569,
      581, 2639, 4260,    0,  586, 2632,  445,  310,  525,  355,
      529,  533,  536,  306,  445,  573,  675,  558,  764,  585,
      589,  548,  773,  776,  762,  779,  781,  784,  551,  538,

      554, 4260,  544, 2549,  565,  338,  568,  365,  571, 2544,
     4260, 4260,  596,  574, 2541,  582,  464,  693,  518,  696,
     2537, 2584, 2591, 4260, 2576,  759,  531,  762, 2585, 2538,
      770,  774, 4260,  733,  742,  775,  847,  848,  753,  855,
      832,  851, 4260, 4260,  590,  869,  779, 2572, 2571, 4260,
     4260, 4260,    0, 2555, 4260, 2497, 2495, 2479, 2483, 2465,
     2457, 2473,  840,  839,  844,  858,  861,  870,  877,  884,
      890,  891,  896,  922,  905,  899,  908,  931,  942,  938,
      968,  914,  945,  974,  951,  954,  955, 4260, 4260, 2485,
     2476, 2452, 2475,  792,  635,  763,  807,  961,  975,  984,

      960,  989,  990,  994, 1004,  998, 1007, 1010,  279,  741,
     4260,  799,  998, 1001, 1004, 1007, 1010, 1013, 4260, 4260,
        0, 1025,  802, 1030, 1039, 1046, 1061, 1067,  348, 1070,
     1092, 1095, 1098, 1104, 1109, 1112, 4260,  785, 1193, 2468,
     1038, 1282,  787, 1089, 1106, 1136, 1152, 1155, 1157, 1173,
     1107, 1158, 2434, 1060, 1371,  868, 1211, 1121, 1214, 1217,
     1219, 1221, 1241, 1257,  943, 1109, 1297, 1259, 1454, 1457,
     1460, 1463, 1466, 1469, 1052, 1057, 1077, 1126, 1129, 1132,
     1170, 2436,  424, 4260, 1251, 2422, 2421, 1292, 4260, 2398,
     1269, 1270, 2389, 1273, 1280, 4260, 1293,  878,  908, 4260,

     4260, 2396, 4260, 2333, 2323, 2384, 2383, 2311, 2314, 2324,
     1449, 1426, 1434, 1455, 1429, 1440, 1443, 1452, 1495, 1458,
     1464, 1514, 1515, 4260, 1518, 1547, 1519, 1548, 1551, 1552,
     1529, 4260, 1555, 1565, 4260, 1532, 1569, 1535, 1566, 4260,
     4260, 4260, 1099, 1123, 4260, 1139, 4260, 1144, 2355, 1208,
     1570, 1584, 1585, 1588, 1589, 1605, 1599, 1620, 1600, 1604,
     1608, 1628, 4260,  870, 1189, 1244, 1266, 1597, 1620, 1636,
     1641, 1668, 1671, 1676, 1680, 1683, 1686, 1767, 1695, 1856,
     1707, 1174, 1712, 1666, 1726, 1729, 1787, 1475, 1790, 1793,
     1796, 1815, 1833, 1836, 1873, 1874, 1885, 1279, 2285, 1444,

     1143, 1450, 1178, 1614, 2268, 2337, 1970, 2059, 1668, 2042,
     1472, 2070, 1818, 2073, 1884, 2078, 1697, 2325, 2082, 2085,
     2088, 2091, 2110, 2128, 2148, 1684, 2057, 2153, 2166, 2169,
     1627, 1644, 1647, 4260, 4260, 2322, 4260, 4260, 1825, 4260,
     4260, 1240, 1287, 4260, 2328, 2276,    0,    0, 2259, 2296,
     2290, 4260, 1753, 1765, 4260, 1673, 1762, 1759, 1841, 1870,
     2032, 4260, 1846, 1884, 4260, 2035, 2063, 4260, 2138, 4260,
     4260, 4260, 2056, 2149, 1863, 2155, 2142, 2158, 2173, 2161,
     4260, 1305, 1541, 1546, 1583, 1797, 2193, 2194, 2202, 2205,
     2206, 2223,  820, 2234, 2217, 2224, 1805, 2101, 2193, 2241,

     2231, 2237, 2258, 2269, 2271, 2273, 2277, 1766, 2233, 2218,
     1670, 1843, 2140, 1994, 1601, 2104, 1651, 2212, 2139, 2083,
     2287, 2309, 2288, 2294, 2299, 2313, 2325, 2335, 2339, 2363,
     2375, 2379,  300, 2377, 2245, 2308, 2321, 2331, 2343, 2355,
     2358, 2389, 2409, 2427, 2395, 2185, 2368, 2120, 2382, 1751,
     2386, 1754, 2389, 2118,    0, 2439, 2044, 2465, 2295, 2468,
     2478, 2480, 2483, 2486, 2489, 2490, 2493, 2497, 2505, 2508,
     2516, 2533, 2545, 2548, 2573, 2585, 2611, 4260, 1816,    0,
     2180, 2129, 2123, 2108,    0,    0, 2245, 2457, 2458, 2469,
     2553, 2538, 2583, 2546, 2606, 2607, 2611, 4260, 2619, 2612,

     2618, 2648, 2622, 2674, 2651, 2652, 2655, 1929, 2014, 2049,
     2681, 2665, 2671, 2666, 2020, 2019, 2027, 2000, 2670, 2685,
     2691, 2694, 2702, 2718, 2732, 2739, 2743, 2044, 2739, 2428,
     2437, 2614, 2674, 2677, 2686, 2707, 2060, 2793, 2755, 2761,
     2797, 2029, 2804, 2729, 2748, 2751, 2874, 2771, 2782, 2785,
     2788, 2791, 2794, 2874,  344, 2946, 2958, 2962, 2965, 2968,
     2971, 2974, 2977, 2980, 2983, 2986, 3061, 3072, 1959,    0,
     4260, 4260,    0, 1940, 1926, 2948, 2951, 2943, 2957, 2969,
     2972, 3058, 3035, 3036, 3039, 3068, 3071, 3072, 3092, 4260,
     3108, 3100, 3101, 4260, 2111, 1852, 3113, 3104, 3121, 1858,

     1842, 1851, 1838, 3122, 3135, 3141, 3145, 1869, 3157, 3006,
     3109, 3113, 3196, 3212, 3176, 3184,    0, 3195, 3216, 3120,
     1807, 3164, 2098, 3174, 2219, 3180, 1786, 3190, 3193, 3206,
      560, 3270, 3249, 3268, 3286, 3287, 2481, 1834, 1821, 4260,
     4260, 3294, 3297, 4260, 3282, 4260, 3298, 3314, 3107, 3112,
     4260, 3326, 3313, 4260, 3318, 3332, 1769, 1745, 3327, 1735,
     1729, 1726, 1719, 1719, 1686, 3349, 3363, 3385, 3401, 3407,
     3413, 3335, 3408, 3453, 3236, 1663, 3330, 2234, 3363, 2241,
     3369, 1660, 3394, 3397, 3400, 3403, 3406, 3412, 3418, 3482,
     3488, 3500, 4260, 4260, 4260, 4260, 3495, 4260, 4260, 3465,

     3464, 3510, 3511, 3521, 3525, 1665, 1678, 1652, 1658, 1634,
     1643, 1629, 1636, 1626, 3542, 3548, 3560, 2467, 3569, 3561,
     3331, 3605, 3432, 3529, 3538, 3549, 3552, 3555, 3558, 3572,
     3583, 3591, 3655, 3661, 3673, 4260, 3628, 3638, 3637, 3683,
     3693, 3629, 1555, 1539, 1550, 1506, 1516, 1485, 1442, 1430,
     1424, 3682, 1467, 3732, 3710, 3730, 3752, 3606, 3661, 3669,
     3775,    0, 3769, 3715, 3707, 3780, 4260, 3738, 3772, 1428,
     1412, 1409, 1403, 1402, 1272, 1257, 1263, 1253, 3797, 3825,
     3833, 3845, 3869, 3890, 2535, 3800, 3806, 3889, 3866, 1204,
     1201, 1164, 1172, 1150, 1181, 1098, 1085, 1077, 3883, 3933,

     3939, 3945, 3981, 3959, 4260, 3801, 4260, 3855, 1070, 1062,
     1068, 1050, 1040, 1041, 1035, 1000,  999, 3995, 3507, 3976,
     4017, 3911, 4034, 3912, 4016,  966,  939,  932,  932, 4260,
      939, 4260,  923,  913,  926, 4054,    0, 3796, 3967, 4260,
      872,  873,  825,  825,  814,  781, 4074, 4260,  767, 4260,
      763, 4260,  747, 4098, 4260,  734,  590, 4075,  576,  608,
     4260,  555,  551,  500,  493,  494,  477,  439,  420,  407,
      378,  397,  354,  347,  300,  258,  246,  228, 4260, 4260,
     4160, 4163, 4168, 4172, 4177, 4182, 4187, 4192, 4197, 4201,
     4206, 4210, 4215, 4220, 4225, 4230, 4235, 4240, 4245, 4250,

     4254
    } ;

static yyconst flex_int16_t yy_def[1002] =
    {   0,
      980,    1,  980,  980,  980,  980,  980,  980,  981,  980,
      982,  980,  981,  980,  980,  980,  980,  980,  980,  981,
      980,  981,  980,  980,  980,  981,  980,  980,  980,  981,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  980,  980,  980,  980,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  983,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  984,  980,    7,  985,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  986,  986,  980,   30,  987,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,   30,

      982,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,   30,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,   30,  980,   30,  980,  980,
       30,   30,  980,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  988,  980,  980,  980,  980,  980,  980,  980,
      980,  980,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,  983,  983,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
        7,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  980,  986,  989,   87,
       30,  987,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  990,   87,   30,  980,   87,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,   30,  980,  980,   30,  980,  980,
       30,   30,  980,   30,   30,  980,   30,  980,  980,  980,

      980,  988,  980,  980,  980,  980,  980,  980,  980,  980,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  980,   30,   30,   30,   30,   30,   30,
       30,  980,   30,   30,  980,   30,   30,   30,   30,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  980,  983,  980,  980,  980,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  991,  992,  991,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  992,  992,  980,  980,  980,

      980,  980,  980,  980,  980,    8,  980,  993,  380,  986,
      986,  986,  986,  986,  986,  986,  986,   87,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      980,  980,  980,  980,  980,  980,  980,  980,   30,  980,
      980,  980,  980,  980,  980,  980,  994,  995,  980,  980,
      980,  980,   30,   30,  980,   30,   30,   30,   30,   30,
       30,  980,   30,   30,  980,   30,   30,  980,   30,  980,
      980,  980,   30,   30,   30,   30,   30,   30,   30,   30,
      980,  980,  980,  980,  980,  980,   30,   30,   30,   30,
       30,   30,  980,   30,   30,   30,  984,  984,  984,  980,

      986,  986,  986,  986,  986,  986,  986,  986,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  980,  980,  980,  980,  980,  980,  980,  980,
      980,   30,   30,   30,  982,  980,  980,  980,  980,  980,
      980,  980,  980,  980,   87,   30,   87,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  980,  980,  996,
      980,  994,  995,  980,  997,  998,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  980,   30,   30,

       30,   30,   30,   30,   30,   30,   30,  980,  980,  980,
       30,   30,   30,   30,  980,  980,  980,  980,   30,   30,
      986,  986,  986,  986,  986,  986,  986,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  986,  986,  986,  986,
      986,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,   87,   87,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  996,  999,
      980,  980, 1000,  997,  998,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  980,
       30,   30,   30,  980,  980,  980,   30,   30,   30,  980,

      980,  980,  980,   30,  986,  986,  986,  980,  980,  980,
      980,  980,  986,  986,  980,  980,  407, 1001,  992,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
       87,   87,  986,  986,  986,  986,  986,  999, 1000,  980,
      980,   30,   30,  980,   30,  980,   30,   30,   30,   30,
      980,   30,   30,  980,   30,   30,  980,  980,   30,  980,
      980,  980,  980,  980,  980,  980,  980,  986,  986,  980,
      980,   30,   30,   30,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,   87,
       87,  986,  980,  980,  980,  980,   30,  980,  980,   30,

       30,   30,   30,   30,   30,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  986,  380,  980,  992,
       30,   30,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,   87,   87,  986,  980,   30,   30,   30,   30,
       30,   30,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  986,  980,   30,   30,  980,  980,  980,
       87,   87,  986,   30,   30,   30,  980,   30,   30,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  986,
      980,   30,   30,   87,  986,   30,   30,   30,   30,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  986,

      980,   30,   30,   87,  980,   30,  980,   30,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  380,  992,
       30,   30,   87,   30,   30,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,   30,   87,   30,   30,  980,
      980,  980,  980,  980,  980,  980,   30,  980,  980,  980,
      980,  980,  980,   30,  980,  980,  980,   30,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,    0,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980
    } ;

static yyconst flex_uint16_t yy_nxt[4350] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   13,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   13,   34,   35,   36,   37,   38,   39,
       40,   13,   41,   42,   43,   44,   45,   46,   47,   48,
       13,   13,   49,   50,   51,   13,   13,   13,   13,   13,
       13,   52,   53,   54,   13,   13,   55,   56,   13,   13,
       57,   13,   13,   13,   58,   59,    4,   60,    4,    4,
        4,   61,   62,   63,   64,   65,   66,   67,   68,   70,
       70,   70,   70,   70,   70,   70,   70,  111,  114,  115,

      116,  117,  118,  119,  120,  121,  112,  100,  100,  100,
       71,  213,  213,  213,   71,   72,   72,   73,   72,   72,
       74,   74,   74,   72,   75,   72,   74,   76,   72,   72,
       72,   72,   72,   74,   72,   74,   74,   72,   72,   72,
       74,   72,   72,   72,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   72,   72,   72,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   85,   85,   85,   86,   87,
       88,   87,   86,   89,   86,   87,   90,   86,   86,   86,
       86,   86,   87,   86,   87,   87,   86,   86,   86,   87,
       86,   86,   86,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   91,
       86,   86,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   86,
       86,   86,   85,   85,   85,   92,   93,   94,   95,   96,
       97,   98,   99,  101,  979,  122,  102,  144,  144,  144,

      144,  101,  123,  146,  102,  148,  146,  100,   73,  188,
      978,  100,   73,  149,  150,  100,  100,  252,  145,  100,
      642,  166,  147,  147,  210,  174,  977,  101,  190,  168,
      102,  100,  100,  191,  100,  167,  100,  189,  100,  169,
      100,  100,  170,  100,  100,  172,  173,  214,  214,  183,
       73,  171,  976,  175,  192,  363,  100,   73,  100,  176,
      100,   85,  177,  181,  731,  103,  104,  105,  106,  107,
      108,  109,  110,  103,  104,  105,  106,  107,  108,  109,
      110,  126,  184,  101,  236,  100,  102,  100,  100,  182,
      230,  127,  128,  129,  216,  216,  100,  975,  130,  103,

      104,  105,  106,  107,  108,  109,  110,  101,  153,  974,
      102,  131,  132,  100,  973,  100,  214,  214,  185,  154,
      133,  100,  101,  100,  151,  102,  374,  100,  155,  215,
      215,  215,  134,  232,  232,  135,  136,  435,  137,  138,
      139,  972,  140,  141,  216,  216,  142,   73,  100,  163,
      436,  237,  100,  156,  100,  103,  104,  105,  106,  107,
      108,  109,  110,  157,  217,  217,  217,  158,  159,  160,
      161,  971,  162,  100,  164,  100,  165,  186,  970,  103,
      104,  105,  106,  107,  108,  109,  110,  178,  100,  100,
      238,  179,  100,  100,  103,  104,  105,  106,  107,  108,

      109,  110,  193,  194,  198,  100,  195,  969,  196,  100,
      187,  200,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  180,  100,   74,   74,   74,  204,   73,  100,  968,
      100,   73,  100,  199,  100,   73,  100,  100,   73,  100,
      100,  100,  277,  277,  202,  201,  205,  100,  967,  100,
      203,  100,  966,  100,  237,  100,  197,  237,  206,  207,
      144,  219,  144,  144,  965,  100,  100,  100,  100,  208,
       70,   70,   70,   70,  100,  252,  100,   85,  100,  237,
      790,  145,  220,  220,  220,  220,   72,   72,   73,   72,
      239,  237,  286,  238,  100,  265,  238,  279,  279,  100,

      287,  100,  239,  231,  231,  231,  239,  233,  233,  233,
      298,  298,  234,  234,  235,  235,  235,  964,  238,  100,
      963,  100,  100,  100,  100,  962,   87,   87,   87,  274,
      238,  266,  100,  961,  238,  114,  115,  116,  117,  118,
      119,  120,  121,  213,  213,  213,  215,  215,  215,  217,
      217,  217,  113,  113,  113,  345,  346,  100,  267,  100,
      276,  276,  276,  960,   72,   72,   72,  222,  223,  224,
      225,  226,  227,  228,  229,   85,   85,   85,   85,   85,
      240,  241,  240,   85,  242,   85,  240,  243,   85,   85,
       85,   85,  239,  240,   85,  240,  240,   85,   85,   85,

      240,   85,   85,   85,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   85,
      238,   85,   85,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   85,
       85,   85,   85,   85,   85,   85,  244,  245,  246,  247,
      248,  249,  250,  251,   85,   85,   85,   85,  237,  100,
      254,  278,  278,  278,  280,  280,  280,  285,  100,  237,
      288,  255,  237,  347,  348,  237,  210,  237,  291,  100,
      237,  265,  292,  237,  100,  100,  100,  299,  100,  147,

      147,  293,  959,  100,   73,  100,  100,  238,  343,  256,
      100,  100,  344,  344,  100,  957,  100,  364,  238,  956,
      100,  238,  100,  100,  238,  100,  238,  349,  350,  238,
      238,  100,  238,  100,  955,  100,  100,  100,  100,  953,
      270,  270,   85,   85,   85,  257,  258,  259,  260,  261,
      262,  263,  264,  268,  269,  269,  269,  271,  271,  271,
      272,  272,  273,  273,  273,  294,  295,  296,  100,  297,
      146,  311,  616,  146,  418,  100,  100,  100,  100,  100,
      100,  952,  368,  100,  100,   85,  617,  100,  951,  147,
      147,  100,  950,  100,  100,  100,  442,  100,  298,  298,

      100,  100,  100,  100,  312,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  210,  100,  313,  100,  100,
      100,  100,  100,  314,  100,  316,  100,  100,  443,  443,
      315,  100,  100,  100,  324,  100,  949,  318,  100,  948,
      100,  100,  319,  252,  100,  100,  363,  100,  317,  237,
      100,  100,  100,  100,  100,  320,  321,  100,  100,  100,
      100,  329,  100,  322,  323,  325,  100,  100,  100,  100,
      327,  100,  330,  326,  100,  100,  328,  100,  100,  946,
      332,  100,  333,  100,  337,  100,  335,  100,  238,  945,
      100,  100,  100,  944,  100,  943,  100,  100,  942,  100,

      331,  100,  941,  100,  100,  100,  100,  336,  334,  198,
      100,  100,  100,  339,  100,  100,  100,  100,  100,  338,
      100,  100,  100,  100,  100,  100,  100,   73,  354,  100,
      100,  100,   73,  940,  100,  100,  100,  100,  100,  352,
      100,   73,  356,  100,  351,  353,  100,  100,   73,  934,
      100,  100,  100,  100,  360,  100,  355,  100,  359,  100,
      357,  100,  362,   73,  933,  100,  358,  100,  100,   73,
      100,  100,   73,  100,  100,  361,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  365,  365,  365,  366,  366,
      366,  367,  367,  367,   73,  237,  100,   73,  932,  100,

       73,  100,  931,  221,  221,  221,   73,  930,  369,  369,
      369,   73,  237,  237,   73,  237,  929,  370,  370,  481,
      482,  100,  928,  100,  371,  371,  371,  237,  927,  426,
      113,  113,  113,  926,  238,  113,  113,  113,  917,  343,
      372,  372,  237,  344,  344,  373,  373,  373,   74,   74,
       74,  238,  238,  916,  238,  113,  113,  113,  237,  483,
      483,  237,  915,  237,  484,  484,  238,  240,  240,  240,
       74,   74,   74,   74,   74,   74,   74,   74,   74,  237,
      237,  238,  375,  375,  375,  395,  389,  376,  376,  376,
      377,  377,  377,   85,   85,   85,   85,  238,  914,  379,

      238,  419,  238,  397,  113,  113,  113,  431,  431,  431,
      432,  432,  432,  913,  390,  390,  390,  237,  238,  238,
      237,  537,  537,  237,  485,  237,  912,  237,  486,  486,
      391,  391,  911,  392,  392,  392,  393,  393,  380,  398,
      399,  400,  401,  402,  403,  404,  405,  237,  433,  433,
      433,  394,  394,  394,  523,  910,  238,  539,  539,  238,
      579,  579,  238,  237,  238,  237,  238,  100,  100,  100,
      909,   85,   85,   85,  381,  382,  383,  384,  385,  386,
      387,  388,   85,   85,   85,   85,  238,  100,  254,  253,
      253,  253,  420,  420,  420,  421,  421,  422,  422,  422,

      423,  423,  238,  237,  238,  100,  100,  443,  443,  100,
      439,  898,  100,  897,  100,  896,  100,  427,  427,  424,
      424,  424,  100,  100,  100,  608,  608,  256,  100,  100,
      100,  100,  100,  100,  100,  425,  100,   87,   87,   87,
      895,  100,  238,  100,  100,  100,  100,  427,  427,  427,
      427,  427,  427,  100,  100,  100,  100,  396,  396,  396,
       85,   85,   85,  257,  258,  259,  260,  261,  262,  263,
      264,   85,   85,   85,   85,  378,  406,  407,  406,  378,
      408,  378,  406,  409,  378,  378,  378,  378,  378,  406,
      378,  406,  406,  378,  378,  378,  406,  378,  378,  378,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  378,  380,  378,  378,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  378,  378,  378,  378,   85,
       85,   85,  410,  411,  412,  413,  414,  415,  416,  417,
      237,  452,  100,  237,  454,  100,  237,  455,  894,  237,
      100,  893,  237,  457,  458,  237,  100,  892,  237,  100,
      891,  237,  890,  453,  252,  100,  878,  100,  100,  100,
      100,  100,  456,  461,  100,  100,  877,  100,  459,  238,

      100,  100,  238,  100,  100,  238,  460,  462,  238,  876,
      100,  238,  100,  100,  238,  100,  100,  238,  100,  463,
      238,  100,  536,  536,  536,  464,  465,  100,  538,  538,
      538,  100,   87,   87,   87,   87,   87,   87,   87,   87,
       87,  428,  428,  428,  429,  429,  429,  430,  430,  430,
      100,  100,  566,  529,  100,  100,  100,  875,  100,  468,
      470,  483,  483,  471,  472,  100,  484,  484,  100,  466,
      874,  100,  467,  469,  873,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  473,  474,  100,  100,  479,
      100,  100,  100,  100,  477,  100,  100,  475,  100,   73,

      872,  100,  100,  609,  610,  100,  100,  871,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  476,  100,  478,
      100,  100,   73,  870,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  487,  480,  100,  100,  493,   73,  488,
      100,  100,  459,   73,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  494,  489,  491,  100,  490,  495,  492,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       73,  100,  237,   73,  500,  221,  221,  221,   73,  632,
      632,  100,   73,  100,  851,   73,  850,  252,   73,  100,
      237,  100,  540,  540,  540,  849,  496,  848,  221,  221,

      221,  510,  847,  237,  576,  113,  113,  113,  846,  100,
       86,  238,  628,  237,  221,  221,  221,  845,  237,  221,
      221,  221,  113,  113,  113,  113,  113,  113,  844,  238,
      634,  634,  237,  843,  100,  237,  100,   86,  829,  629,
      511,  589,  238,  823,  525,  525,  497,  497,  497,  498,
      498,  498,  238,  814,  499,  499,  499,  238,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   85,   85,   85,
       85,  238,  237,  500,  238,  572,  512,  513,  514,  515,
      516,  517,  518,  519,  813,  378,  378,  378,  812,  100,
      524,  524,  524,  237,  811,  100,  237,  810,  100,  237,

      809,  100,  237,  587,  526,  526,  526,   73,  527,  527,
      807,  238,   91,  485,  100,  588,  100,  486,  486,  806,
      100,  237,  591,  100,  237,  100,  100,  794,  100,  650,
      650,  590,  238,  652,  652,  238,  579,  579,  238,  237,
      793,  238,  237,  128,  627,   85,   85,   85,  501,  502,
      503,  504,  505,  506,  507,  508,   85,   85,   85,   85,
      238,  100,  520,  238,  789,  528,  528,  528,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  100,  238,  237,
      510,  238,  100,  221,  221,  221,  100,  783,  100,  766,
      237,  510,  764,  240,  240,  240,  568,  568,  521,  100,

      593,   91,  100,  763,  592,  762,  100,  100,  761,  100,
      595,  530,  530,  530,  531,  531,  531,  757,  238,  511,
      100,  509,  509,  509,  100,  522,  100,  533,  602,  238,
      511,  100,  741,  100,   85,   85,   85,  501,  502,  503,
      504,  505,  506,  507,  508,  100,  740,  100,  596,  608,
      608,  532,  532,  532,  534,  512,  513,  514,  515,  516,
      517,  518,  519,  570,  570,  444,  512,  513,  514,  515,
      516,  517,  518,  519,  509,  543,  544,  543,  509,  545,
      509,  543,  546,  509,  509,  509,  509,  509,  543,  509,
      543,  543,  509,  509,  509,  543,  509,  509,  509,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  509,  511,  509,  509,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  509,  509,  509,  509,  237,  715,
      418,  547,  548,  549,  550,  551,  552,  553,  554,   85,
       85,   85,   85,  237,  708,  556,  237,  703,  100,  695,
      695,  100,  631,  631,  631,  598,  237,  577,  577,  237,
      713,  702,  594,  701,  237,  700,  655,  238,  237,  237,
      694,  237,  100,  100,  237,  100,  100,  237,  100,  100,

      239,  597,  238,   73,  557,  238,  600,  577,  577,  577,
      577,  577,  577,  656,  673,  238,  237,  100,  238,  100,
      406,  406,  406,  238,  100,  694,  100,  238,  238,  672,
      238,  695,  695,  238,  237,  671,  238,   85,   85,   85,
      558,  559,  560,  561,  562,  563,  564,  565,  567,  567,
      567,  569,  569,  569,  237,  238,  571,  571,  571,  237,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  237,  238,  100,  237,  785,  785,  100,  221,
      221,  221,  633,  633,  633,  100,  670,  694,  573,  573,
      573,  100,  604,  238,  100,   73,  654,  100,  238,  100,

      648,  100,  252,  100,  599,  100,  574,  574,  574,  100,
      100,  238,  100,  601,  238,  607,  100,  636,  100,  100,
      630,  100,  100,  603,  100,  605,  575,  575,  575,  100,
      100,   87,   87,   87,  100,  252,  100,  237,  100,  606,
      615,  100,  100,  237,   87,   87,   87,   87,   87,   87,
      252,  618,  613,  100,  100,  100,  100,  100,  252,  100,
      100,  611,  612,  100,  237,  100,  100,  100,  100,  100,
      100,  221,  221,  221,  614,  237,  238,  237,  100,  237,
      100,  100,  238,  237,  100,  100,  100,  100,  620,  619,
      635,  635,  635,  237,  237,  100,  586,  100,  787,  787,

      237,  237,  585,  238,  239,  237,  100,  637,  100,   86,
       86,   86,  825,  825,  238,  237,  238,  621,  238,  237,
      827,  827,  238,  396,  396,  396,  239,  584,  581,  638,
      638,  237,  238,  238,  580,  578,  622,  622,  622,  238,
      238,  237,   85,  542,  238,  237,  541,  623,  623,  624,
      624,  624,  625,  625,  238,  626,  626,  626,  238,  638,
      638,  638,  638,  638,  638,  535,  378,  378,  378,  237,
      238,  485,  378,  378,  378,  657,  451,  378,  378,  378,
      238,  237,  450,  449,  238,  237,  396,  396,  396,  448,
      447,  378,  378,  378,  252,  446,  445,  643,  643,  396,

      396,  396,  444,  639,  639,  639,  252,  441,  238,  396,
      396,  396,  647,  640,  640,  640,  440,  641,  641,  641,
      238,  644,  644,  644,  238,  100,  252,  643,  643,  643,
      643,  643,  643,  645,  645,  645,  646,  646,  646,  438,
      437,  240,  240,  240,  252,  100,  543,  543,  543,  434,
      100,   85,  100,  240,  240,  240,  252,  240,  240,  240,
      649,  649,  649,  100,  651,  651,  651,  653,  653,  653,
      100,  237,  100,  500,  237,  100,  114,  115,  116,  117,
      118,  119,  120,  121,  237,   85,  237,  237,  100,  237,
      100,  343,  237,  100,  100,  237,  237,  342,  239,  237,

      100,  341,  100,  237,  340,  100,  509,  509,  509,   86,
      238,  237,  677,  238,  237,  509,  509,  509,  100,  100,
      100,  100,  237,  238,  676,  238,  238,  310,  238,  309,
      100,  238,  678,  308,  238,  238,   86,  307,  238,  237,
      306,  237,  238,  555,  555,  555,  658,  658,  658,  305,
      238,  237,  239,  238,  237,  304,  659,  659,  660,  660,
      660,  238,  661,  661,  662,  662,  662,  663,  406,  406,
      406,  406,  406,  406,  100,  406,  406,  406,  238,  237,
      238,  303,  100,  406,  406,  406,  664,  664,  664,  100,
      238,  237,  680,  238,  665,  665,  665,  301,  300,  100,

      290,  100,  682,  289,  284,  667,  667,  100,  283,  100,
      282,  666,  666,  666,  100,  281,  100,  237,  238,  100,
      679,  275,  218,  253,  253,  253,  253,  253,  253,  212,
      238,  668,  668,  681,   73,  667,  667,  667,  667,  667,
      667,   73,  100,  100,  100,  218,  100,  100,  100,  212,
      211,  253,  253,  253,  100,  100,  238,  210,  100,  683,
      684,  668,  668,  668,  668,  668,  668,  100,  100,  100,
      100,  686,  100,  100,  100,  100,  685,  687,  689,  100,
      100,  100,  100,  100,  100,  100,  690,  100,  100,  688,
      152,  100,  509,  509,  509,  143,  125,  237,  696,  124,

      237,  100,  100,  980,  692,  691,  100,  100,  237,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  697,
      699,  100,  693,  698,  237,   69,  100,  100,  100,  100,
      980,  100,  100,  100,  100,  100,  238,  100,  237,  238,
      980,  980,  100,  980,  100,  237,  100,  238,  100,  237,
      980,  704,  509,  509,  509,  710,  710,  710,  980,  709,
      709,  237,  980,  238,  711,  711,  711,  237,  980,   86,
       86,   86,   86,   86,   86,  980,  980,  238,  980,  980,
       86,   86,   86,  980,  238,  712,  712,  712,  238,  709,
      709,  709,  709,  709,  709,  980,   86,   86,   86,  237,

      238,  980,  980,  237,  980,  980,  238,  396,  396,  396,
      705,  705,  705,  714,  714,  980,  980,  706,  706,  706,
      980,  707,  707,  707,  716,  716,  396,  396,  396,  396,
      396,  396,  980,  378,  378,  378,  980,  980,  238,  378,
      378,  378,  238,  714,  714,  714,  714,  714,  714,  543,
      543,  543,  980,  980,  716,  716,  716,  716,  716,  716,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  728,
      728,  728,  729,  729,  729,  378,  378,  378,  396,  717,
      717,  717,  396,  718,  396,  717,  719,  396,  396,  396,
      396,  396,  717,  396,  717,  717,  396,  396,  396,  717,

      396,  396,  396,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  396,  397,
      396,  396,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  396,  396,
      396,  396,  730,  730,  730,  720,  721,  722,  723,  724,
      725,  726,  727,   85,  237,  980,  732,  732,  237,  980,
      980,  237,  980,  980,  237,  980,  980,  237,  980,  100,
      237,  744,  980,  237,  100,  980,  237,  100,  980,  237,
      980,  980,  237,  100,  980,  980,  732,  732,  732,  732,

      732,  732,  742,  238,  100,  100,  100,  238,  100,  100,
      238,  100,  100,  238,  100,  980,  238,  743,  100,  238,
      100,  980,  238,  980,  980,  238,  980,  980,  238,  980,
      100,  238,  100,  100,  980,  100,  555,  555,  555,  745,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  733,
      733,  733,  734,  734,  734,  735,  735,  735,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  237,  980,  980,
      746,  100,  100,  980,  980,  100,  980,  980,  237,  980,
      980,  736,  736,  751,  509,  509,  509,  980,  980,  747,
      748,  980,  737,  737,  100,  980,  100,  100,  100,  100,

      100,  980,  100,  749,  100,  980,  238,  100,  100,  980,
      980,  736,  736,  736,  736,  736,  736,  238,  750,  100,
      754,  100,  737,  737,  737,  737,  737,  737,  100,  100,
      758,  100,  100,  100,  100,  752,  100,  100,  760,  765,
      100,  237,  753,  100,  100,  980,  980,  237,  100,  100,
      755,  237,  980,  100,  980,  100,  980,  100,  100,  980,
      980,  100,  100,  100,  100,  100,  756,  100,  800,  100,
      100,  100,  759,  100,  100,  100,  100,  767,  767,  801,
      238,  980,  100,  100,  100,  100,  238,  509,  509,  509,
      238,  509,  509,  509,  980,  980,  770,  770,  717,  717,

      717,  773,  237,  980,  771,  771,  980,  767,  767,  767,
      767,  767,  767,   86,   86,   86,  768,  768,  237,   86,
       86,   86,  510,   86,   86,   86,  770,  770,  770,  770,
      770,  770,  769,  769,  771,  771,  771,  771,  771,  771,
      774,  238,  784,  784,  784,  980,  768,  768,  768,  768,
      768,  768,  786,  786,  786,  237,  980,  238,  788,  788,
      788,  511,  769,  769,  769,  769,  769,  769,  543,  543,
      543,  543,  543,  543,  237,  980,  775,  776,  777,  778,
      779,  780,  781,  782,  543,  543,  543,   85,  980,  980,
      791,  791,  237,  237,  238,  980,  980,  512,  513,  514,

      515,  516,  517,  518,  519,  980,  795,  792,  792,  796,
      798,  980,  980,  238,  772,  772,  772,  980,  100,  980,
      791,  791,  791,  791,  791,  791,  799,  555,  555,  555,
      100,  238,  238,  100,  100,  980,  797,  792,  792,  792,
      792,  792,  792,  100,  808,  100,  555,  555,  555,  100,
      100,  856,  252,  980,  100,  100,  802,  100,  100,  100,
      100,  100,  100,  100,  555,  555,  555,  100,  100,  815,
      815,  100,  980,  980,  100,  100,  100,  100,  980,  100,
      803,  100,  805,  816,  816,  804,  980,  100,  100,  100,
      100,  237,  100,  100,  100,  100,  100,  980,  100,  815,

      815,  815,  815,  815,  815,  817,  817,  237,  824,  824,
      824,  980,  980,  816,  816,  816,  816,  816,  816,  980,
      980,  818,  818,  980,  980,  252,  980,  819,  819,  980,
      238,  980,  980,  820,  820,  817,  817,  817,  817,  817,
      817,  826,  826,  826,  100,  980,  238,  828,  828,  828,
      980,  818,  818,  818,  818,  818,  818,  819,  819,  819,
      819,  819,  819,  820,  820,  820,  820,  820,  820,  100,
      252,  100,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  830,  830,  830,  980,  980,  100,
      831,  831,  831,  980,  980,  821,  832,  832,  832,   85,

      100,  100,  833,  833,  980,   85,  237,  836,  834,  834,
      772,  772,  772,  500,  100,  837,  100,  980,  838,  980,
      835,  835,  822,  980,  980,  100,  100,  100,  100,  980,
      980,  100,  833,  833,  833,  833,  833,  833,  834,  834,
      834,  834,  834,  834,  980,  238,  100,  100,  980,   86,
      835,  835,  835,  835,  835,  835,  100,  100,  100,  980,
      839,  100,  852,  852,  980,  840,  237,  510,  853,  853,
      980,  100,  100,  100,  100,  841,   86,  842,  980,  980,
      854,  854,  100,  980,  100,  980,  100,  980,  100,  855,
      855,  980,  852,  852,  852,  852,  852,  852,  853,  853,

      853,  853,  853,  853,  980,  238,  511,  772,  772,  772,
      854,  854,  854,  854,  854,  854,  772,  772,  772,  855,
      855,  855,  855,  855,  855,  857,  857,  772,  772,  772,
      858,  858,  858,  859,  859,  859,  860,  860,  860,  980,
      980,  100,  512,  513,  514,  515,  516,  517,  518,  519,
      717,  717,  717,  980,  980,  857,  857,  857,  857,  857,
      857,  717,  717,  717,  100,  100,  100,  865,  100,  717,
      717,  717,   85,  100,  100,  861,  861,  980,   85,  237,
      980,  862,  862,  869,  772,  772,  772,  980,  980,  100,
      100,  100,  100,  863,  863,  867,  864,  980,  100,  100,

      100,  100,  879,  879,  866,  861,  861,  861,  861,  861,
      861,  862,  862,  862,  862,  862,  862,  980,  238,  100,
      980,  980,  868,  863,  863,  863,  863,  863,  863,  100,
      881,  881,  879,  879,  879,  879,  879,  879,  237,  772,
      772,  772,  980,  100,  100,  980,  100,  772,  772,  772,
      882,  100,  880,  880,  100,  980,  100,  980,  980,  980,
      881,  881,  881,  881,  881,  881,  100,  980,  887,  886,
      100,  980,  883,  883,  100,  237,  100,  238,  100,  980,
      980,  980,  880,  880,  880,  880,  880,  880,  100,  885,
      885,  100,   85,  100,  980,  884,  884,  980,  980,  889,

      980,  100,  883,  883,  883,  883,  883,  883,  100,  980,
      980,  980,  905,  100,  238,  100,  100,  899,  899,  885,
      885,  885,  885,  885,  885,  884,  884,  884,  884,  884,
      884,  237,  100,  100,  888,  100,  100,  100,  980,  980,
      980,  100,  100,  100,  980,  900,  900,  899,  899,  899,
      899,  899,  899,  901,  901,  980,  980,  100,  924,  100,
      980,  100,  100,  100,  100,  902,  902,  100,  980,  100,
      238,  906,  980,  980,  980,  900,  900,  900,  900,  900,
      900,  100,  980,  901,  901,  901,  901,  901,  901,  903,
      903,  100,  980,  980,  980,  902,  902,  902,  902,  902,

      902,  907,  100,  918,  918,  100,  100,   85,  100,  980,
      904,  904,  925,  980,  980,  980,  100,  980,  100,  903,
      903,  903,  903,  903,  903,  100,  980,  100,  252,  100,
      100,  908,  100,  918,  918,  918,  918,  918,  918,  237,
      904,  904,  904,  904,  904,  904,  980,  100,  100,  980,
      100,  980,  100,  919,  919,  980,  980,  980,  980,  920,
      920,  980,  938,  980,  980,  921,  921,  980,  980,  980,
      980,  980,  100,  100,  100,  100,   85,  980,  238,  923,
      923,  100,  510,  919,  919,  919,  919,  919,  919,  920,
      920,  920,  920,  920,  920,  921,  921,  921,  921,  921,

      921,  922,  922,  100,  980,  980,  100,  980,  100,  923,
      923,  923,  923,  923,  923,  935,  935,  100,  980,  980,
      980,  511,  980,  980,  980,  980,  980,  980,  100,  980,
      100,  922,  922,  922,  922,  922,  922,  936,  936,  980,
      980,  980,  100,  980,  100,  935,  935,  935,  935,  935,
      935,   85,  100,  100,  937,  937,  980,  512,  513,  514,
      515,  516,  517,  518,  519,  980,  939,  936,  936,  936,
      936,  936,  936,  980,  947,  947,  980,  100,  100,  100,
      100,  980,  980,  980,  937,  937,  937,  937,  937,  937,
      100,  980,  252,  980,  954,  954,  980,  980,  980,  980,

      980,  980,  980,  980,  947,  947,  947,  947,  947,  947,
      100,  100,  980,  980,  980,  100,  980,  100,  958,  958,
      980,  980,  980,  980,  954,  954,  954,  954,  954,  954,
      980,  980,  980,  980,  100,  100,  100,  100,  100,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  958,  958,
      958,  958,  958,  958,  980,  980,  980,  980,  980,  100,
      980,  100,  100,  100,  113,  113,  113,  113,  209,  209,
      209,  209,   72,   72,   72,   72,   72,  221,  221,  221,
      221,  221,   85,   85,   85,   85,   85,  253,  253,  253,
      253,  253,  302,  302,  302,  980,  302,  378,  378,  378,

      378,  378,  396,  396,  396,  396,   86,   86,   86,   86,
       86,  509,  509,  509,  509,  555,  555,  555,  555,  555,
      582,  582,  582,  980,  582,  583,  583,  583,  980,  583,
      669,  669,  669,  980,  669,  674,  674,  674,  980,  674,
      675,  675,  675,  980,  675,  738,  738,  738,  980,  738,
      739,  739,  739,  980,  739,  772,  772,  772,  772,    3,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980
    } ;

static yyconst flex_int16_t yy_chk[4350] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    6,    6,    6,    6,   10,   11,   11,

       11,   11,   11,   11,   11,   11,   10,   61,   61,   61,
        5,   63,   63,   63,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    9,  978,   14,    9,   23,   23,   23,

       23,   13,   14,   24,   13,   25,   24,   31,   84,   43,
      977,   32,   78,   25,   25,   33,   38,  533,   23,   34,
      533,   31,   24,   24,  209,   35,  976,   22,   44,   32,
       22,   35,   31,   44,   31,   31,   32,   43,   32,   32,
       33,   38,   33,   38,   34,   34,   34,   64,   64,   38,
      229,   33,  975,   35,   44,  209,   35,   80,   35,   35,
       37,  655,   35,   37,  655,    9,    9,    9,    9,    9,
        9,    9,    9,   13,   13,   13,   13,   13,   13,   13,
       13,   20,   39,   20,   84,   37,   20,   37,   39,   37,
       78,   20,   20,   20,   66,   66,   40,  974,   20,   22,

       22,   22,   22,   22,   22,   22,   22,   26,   29,  973,
       26,   20,   20,   39,  972,   39,  106,  106,   40,   29,
       20,   40,   30,   40,   26,   30,  229,   48,   29,   65,
       65,   65,   20,   80,   80,   20,   20,  283,   20,   20,
       20,  971,   20,   20,  108,  108,   20,   77,   41,   30,
      283,   85,   48,   29,   48,   20,   20,   20,   20,   20,
       20,   20,   20,   29,   67,   67,   67,   29,   29,   29,
       29,  970,   29,   41,   30,   41,   30,   41,  969,   26,
       26,   26,   26,   26,   26,   26,   26,   36,   36,   42,
       85,   36,   47,   50,   30,   30,   30,   30,   30,   30,

       30,   30,   46,   46,   47,   49,   46,  968,   46,   51,
       42,   50,   53,   36,   42,   36,   42,   47,   50,   47,
       50,   36,   52,   77,   77,   77,   53,   79,   54,  967,
       49,   81,   49,   49,   51,   82,   51,   53,   83,   53,
       55,   56,  117,  117,   52,   51,   54,   52,  966,   52,
       52,   57,  965,   54,   92,   54,   46,   99,   55,   56,
       69,   69,   69,   69,  964,   55,   56,   55,   56,   57,
       70,   70,   70,   70,  100,   88,   57,  731,   57,   86,
      731,   69,   71,   71,   71,   71,   75,   75,   75,   75,
       86,   90,  127,   92,   88,   91,   99,  119,  119,  100,

      127,  100,   90,   79,   79,   79,   91,   81,   81,   81,
      145,  145,   82,   82,   83,   83,   83,  963,   86,   88,
      962,   88,  103,  103,  103,  960,   92,   92,   92,   99,
       90,   91,  113,  959,   91,  101,  101,  101,  101,  101,
      101,  101,  101,  105,  105,  105,  107,  107,  107,  109,
      109,  109,  114,  114,  114,  195,  195,  113,   91,  113,
      116,  116,  116,  957,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   89,   89,   89,   89,   95,  134,
       89,  118,  118,  118,  120,  120,  120,  126,  135,   93,
      128,   89,   94,  196,  196,   96,  210,   97,  131,  139,
       98,  238,  132,  243,  134,  126,  134,  147,  128,  147,

      147,  136,  956,  135,  223,  135,  131,   95,  194,   89,
      132,  136,  194,  194,  139,  953,  139,  210,   93,  951,
      126,   94,  126,  128,   96,  128,   97,  197,  197,   98,
      238,  131,  243,  131,  949,  132,  136,  132,  136,  946,
       95,   95,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   93,   94,   94,   94,   96,   96,   96,
       97,   97,   98,   98,   98,  137,  138,  140,  141,  142,
      146,  163,  493,  146,  256,  164,  163,  212,  212,  212,
      165,  945,  223,  137,  138,  256,  493,  142,  944,  146,
      146,  140,  943,  141,  166,  141,  298,  167,  298,  298,

      164,  163,  164,  163,  164,  165,  168,  165,  137,  138,
      137,  138,  142,  169,  142,  364,  140,  165,  140,  166,
      170,  166,  167,  166,  167,  168,  171,  172,  299,  299,
      167,  168,  173,  168,  174,  176,  942,  170,  169,  941,
      169,  175,  171,  935,  177,  170,  364,  170,  169,  265,
      182,  171,  172,  171,  172,  171,  172,  173,  174,  173,
      176,  178,  176,  173,  173,  175,  175,  178,  175,  177,
      176,  177,  179,  175,  180,  182,  177,  182,  179,  934,
      181,  183,  182,  174,  186,  174,  184,  185,  265,  933,
      186,  187,  178,  931,  178,  929,  201,  198,  928,  180,

      180,  180,  927,  179,  181,  179,  183,  185,  183,  198,
      184,  199,  185,  187,  185,  186,  187,  186,  187,  186,
      200,  201,  198,  201,  198,  202,  203,  222,  201,  181,
      204,  181,  224,  926,  206,  184,  199,  184,  199,  200,
      205,  225,  203,  207,  199,  200,  208,  200,  226,  917,
      202,  203,  202,  203,  206,  204,  202,  204,  205,  206,
      204,  206,  208,  227,  916,  205,  204,  205,  207,  228,
      207,  208,  230,  208,  241,  207,  213,  213,  213,  214,
      214,  214,  215,  215,  215,  216,  216,  216,  217,  217,
      217,  218,  218,  218,  231,  244,  254,  232,  915,  241,

      233,  241,  914,  222,  222,  222,  234,  913,  224,  224,
      224,  235,  245,  251,  236,  266,  912,  225,  225,  343,
      343,  254,  911,  254,  226,  226,  226,  258,  910,  266,
      275,  275,  275,  909,  244,  276,  276,  276,  898,  344,
      227,  227,  246,  344,  344,  228,  228,  228,  230,  230,
      230,  245,  251,  897,  266,  277,  277,  277,  247,  346,
      346,  248,  896,  249,  348,  348,  258,  244,  244,  244,
      231,  231,  231,  232,  232,  232,  233,  233,  233,  250,
      382,  246,  234,  234,  234,  251,  245,  235,  235,  235,
      236,  236,  236,  239,  239,  239,  239,  247,  895,  239,

      248,  258,  249,  252,  278,  278,  278,  279,  279,  279,
      280,  280,  280,  894,  246,  246,  246,  257,  250,  382,
      259,  401,  401,  260,  350,  261,  893,  262,  350,  350,
      247,  247,  892,  248,  248,  248,  249,  249,  239,  252,
      252,  252,  252,  252,  252,  252,  252,  263,  281,  281,
      281,  250,  250,  250,  382,  891,  257,  403,  403,  259,
      442,  442,  260,  264,  261,  268,  262,  365,  365,  365,
      890,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  242,  242,  242,  242,  263,  285,  242,  257,
      257,  257,  259,  259,  259,  260,  260,  261,  261,  261,

      262,  262,  264,  267,  268,  291,  292,  443,  443,  294,
      288,  878,  285,  877,  285,  876,  295,  267,  267,  263,
      263,  263,  366,  366,  366,  482,  482,  242,  288,  297,
      291,  292,  291,  292,  294,  264,  294,  268,  268,  268,
      875,  295,  267,  295,  367,  367,  367,  267,  267,  267,
      267,  267,  267,  288,  297,  288,  297,  398,  398,  398,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      269,  311,  312,  270,  313,  315,  271,  314,  874,  272,
      313,  873,  273,  316,  316,  274,  316,  872,  411,  317,
      871,  388,  870,  312,  853,  311,  851,  312,  318,  312,
      315,  314,  315,  318,  320,  313,  850,  313,  316,  269,

      321,  316,  270,  316,  317,  271,  317,  319,  272,  849,
      311,  273,  311,  318,  274,  318,  314,  411,  314,  320,
      388,  320,  400,  400,  400,  321,  322,  321,  402,  402,
      402,  319,  269,  269,  269,  270,  270,  270,  271,  271,
      271,  272,  272,  272,  273,  273,  273,  274,  274,  274,
      322,  323,  411,  388,  325,  327,  319,  848,  319,  326,
      328,  483,  483,  329,  330,  331,  484,  484,  336,  323,
      847,  338,  325,  327,  846,  322,  323,  322,  323,  325,
      327,  325,  327,  326,  328,  333,  333,  329,  330,  338,
      331,  333,  331,  336,  336,  336,  338,  333,  338,  368,

      845,  334,  339,  485,  485,  337,  351,  844,  326,  328,
      326,  328,  329,  330,  329,  330,  333,  334,  333,  337,
      352,  353,  369,  843,  354,  355,  334,  339,  334,  339,
      337,  351,  337,  351,  339,  357,  359,  358,  370,  353,
      360,  356,  352,  371,  361,  352,  353,  352,  353,  354,
      355,  354,  355,  359,  354,  356,  358,  355,  360,  357,
      357,  359,  357,  359,  362,  360,  356,  360,  356,  361,
      372,  361,  384,  373,  409,  368,  368,  368,  374,  515,
      515,  358,  375,  358,  814,  376,  813,  511,  377,  362,
      426,  362,  404,  404,  404,  812,  362,  811,  369,  369,

      369,  379,  810,  417,  426,  431,  431,  431,  809,  456,
      409,  384,  511,  381,  370,  370,  370,  808,  383,  371,
      371,  371,  432,  432,  432,  433,  433,  433,  807,  426,
      517,  517,  385,  806,  456,  386,  456,  409,  782,  511,
      379,  456,  417,  776,  384,  384,  372,  372,  372,  373,
      373,  373,  381,  765,  374,  374,  374,  383,  375,  375,
      375,  376,  376,  376,  377,  377,  377,  378,  378,  378,
      378,  385,  508,  378,  386,  417,  379,  379,  379,  379,
      379,  379,  379,  379,  764,  381,  381,  381,  763,  453,
      383,  383,  383,  387,  762,  458,  389,  761,  457,  390,

      760,  454,  391,  453,  385,  385,  385,  497,  386,  386,
      758,  508,  378,  486,  453,  454,  453,  486,  486,  757,
      458,  392,  458,  457,  413,  457,  454,  739,  454,  550,
      550,  457,  387,  552,  552,  389,  579,  579,  390,  393,
      738,  391,  394,  439,  508,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  380,  380,  380,  380,
      392,  439,  380,  413,  727,  387,  387,  387,  389,  389,
      389,  390,  390,  390,  391,  391,  391,  459,  393,  395,
      396,  394,  463,  497,  497,  497,  439,  721,  439,  708,
      415,  397,  703,  392,  392,  392,  413,  413,  380,  475,

      460,  380,  459,  702,  459,  701,  460,  463,  700,  463,
      463,  393,  393,  393,  394,  394,  394,  696,  395,  396,
      464,  512,  512,  512,  475,  380,  475,  397,  475,  415,
      397,  460,  675,  460,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  464,  674,  464,  464,  608,
      608,  395,  395,  395,  397,  396,  396,  396,  396,  396,
      396,  396,  396,  415,  415,  669,  397,  397,  397,  397,
      397,  397,  397,  397,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  410,  642,
      557,  407,  407,  407,  407,  407,  407,  407,  407,  408,
      408,  408,  408,  427,  628,  408,  637,  618,  461,  610,
      610,  466,  514,  514,  514,  467,  412,  427,  427,  414,
      637,  617,  461,  616,  416,  615,  557,  410,  419,  520,
      609,  420,  473,  461,  421,  461,  466,  422,  466,  467,

      520,  466,  427,  498,  408,  637,  473,  427,  427,  427,
      427,  427,  427,  557,  584,  412,  423,  473,  414,  473,
      410,  410,  410,  416,  467,  610,  467,  419,  520,  583,
      420,  695,  695,  421,  424,  582,  422,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  412,  412,
      412,  414,  414,  414,  425,  423,  416,  416,  416,  428,
      419,  419,  419,  420,  420,  420,  421,  421,  421,  422,
      422,  422,  429,  424,  469,  430,  723,  723,  477,  498,
      498,  498,  516,  516,  516,  474,  581,  695,  423,  423,
      423,  476,  477,  425,  478,  499,  554,  480,  428,  469,

      548,  469,  546,  477,  469,  477,  424,  424,  424,  479,
      474,  429,  474,  474,  430,  480,  476,  519,  476,  478,
      513,  478,  480,  476,  480,  478,  425,  425,  425,  487,
      488,  428,  428,  428,  479,  510,  479,  501,  489,  479,
      492,  490,  491,  502,  429,  429,  429,  430,  430,  430,
      509,  494,  489,  495,  487,  488,  487,  488,  500,  492,
      496,  487,  488,  489,  503,  489,  490,  491,  490,  491,
      494,  499,  499,  499,  491,  504,  501,  505,  495,  506,
      495,  587,  502,  507,  492,  496,  492,  496,  496,  495,
      518,  518,  518,  521,  523,  494,  451,  494,  725,  725,

      524,  559,  450,  503,  521,  525,  587,  521,  587,  501,
      501,  501,  778,  778,  504,  522,  505,  502,  506,  526,
      780,  780,  507,  535,  535,  535,  522,  449,  446,  522,
      522,  527,  521,  523,  445,  436,  503,  503,  503,  524,
      559,  528,  418,  406,  525,  529,  405,  504,  504,  505,
      505,  505,  506,  506,  522,  507,  507,  507,  526,  522,
      522,  522,  522,  522,  522,  399,  523,  523,  523,  530,
      527,  349,  524,  524,  524,  559,  310,  525,  525,  525,
      528,  531,  309,  308,  529,  532,  536,  536,  536,  307,
      306,  526,  526,  526,  534,  305,  304,  534,  534,  537,

      537,  537,  302,  527,  527,  527,  542,  293,  530,  538,
      538,  538,  545,  528,  528,  528,  290,  529,  529,  529,
      531,  539,  539,  539,  532,  542,  543,  534,  534,  534,
      534,  534,  534,  540,  540,  540,  541,  541,  541,  287,
      286,  530,  530,  530,  544,  543,  547,  547,  547,  282,
      542,  253,  542,  531,  531,  531,  556,  532,  532,  532,
      549,  549,  549,  544,  551,  551,  551,  553,  553,  553,
      543,  558,  543,  818,  560,  556,  545,  545,  545,  545,
      545,  545,  545,  545,  561,  240,  562,  737,  544,  563,
      544,  193,  564,  588,  589,  565,  566,  192,  737,  567,

      556,  191,  556,  568,  190,  590,  630,  630,  630,  818,
      558,  569,  589,  560,  570,  631,  631,  631,  588,  589,
      588,  589,  571,  561,  588,  562,  737,  162,  563,  161,
      590,  564,  590,  160,  565,  566,  818,  159,  567,  572,
      158,  885,  568,  558,  558,  558,  560,  560,  560,  157,
      569,  573,  885,  570,  574,  156,  561,  561,  562,  562,
      562,  571,  563,  563,  564,  564,  564,  565,  566,  566,
      566,  567,  567,  567,  592,  568,  568,  568,  572,  575,
      885,  154,  594,  569,  569,  569,  570,  570,  570,  591,
      573,  576,  592,  574,  571,  571,  571,  149,  148,  592,

      130,  592,  594,  129,  125,  576,  576,  594,  123,  594,
      122,  572,  572,  572,  591,  121,  591,  577,  575,  593,
      591,  115,  110,  573,  573,  573,  574,  574,  574,  104,
      576,  577,  577,  593,   76,  576,  576,  576,  576,  576,
      576,   72,  595,  596,  593,   68,  593,  597,  600,   62,
       59,  575,  575,  575,  601,  599,  577,   58,  603,  595,
      596,  577,  577,  577,  577,  577,  577,  595,  596,  595,
      596,  599,  597,  600,  597,  600,  597,  600,  602,  601,
      599,  601,  599,  603,  602,  603,  604,  605,  606,  601,
       27,  607,  632,  632,  632,   21,   19,  621,  611,   18,

      622,  612,  614,    3,  606,  605,  619,  613,  623,  602,
      604,  602,  605,  606,  605,  606,  607,  611,  607,  612,
      614,  620,  607,  613,  624,    2,  612,  614,  612,  614,
        0,  619,  613,  619,  613,  604,  621,  604,  625,  622,
        0,    0,  611,    0,  611,  626,  620,  623,  620,  627,
        0,  620,  633,  633,  633,  634,  634,  634,    0,  629,
      629,  639,    0,  624,  635,  635,  635,  640,    0,  621,
      621,  621,  622,  622,  622,    0,    0,  625,    0,    0,
      623,  623,  623,    0,  626,  636,  636,  636,  627,  629,
      629,  629,  629,  629,  629,    0,  624,  624,  624,  638,

      639,    0,    0,  641,    0,    0,  640,  644,  644,  644,
      625,  625,  625,  638,  638,    0,    0,  626,  626,  626,
        0,  627,  627,  627,  643,  643,  645,  645,  645,  646,
      646,  646,    0,  639,  639,  639,    0,    0,  638,  640,
      640,  640,  641,  638,  638,  638,  638,  638,  638,  648,
      648,  648,    0,    0,  643,  643,  643,  643,  643,  643,
      649,  649,  649,  650,  650,  650,  651,  651,  651,  652,
      652,  652,  653,  653,  653,  641,  641,  641,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  654,  654,  654,  647,  647,  647,  647,  647,
      647,  647,  647,  656,  657,    0,  656,  656,  658,    0,
        0,  659,    0,    0,  660,    0,    0,  661,    0,  678,
      662,  680,    0,  663,  676,    0,  664,  677,    0,  665,
        0,    0,  666,  679,    0,    0,  656,  656,  656,  656,

      656,  656,  676,  657,  678,  680,  678,  658,  681,  676,
      659,  676,  677,  660,  677,    0,  661,  677,  679,  662,
      679,    0,  663,    0,    0,  664,    0,    0,  665,    0,
      680,  666,  680,  681,    0,  681,  657,  657,  657,  681,
      658,  658,  658,  659,  659,  659,  660,  660,  660,  661,
      661,  661,  662,  662,  662,  663,  663,  663,  664,  664,
      664,  665,  665,  665,  666,  666,  666,  667,    0,    0,
      682,  683,  684,    0,    0,  685,    0,    0,  668,    0,
        0,  667,  667,  687,  710,  710,  710,    0,    0,  683,
      684,    0,  668,  668,  682,    0,  683,  684,  683,  684,

      685,    0,  685,  685,  686,    0,  667,  687,  688,    0,
        0,  667,  667,  667,  667,  667,  667,  668,  686,  682,
      691,  682,  668,  668,  668,  668,  668,  668,  689,  686,
      697,  686,  687,  688,  687,  688,  692,  693,  699,  704,
      698,  705,  689,  749,  691,    0,    0,  706,  750,  697,
      692,  707,    0,  689,    0,  689,    0,  699,  704,    0,
        0,  692,  693,  692,  693,  698,  693,  698,  749,  691,
      749,  691,  698,  750,  697,  750,  697,  709,  709,  750,
      705,    0,  699,  704,  699,  704,  706,  711,  711,  711,
      707,  712,  712,  712,    0,    0,  715,  715,  720,  720,

      720,  718,  713,    0,  716,  716,    0,  709,  709,  709,
      709,  709,  709,  705,  705,  705,  713,  713,  714,  706,
      706,  706,  719,  707,  707,  707,  715,  715,  715,  715,
      715,  715,  714,  714,  716,  716,  716,  716,  716,  716,
      718,  713,  722,  722,  722,    0,  713,  713,  713,  713,
      713,  713,  724,  724,  724,  733,    0,  714,  726,  726,
      726,  719,  714,  714,  714,  714,  714,  714,  728,  728,
      728,  729,  729,  729,  734,    0,  718,  718,  718,  718,
      718,  718,  718,  718,  730,  730,  730,  732,    0,    0,
      732,  732,  735,  736,  733,    0,    0,  719,  719,  719,

      719,  719,  719,  719,  719,    0,  742,  736,  736,  743,
      747,    0,    0,  734,  775,  775,  775,    0,  745,    0,
      732,  732,  732,  732,  732,  732,  748,  733,  733,  733,
      742,  735,  736,  743,  747,    0,  745,  736,  736,  736,
      736,  736,  736,  745,  759,  745,  734,  734,  734,  753,
      748,  821,  772,    0,  755,  742,  752,  742,  743,  747,
      743,  747,  752,  759,  735,  735,  735,  821,  756,  766,
      766,  772,    0,    0,  753,  748,  753,  748,    0,  755,
      753,  755,  756,  767,  767,  755,    0,  752,  759,  752,
      759,  768,  821,  756,  821,  756,  772,    0,  772,  766,

      766,  766,  766,  766,  766,  768,  768,  769,  777,  777,
      777,    0,    0,  767,  767,  767,  767,  767,  767,    0,
        0,  769,  769,    0,    0,  773,    0,  770,  770,    0,
      768,    0,    0,  771,  771,  768,  768,  768,  768,  768,
      768,  779,  779,  779,  773,    0,  769,  781,  781,  781,
        0,  769,  769,  769,  769,  769,  769,  770,  770,  770,
      770,  770,  770,  771,  771,  771,  771,  771,  771,  773,
      774,  773,  783,  783,  783,  784,  784,  784,  785,  785,
      785,  786,  786,  786,  787,  787,  787,    0,    0,  774,
      788,  788,  788,    0,    0,  774,  789,  789,  789,  790,

      801,  800,  790,  790,    0,  791,  792,  797,  791,  791,
      823,  823,  823,  919,  774,  800,  774,    0,  801,    0,
      792,  792,  774,    0,    0,  801,  800,  801,  800,    0,
        0,  797,  790,  790,  790,  790,  790,  790,  791,  791,
      791,  791,  791,  791,    0,  792,  802,  803,    0,  919,
      792,  792,  792,  792,  792,  792,  797,  804,  797,    0,
      802,  805,  815,  815,    0,  803,  817,  820,  816,  816,
        0,  802,  803,  802,  803,  804,  919,  805,    0,    0,
      817,  817,  804,    0,  804,    0,  805,    0,  805,  819,
      819,    0,  815,  815,  815,  815,  815,  815,  816,  816,

      816,  816,  816,  816,    0,  817,  820,  824,  824,  824,
      817,  817,  817,  817,  817,  817,  825,  825,  825,  819,
      819,  819,  819,  819,  819,  822,  822,  826,  826,  826,
      827,  827,  827,  828,  828,  828,  829,  829,  829,    0,
        0,  822,  820,  820,  820,  820,  820,  820,  820,  820,
      830,  830,  830,    0,    0,  822,  822,  822,  822,  822,
      822,  831,  831,  831,  837,  842,  822,  838,  822,  832,
      832,  832,  833,  839,  838,  833,  833,    0,  834,  835,
        0,  834,  834,  842,  858,  858,  858,    0,    0,  837,
      842,  837,  842,  835,  835,  840,  837,    0,  839,  838,

      839,  838,  852,  852,  839,  833,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  834,    0,  835,  840,
        0,    0,  841,  835,  835,  835,  835,  835,  835,  841,
      855,  855,  852,  852,  852,  852,  852,  852,  854,  859,
      859,  859,    0,  865,  840,    0,  840,  860,  860,  860,
      856,  864,  854,  854,  841,    0,  841,    0,    0,    0,
      855,  855,  855,  855,  855,  855,  856,    0,  865,  864,
      865,    0,  857,  857,  868,  863,  864,  854,  864,    0,
        0,    0,  854,  854,  854,  854,  854,  854,  857,  863,
      863,  856,  861,  856,    0,  861,  861,    0,    0,  868,

        0,  868,  857,  857,  857,  857,  857,  857,  869,    0,
        0,    0,  886,  857,  863,  857,  866,  879,  879,  863,
      863,  863,  863,  863,  863,  861,  861,  861,  861,  861,
      861,  880,  938,  869,  866,  869,  886,  906,    0,    0,
        0,  866,  887,  866,    0,  880,  880,  879,  879,  879,
      879,  879,  879,  881,  881,    0,    0,  938,  906,  938,
        0,  886,  906,  886,  906,  882,  882,  887,    0,  887,
      880,  887,    0,    0,    0,  880,  880,  880,  880,  880,
      880,  882,    0,  881,  881,  881,  881,  881,  881,  883,
      883,  908,    0,    0,    0,  882,  882,  882,  882,  882,

      882,  888,  889,  899,  899,  883,  882,  884,  882,    0,
      884,  884,  908,    0,    0,    0,  908,    0,  908,  883,
      883,  883,  883,  883,  883,  888,    0,  889,  922,  889,
      883,  889,  883,  899,  899,  899,  899,  899,  899,  900,
      884,  884,  884,  884,  884,  884,    0,  922,  924,    0,
      888,    0,  888,  900,  900,    0,    0,    0,    0,  901,
      901,    0,  924,    0,    0,  902,  902,    0,    0,    0,
        0,    0,  922,  924,  922,  924,  904,    0,  900,  904,
      904,  902,  920,  900,  900,  900,  900,  900,  900,  901,
      901,  901,  901,  901,  901,  902,  902,  902,  902,  902,

      902,  903,  903,  939,    0,    0,  902,    0,  902,  904,
      904,  904,  904,  904,  904,  918,  918,  903,    0,    0,
        0,  920,    0,    0,    0,    0,    0,    0,  939,    0,
      939,  903,  903,  903,  903,  903,  903,  921,  921,    0,
        0,    0,  903,    0,  903,  918,  918,  918,  918,  918,
      918,  923,  925,  921,  923,  923,    0,  920,  920,  920,
      920,  920,  920,  920,  920,    0,  925,  921,  921,  921,
      921,  921,  921,    0,  936,  936,    0,  925,  921,  925,
      921,    0,    0,    0,  923,  923,  923,  923,  923,  923,
      936,    0,  958,    0,  947,  947,    0,    0,    0,    0,

        0,    0,    0,    0,  936,  936,  936,  936,  936,  936,
      947,  958,    0,    0,    0,  936,    0,  936,  954,  954,
        0,    0,    0,    0,  947,  947,  947,  947,  947,  947,
        0,    0,    0,    0,  954,  947,  958,  947,  958,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  954,  954,
      954,  954,  954,  954,    0,    0,    0,    0,    0,  954,
        0,  954,  981,  981,  982,  982,  982,  982,  983,  983,
      983,  983,  984,  984,  984,  984,  984,  985,  985,  985,
      985,  985,  986,  986,  986,  986,  986,  987,  987,  987,
      987,  987,  988,  988,  988,    0,  988,  989,  989,  989,

      989,  989,  990,  990,  990,  990,  991,  991,  991,  991,
      991,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      994,  994,  994,    0,  994,  995,  995,  995,    0,  995,
      996,  996,  996,    0,  996,  997,  997,  997,    0,  997,
      998,  998,  998,    0,  998,  999,  999,  999,    0,  999,
     1000, 1000, 1000,    0, 1000, 1001, 1001, 1001, 1001,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[140] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pmatch_flex_debug;
int pmatch_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pmatchtext;
#line 1 "pmatch_lex.ll"
#line 4 "pmatch_lex.ll"
// Copyright (c) 2016 University of Helsinki
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// See the file COPYING included with this distribution for more
// information.

#include <string.h>

#include "HfstTransducer.h"
#include "HfstInputStream.h"
#include "HfstXeroxRules.h"
#include "pmatch_utils.h"
#include "pmatch_parse.hh"

#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)   (retval = hfst::pmatch::getinput(buf, maxlen))

extern int pmatcherror(const char *text);

#undef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) pmatcherror(msg);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in pmatch */
/* non-restricted ASCII */
/* token character */
#line 1841 "pmatch_lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pmatchlex_destroy (void );

int pmatchget_debug (void );

void pmatchset_debug (int debug_flag  );

YY_EXTRA_TYPE pmatchget_extra (void );

void pmatchset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pmatchget_in (void );

void pmatchset_in  (FILE * _in_str  );

FILE *pmatchget_out (void );

void pmatchset_out  (FILE * _out_str  );

yy_size_t pmatchget_leng (void );

char *pmatchget_text (void );

int pmatchget_lineno (void );

void pmatchset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pmatchwrap (void );
#else
extern int pmatchwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pmatchtext, pmatchleng, 1, pmatchout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pmatchin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pmatchin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pmatchin))==0 && ferror(pmatchin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pmatchin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pmatchlex (void);

#define YY_DECL int pmatchlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pmatchtext and pmatchleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( pmatchleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pmatchtext[pmatchleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pmatchin )
			pmatchin = stdin;

		if ( ! pmatchout )
			pmatchout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pmatchensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
		}

		pmatch_load_buffer_state( );
		}

	{
#line 67 "pmatch_lex.ll"


#line 2063 "pmatch_lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pmatchtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 981 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 980 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < pmatchleng; ++yyl )
				if ( pmatchtext[yyl] == '\n' )
					   
    pmatchlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "pmatch_lex.ll"
{ return REGEX; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "pmatch_lex.ll"
{ return SET_VARIABLE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "pmatch_lex.ll"
{ return DEFINED_LIST; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "pmatch_lex.ll"
{ return LIT_LEFT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "pmatch_lex.ll"
{ return INS_LEFT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "pmatch_lex.ll"
{ return ENDTAG_LEFT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "pmatch_lex.ll"
{ return CAP_LEFT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "pmatch_lex.ll"
{ return OPTCAP_LEFT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "pmatch_lex.ll"
{ return TOLOWER_LEFT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "pmatch_lex.ll"
{ return TOUPPER_LEFT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "pmatch_lex.ll"
{ return OPT_TOUPPER_LEFT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "pmatch_lex.ll"
{ return OPT_TOLOWER_LEFT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "pmatch_lex.ll"
{ return ANY_CASE_LEFT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "pmatch_lex.ll"
{ return EXPLODE_LEFT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "pmatch_lex.ll"
{ return IMPLODE_LEFT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "pmatch_lex.ll"
{ return LC_LEFT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "pmatch_lex.ll"
{ return RC_LEFT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "pmatch_lex.ll"
{ return NLC_LEFT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "pmatch_lex.ll"
{ return NRC_LEFT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "pmatch_lex.ll"
{ return OR_LEFT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "pmatch_lex.ll"
{ return AND_LEFT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "pmatch_lex.ll"
{ return TAG_LEFT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "pmatch_lex.ll"
{ return LST_LEFT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "pmatch_lex.ll"
{ return EXC_LEFT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "pmatch_lex.ll"
{ return LIKE_LEFT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "pmatch_lex.ll"
{ return INTERPOLATE_LEFT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "pmatch_lex.ll"
{ return SIGMA_LEFT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "pmatch_lex.ll"
{ return COUNTER_LEFT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "pmatch_lex.ll"
{ return DEFINE_LEFT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "pmatch_lex.ll"
{ return DEFINS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 102 "pmatch_lex.ll"
{ return ALPHA; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 103 "pmatch_lex.ll"
{ return UPPERALPHA; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "pmatch_lex.ll"
{ return LOWERALPHA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "pmatch_lex.ll"
{ return NUM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "pmatch_lex.ll"
{ return PUNCT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "pmatch_lex.ll"
{ return WHITESPACE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 109 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("count-patterns") + 1), "count-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 113 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("delete-patterns") + 1), "delete-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("extract-patterns") + 1), "extract-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("locate-patterns") + 1), "locate-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 125 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("mark-patterns") + 1), "mark-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("need-separators") + 1), "need-separators");
    return VARIABLE_NAME;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 133 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-context_length") + 1), "max-context-length");
    return VARIABLE_NAME;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-recursion") + 1), "max-recursion");
    return VARIABLE_NAME;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 142 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("vector-similarity-projection-factor") + 1), "vector-similarity-projection-factor");
    return VARIABLE_NAME;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "pmatch_lex.ll"
{ return COMPLEMENT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "pmatch_lex.ll"
{ return TERM_COMPLEMENT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "pmatch_lex.ll"
{ return INTERSECTION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "pmatch_lex.ll"
{ return MINUS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "pmatch_lex.ll"
{ return CONTAINMENT_ONCE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "pmatch_lex.ll"
{ return CONTAINMENT_OPT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "pmatch_lex.ll"
{ return CONTAINMENT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "pmatch_lex.ll"
{ return PLUS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "pmatch_lex.ll"
{ return STAR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "pmatch_lex.ll"
{ return IGNORE_INTERNALLY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "pmatch_lex.ll"
{ return IGNORING; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "pmatch_lex.ll"
{ return UNION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 164 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "pmatch_lex.ll"
{ return ANY_TOKEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "pmatch_lex.ll"
{ return BOUNDARY_MARKER; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "pmatch_lex.ll"
{ return SHUFFLE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "pmatch_lex.ll"
{ return BEFORE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "pmatch_lex.ll"
{ return AFTER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 174 "pmatch_lex.ll"
{ return COMPOSITION; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 175 "pmatch_lex.ll"
{ return LENIENT_COMPOSITION; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 176 "pmatch_lex.ll"
{ return MERGE_RIGHT_ARROW; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 177 "pmatch_lex.ll"
{ return MERGE_LEFT_ARROW; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 178 "pmatch_lex.ll"
{ return CROSS_PRODUCT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 179 "pmatch_lex.ll"
{ return UPPER_PRIORITY_UNION; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 180 "pmatch_lex.ll"
{ return LOWER_PRIORITY_UNION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 181 "pmatch_lex.ll"
{ return UPPER_MINUS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 182 "pmatch_lex.ll"
{ return LOWER_MINUS; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 183 "pmatch_lex.ll"
{ return SUBSTITUTE_LEFT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "pmatch_lex.ll"
{ return LEFT_RESTRICTION; } /* Not implemented */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "pmatch_lex.ll"
{ return LEFT_RIGHT_ARROW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "pmatch_lex.ll"
{ return LEFT_ARROW; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "pmatch_lex.ll"
{ return RIGHT_ARROW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 190 "pmatch_lex.ll"
{ return REPLACE_RIGHT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 191 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_RIGHT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 192 "pmatch_lex.ll"
{ return REPLACE_LEFT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 193 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 194 "pmatch_lex.ll"
{ return REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 195 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 196 "pmatch_lex.ll"
{ return LTR_LONGEST_MATCH; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 197 "pmatch_lex.ll"
{ return LTR_SHORTEST_MATCH; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 198 "pmatch_lex.ll"
{ return RTL_LONGEST_MATCH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 199 "pmatch_lex.ll"
{ return RTL_SHORTEST_MATCH; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UU; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 202 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LU; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 203 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UL; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 204 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 205 "pmatch_lex.ll"
{ return CENTER_MARKER; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 206 "pmatch_lex.ll"
{ return MARKUP_MARKER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 208 "pmatch_lex.ll"
{ return LEFT_QUOTIENT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 210 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 215 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 220 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_PLUS;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 225 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_MINUS;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 1, 0, 10);
    return CATENATE_N;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 235 "pmatch_lex.ll"
{ return REVERSE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 236 "pmatch_lex.ll"
{ return INVERT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 237 "pmatch_lex.ll"
{ return UPPER_PROJECT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 238 "pmatch_lex.ll"
{ return LOWER_PROJECT; }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 240 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_BIN;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 245 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_TEXT;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 250 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_SPACED;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 255 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_PROLOG;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 260 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_LEXC;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 265 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_RE;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_VEC;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 275 "pmatch_lex.ll"
{
    pmatchlval.pmatchObject = hfst::pmatch::parse_range(pmatchtext);
    return CHARACTER_RANGE;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 280 "pmatch_lex.ll"
{
    char * label = (char *) malloc(strlen(pmatchtext));
    strncpy(label, pmatchtext, strlen(pmatchtext));
    label[strlen(pmatchtext) - 1] = '\0';
    pmatchlval.label = hfst::pmatch::strip_percents(label);
    free(label);
    return SYMBOL_WITH_LEFT_PAREN;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "pmatch_lex.ll"
{ return LEFT_BRACKET_DOTTED; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "pmatch_lex.ll"
{ return RIGHT_BRACKET_DOTTED; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "pmatch_lex.ll"
{ return LEFT_BRACKET; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "pmatch_lex.ll"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "pmatch_lex.ll"
{ return LEFT_PARENTHESIS; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "pmatch_lex.ll"
{ return RIGHT_PARENTHESIS; }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 296 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 124:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 297 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 298 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_LEFT; }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 299 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_RIGHT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 300 "pmatch_lex.ll"
{ return PAIR_SEPARATOR; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 302 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return WEIGHT;
}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 307 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '{', '}');
    return CURLY_LITERAL;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 312 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::parse_quoted(pmatchtext);
    return QUOTED_LITERAL;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 317 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::strip_percents(pmatchtext);
    return SYMBOL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 322 "pmatch_lex.ll"
{ return COMMACOMMA; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 323 "pmatch_lex.ll"
{ return COMMA; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 325 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 330 "pmatch_lex.ll"
{
    pmatchlval.weight = 0.0;
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 335 "pmatch_lex.ll"
{ /* ignorable whitespace */ }
	YY_BREAK
case 137:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 337 "pmatch_lex.ll"
{ /* ignore comments */ }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 339 "pmatch_lex.ll"
{
    return LEXER_ERROR;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 343 "pmatch_lex.ll"
ECHO;
	YY_BREAK
#line 2934 "pmatch_lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pmatchin at a new source and called
			 * pmatchlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pmatchin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pmatchwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pmatchtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of pmatchlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pmatchrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pmatchrestart(pmatchin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pmatchrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 981 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 981 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 980);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pmatchrestart(pmatchin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pmatchwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pmatchtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    pmatchlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pmatchrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pmatchensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
	}

	pmatch_init_buffer(YY_CURRENT_BUFFER,input_file );
	pmatch_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pmatch_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pmatchpop_buffer_state();
	 *		pmatchpush_buffer_state(new_buffer);
     */
	pmatchensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pmatch_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pmatchwrap()) processing, but the only time this flag
	 * is looked at is after pmatchwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pmatch_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pmatchin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pmatch_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pmatchalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pmatch_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pmatch_create_buffer()
 * 
 */
    void pmatch_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pmatchfree((void *) b->yy_ch_buf  );

	pmatchfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pmatchrestart() or at EOF.
 */
    static void pmatch_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pmatch_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pmatch_init_buffer was _probably_
     * called from pmatchrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pmatch_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pmatch_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pmatchensure_buffer_stack();

	/* This block is copied from pmatch_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pmatch_switch_to_buffer. */
	pmatch_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pmatchpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pmatch_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pmatch_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pmatchensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pmatch_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pmatch_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pmatchlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pmatch_scan_bytes() instead.
 */
YY_BUFFER_STATE pmatch_scan_string (yyconst char * yystr )
{
    
	return pmatch_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pmatchlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pmatch_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pmatchalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pmatch_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pmatch_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pmatchtext[pmatchleng] = (yy_hold_char); \
		(yy_c_buf_p) = pmatchtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pmatchleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pmatchget_lineno  (void)
{
        
    return pmatchlineno;
}

/** Get the input stream.
 * 
 */
FILE *pmatchget_in  (void)
{
        return pmatchin;
}

/** Get the output stream.
 * 
 */
FILE *pmatchget_out  (void)
{
        return pmatchout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pmatchget_leng  (void)
{
        return pmatchleng;
}

/** Get the current token.
 * 
 */

char *pmatchget_text  (void)
{
        return pmatchtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void pmatchset_lineno (int  _line_number )
{
    
    pmatchlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see pmatch_switch_to_buffer
 */
void pmatchset_in (FILE *  _in_str )
{
        pmatchin = _in_str ;
}

void pmatchset_out (FILE *  _out_str )
{
        pmatchout = _out_str ;
}

int pmatchget_debug  (void)
{
        return pmatch_flex_debug;
}

void pmatchset_debug (int  _bdebug )
{
        pmatch_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pmatchlex_destroy(), so don't allocate here.
     */

    /* We do not touch pmatchlineno unless the option is enabled. */
    pmatchlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pmatchin = stdin;
    pmatchout = stdout;
#else
    pmatchin = (FILE *) 0;
    pmatchout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pmatchlex_init()
     */
    return 0;
}

/* pmatchlex_destroy is for both reentrant and non-reentrant scanners. */
int pmatchlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pmatch_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pmatchpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pmatchfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pmatchlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pmatchalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *pmatchrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pmatchfree (void * ptr )
{
			free( (char *) ptr );	/* see pmatchrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 343 "pmatch_lex.ll"



