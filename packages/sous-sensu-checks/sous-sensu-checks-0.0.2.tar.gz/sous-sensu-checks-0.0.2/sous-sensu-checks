#!/usr/bin/env python

import json
import sys
import time
import traceback

from argparse import ArgumentParser
from urlparse import urljoin
from socket import socket, AF_INET, SOCK_STREAM
from subprocess import check_output

from check import Check

import requests

defaulttimeout = 4 # In seconds.
# NB: Version is duplicated in setup.py.
useragent = 'sous-sensu-checks/0.0.2'

# TODO: Alert us on unalertable sous projects due to missing fields etc.
# TODO: Alert when sensu team names are unrecognised.

class Main(object):
  # Parse arguments.
  def __init__(self):
    self.parser = ArgumentParser(
      description='Check health of Sous-deployed services.')

    self.parser.add_argument('-s', '--server', default=None,
      help='Sous server URL')

    self.parser.add_argument('-c', '--cluster', default=None,
      help='Sous logical cluster to inspect')

    self.parser.add_argument('-i', '--interval', type=int, default=300,
      help='Interval between beginning a cycle in seconds; note that if a single run '
        'exceeds this interval, the actual interval will be longer; default 300')

    args = self.parser.parse_args()

    # We do this manually here since the argparse default is to exit
    # with code 2.  See parser_error.
    if args.server is None:
      self.parser_error('argument -s/--server is required')
    if args.cluster is None:
      self.parser_error('argument -c/--cluster is required')

    self.args = args

    # track output we've already seen and remove dupes
    self.response_data_seen = set()

  def parser_error(self, message):
    # Code 3 is "UNKNOWN".  (argparse default is 2, which would be
    # "CRITICAL"--inappropriate.)
    self.parser.print_usage()
    self.parser.exit(3, '%s: error: %s\n' % (self.parser.prog, message))

  def requestsget(self, url, timeout):
    return requests.get(url, timeout=timeout, headers={'User-Agent':useragent})

  # Get deployments matching the specified cluster from the specified sous server.
  def get_deployments(self):
    url = urljoin(self.args.server, 'gdm')
    resp = self.requestsget(url, defaulttimeout)
    gdm = resp.json()
    deployments = [d for d in gdm['Deployments'] if d['Env']['OT_ENV'] == self.args.cluster]
    return deployments

  def make_checks(self):
    deployments = self.get_deployments()
    checks = [Check(d, self.args.cluster) for d in deployments]
    return checks

  def run(self):
      interval = self.args.interval
      while True:
        cycle_start_time = time.time()
        self.cycle(interval)
        cycle_end_time = time.time()
        cycle_elapsed_time = cycle_end_time - cycle_start_time
        if cycle_elapsed_time > interval:
          print "WARNING: Cycle took {0}s, longer than specified interval ({1}s).".format(cycle_elapsed_time, interval)
        sleep_time = interval - cycle_elapsed_time
        if sleep_time < 0:
            sleep_time = 0
        print "Running again in {0}s".format(sleep_time)
        time.sleep(sleep_time)


  # cycle performs checks for an entire Sous cluster, once.
  def cycle(self, interval):
    try:
      checks = self.make_checks()
    except Exception:
      print 'failed to generate checks'
      print traceback.format_exc()
      return 3

    exitCode = 0
    invalidChecks = {c.manifestID: c for c in checks if not c.valid}
    for manifestID, c in invalidChecks.iteritems():
        exitCode = 1
        sys.stderr.writelines("unable to check {0}: {1}\n".format(manifestID, c.invalidReason))
    validChecks = [c for c in checks if c.valid]

    binPath = check_output(["which", "otpl-service-check"]).strip()
    if binPath == "":
        print "unable to locate otpl-service-check binary, exiting."
        sys.exit(1)

    print "using {0}".format(binPath)
    
    results = [c.result(binPath, interval) for c in validChecks]
    for r in results:
        j = json.dumps(r, indent=4, sort_keys=True)
        print "Sending " + j
        try:
            s = socket(AF_INET, SOCK_STREAM)
            s.connect(("localhost", 3030))
            s.sendall(j)
            s.close()
        except Exception, error:
            print "Error sending check result: {0}".format(error)


try:
  sys.exit(Main().run())
except Exception:
  print 'unhandled exception'
  print traceback.format_exc()
  sys.exit(3)


