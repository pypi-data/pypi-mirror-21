# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StripeCreditCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, number=None, expiration_month=None, expiration_year=None, cvc=None, address_line1=None, address_line2=None, address_city=None, address_state=None, address_zip=None, address_country=None):
        """
        StripeCreditCard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'number': 'str',
            'expiration_month': 'str',
            'expiration_year': 'str',
            'cvc': 'str',
            'address_line1': 'str',
            'address_line2': 'str',
            'address_city': 'str',
            'address_state': 'str',
            'address_zip': 'str',
            'address_country': 'str'
        }

        self.attribute_map = {
            'name': 'Name',
            'number': 'Number',
            'expiration_month': 'ExpirationMonth',
            'expiration_year': 'ExpirationYear',
            'cvc': 'Cvc',
            'address_line1': 'AddressLine1',
            'address_line2': 'AddressLine2',
            'address_city': 'AddressCity',
            'address_state': 'AddressState',
            'address_zip': 'AddressZip',
            'address_country': 'AddressCountry'
        }

        self._name = name
        self._number = number
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        self._cvc = cvc
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_city = address_city
        self._address_state = address_state
        self._address_zip = address_zip
        self._address_country = address_country

    @property
    def name(self):
        """
        Gets the name of this StripeCreditCard.


        :return: The name of this StripeCreditCard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StripeCreditCard.


        :param name: The name of this StripeCreditCard.
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """
        Gets the number of this StripeCreditCard.


        :return: The number of this StripeCreditCard.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this StripeCreditCard.


        :param number: The number of this StripeCreditCard.
        :type: str
        """

        self._number = number

    @property
    def expiration_month(self):
        """
        Gets the expiration_month of this StripeCreditCard.


        :return: The expiration_month of this StripeCreditCard.
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """
        Sets the expiration_month of this StripeCreditCard.


        :param expiration_month: The expiration_month of this StripeCreditCard.
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """
        Gets the expiration_year of this StripeCreditCard.


        :return: The expiration_year of this StripeCreditCard.
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """
        Sets the expiration_year of this StripeCreditCard.


        :param expiration_year: The expiration_year of this StripeCreditCard.
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def cvc(self):
        """
        Gets the cvc of this StripeCreditCard.


        :return: The cvc of this StripeCreditCard.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """
        Sets the cvc of this StripeCreditCard.


        :param cvc: The cvc of this StripeCreditCard.
        :type: str
        """

        self._cvc = cvc

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this StripeCreditCard.


        :return: The address_line1 of this StripeCreditCard.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this StripeCreditCard.


        :param address_line1: The address_line1 of this StripeCreditCard.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this StripeCreditCard.


        :return: The address_line2 of this StripeCreditCard.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this StripeCreditCard.


        :param address_line2: The address_line2 of this StripeCreditCard.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_city(self):
        """
        Gets the address_city of this StripeCreditCard.


        :return: The address_city of this StripeCreditCard.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """
        Sets the address_city of this StripeCreditCard.


        :param address_city: The address_city of this StripeCreditCard.
        :type: str
        """

        self._address_city = address_city

    @property
    def address_state(self):
        """
        Gets the address_state of this StripeCreditCard.


        :return: The address_state of this StripeCreditCard.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this StripeCreditCard.


        :param address_state: The address_state of this StripeCreditCard.
        :type: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """
        Gets the address_zip of this StripeCreditCard.


        :return: The address_zip of this StripeCreditCard.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """
        Sets the address_zip of this StripeCreditCard.


        :param address_zip: The address_zip of this StripeCreditCard.
        :type: str
        """

        self._address_zip = address_zip

    @property
    def address_country(self):
        """
        Gets the address_country of this StripeCreditCard.


        :return: The address_country of this StripeCreditCard.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """
        Sets the address_country of this StripeCreditCard.


        :param address_country: The address_country of this StripeCreditCard.
        :type: str
        """

        self._address_country = address_country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
