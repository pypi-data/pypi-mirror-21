# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderApproval(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, approval_rule_id=None, approving_group_id=None, status=None, date_created=None, date_completed=None, approver_id=None, approver_user_name=None, approver_email=None, comments=None):
        """
        OrderApproval - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'approval_rule_id': 'str',
            'approving_group_id': 'str',
            'status': 'str',
            'date_created': 'str',
            'date_completed': 'str',
            'approver_id': 'str',
            'approver_user_name': 'str',
            'approver_email': 'str',
            'comments': 'str'
        }

        self.attribute_map = {
            'approval_rule_id': 'ApprovalRuleID',
            'approving_group_id': 'ApprovingGroupID',
            'status': 'Status',
            'date_created': 'DateCreated',
            'date_completed': 'DateCompleted',
            'approver_id': 'ApproverID',
            'approver_user_name': 'ApproverUserName',
            'approver_email': 'ApproverEmail',
            'comments': 'Comments'
        }

        self._approval_rule_id = approval_rule_id
        self._approving_group_id = approving_group_id
        self._status = status
        self._date_created = date_created
        self._date_completed = date_completed
        self._approver_id = approver_id
        self._approver_user_name = approver_user_name
        self._approver_email = approver_email
        self._comments = comments

    @property
    def approval_rule_id(self):
        """
        Gets the approval_rule_id of this OrderApproval.


        :return: The approval_rule_id of this OrderApproval.
        :rtype: str
        """
        return self._approval_rule_id

    @approval_rule_id.setter
    def approval_rule_id(self, approval_rule_id):
        """
        Sets the approval_rule_id of this OrderApproval.


        :param approval_rule_id: The approval_rule_id of this OrderApproval.
        :type: str
        """

        self._approval_rule_id = approval_rule_id

    @property
    def approving_group_id(self):
        """
        Gets the approving_group_id of this OrderApproval.


        :return: The approving_group_id of this OrderApproval.
        :rtype: str
        """
        return self._approving_group_id

    @approving_group_id.setter
    def approving_group_id(self, approving_group_id):
        """
        Sets the approving_group_id of this OrderApproval.


        :param approving_group_id: The approving_group_id of this OrderApproval.
        :type: str
        """

        self._approving_group_id = approving_group_id

    @property
    def status(self):
        """
        Gets the status of this OrderApproval.


        :return: The status of this OrderApproval.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OrderApproval.


        :param status: The status of this OrderApproval.
        :type: str
        """

        self._status = status

    @property
    def date_created(self):
        """
        Gets the date_created of this OrderApproval.


        :return: The date_created of this OrderApproval.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this OrderApproval.


        :param date_created: The date_created of this OrderApproval.
        :type: str
        """

        self._date_created = date_created

    @property
    def date_completed(self):
        """
        Gets the date_completed of this OrderApproval.


        :return: The date_completed of this OrderApproval.
        :rtype: str
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """
        Sets the date_completed of this OrderApproval.


        :param date_completed: The date_completed of this OrderApproval.
        :type: str
        """

        self._date_completed = date_completed

    @property
    def approver_id(self):
        """
        Gets the approver_id of this OrderApproval.


        :return: The approver_id of this OrderApproval.
        :rtype: str
        """
        return self._approver_id

    @approver_id.setter
    def approver_id(self, approver_id):
        """
        Sets the approver_id of this OrderApproval.


        :param approver_id: The approver_id of this OrderApproval.
        :type: str
        """

        self._approver_id = approver_id

    @property
    def approver_user_name(self):
        """
        Gets the approver_user_name of this OrderApproval.


        :return: The approver_user_name of this OrderApproval.
        :rtype: str
        """
        return self._approver_user_name

    @approver_user_name.setter
    def approver_user_name(self, approver_user_name):
        """
        Sets the approver_user_name of this OrderApproval.


        :param approver_user_name: The approver_user_name of this OrderApproval.
        :type: str
        """

        self._approver_user_name = approver_user_name

    @property
    def approver_email(self):
        """
        Gets the approver_email of this OrderApproval.


        :return: The approver_email of this OrderApproval.
        :rtype: str
        """
        return self._approver_email

    @approver_email.setter
    def approver_email(self, approver_email):
        """
        Sets the approver_email of this OrderApproval.


        :param approver_email: The approver_email of this OrderApproval.
        :type: str
        """

        self._approver_email = approver_email

    @property
    def comments(self):
        """
        Gets the comments of this OrderApproval.


        :return: The comments of this OrderApproval.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this OrderApproval.


        :param comments: The comments of this OrderApproval.
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
