from genice.formats.baseclass import GenIce
from genice import rigid


class Formatter(GenIce):
    """
    Gro file format
    defined in http://manual.gromacs.org/current/online/gro.html
    """
    def run(self, options):
        water_type    = options.water[0]
        guests        = options.guests
        self.stage1()   #replicate the unit cell
        res = self.stage2()   #prepare random graph
        if not res:
            self.rotmatrices = [rigid.rand_rotation_matrix() for pos in self.reppositions]
        else:
            self.stage3()   #Make an ice graph
            self.stage4()   #Depolarize
            self.stage5()   #Orientation
        self.stage6(water_type)  #Water atoms
        self.stage7(guests)      #Guest atoms
        self.logger.info("Total number of atoms: {0}".format(len(self.atoms)))
        self.logger.info("Output in Gromacs format.")
        if len(self.atoms) > 99999:
            self.logger.info("Gromacs fixed format cannot deal with atoms more than 99999. Residue number and atom number are faked.")
        s = ""
        s += "#Generated by GenIce https://github.com/vitroid/GenIce \n"
        s += "{0}\n".format(len(self.atoms))
        molorder = 0
        for i in range(len(self.atoms)):
            resno, resname, atomname, position = self.atoms[i]
            if resno == 0:
                molorder += 1
            if len(self.atoms) > 99999:
                s += "{0:5d}{1:5s}{2:>5s}{3:5d}{4:8.3f}{5:8.3f}{6:8.3f}\n".format(9999,resname, atomname, 9999,position[0],position[1],position[2])
            else:
                s += "{0:5d}{1:5s}{2:>5s}{3:5d}{4:8.3f}{5:8.3f}{6:8.3f}\n".format(molorder,resname, atomname, i+1,position[0],position[1],position[2])
        if self.cell[1,0] == 0 and self.cell[2,0] == 0 and self.cell[2,1] == 0:
            s += "    {0} {1} {2}\n".format(self.cell[0,0],self.cell[1,1],self.cell[2,2])
        else:
            assert self.cell[0,1] == 0 and self.cell[0,2] == 0 and self.cell[1,2] == 0
            s += "    {0} {1} {2} {3} {4} {5} {6} {7} {8}\n".format(self.cell[0,0],
                                                                    self.cell[1,1],
                                                                    self.cell[2,2],
                                                                    self.cell[0,1],
                                                                    self.cell[0,2],
                                                                    self.cell[1,0],
                                                                    self.cell[1,2],
                                                                    self.cell[2,0],
                                                                    self.cell[2,1],
                                                                    )
        s += '#' + "\n#".join(self.doc) + "\n"
        print(s,end="")
