## examples/fitting/doc_example1.lar
# create mock data
mdat = group()
mdat.x = linspace(-10, 10, 201)
mdat.y = 1.0 + 12.0 * gaussian(mdat.x, 1.5, 2.0) + \
         random.normal(size=len(mdat.x), scale=0.050)

# create a group of fit parameters
params = group(off = guess(0),
               amp = guess(5, min=0),
               cen = guess(2),
               wid = guess(1, min=0))

init = params.off + params.amp * \
       gaussian(mdat.x, params.cen, params.wid)

# define objective function for fit residual
def resid(p, data):
    return data.y - (p.off + p.amp * gaussian(data.x, p.cen, p.wid))
enddef

# perform fit
minimize(resid, params, args=(mdat,))

# make final array
final = params.off + params.amp * \
        gaussian(mdat.x, params.cen, params.wid)

# plot results
plot(mdat.x, mdat.y, label='data', show_legend=True, new=True)
plot(mdat.x, init,   label='initial', color='black', style='dotted')
plot(mdat.x, final,  label='final', color='red')

# print report of parameters, uncertainties
print fit_report(params)


## end of examples/fitting/doc_example1.lar
