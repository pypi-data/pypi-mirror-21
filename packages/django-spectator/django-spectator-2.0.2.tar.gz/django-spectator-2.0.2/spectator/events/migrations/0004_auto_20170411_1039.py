# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-04-11 10:39
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import spectator.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        ('events', '0003_auto_20170411_0651'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassicalWork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(max_length=255)),
                ('title_sort', spectator.core.fields.NaturalSortField('title', db_index=True, default='', editable=False, help_text="e.g. 'big piece, a' or 'biggest piece, the'.", max_length=255)),
            ],
            options={
                'ordering': ('title_sort',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassicalWorkRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('classical_work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='events.ClassicalWork')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classical_work_roles', to='core.Creator')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DancePiece',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(max_length=255)),
                ('title_sort', spectator.core.fields.NaturalSortField('title', db_index=True, default='', editable=False, help_text="e.g. 'big piece, a' or 'biggest piece, the'.", max_length=255)),
            ],
            options={
                'ordering': ('title_sort',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DancePieceRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dance_piece_roles', to='core.Creator')),
                ('dance_piece', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='events.DancePiece')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='event',
            name='kind',
            field=models.CharField(choices=[('concert', 'Classical concert'), ('comedy', 'Comedy'), ('dance', 'Dance'), ('exhibition', 'Exhibition'), ('gig', 'Gig'), ('misc', 'Other'), ('movie', 'Movie'), ('play', 'Play')], max_length=20),
        ),
        migrations.AlterField(
            model_name='movie',
            name='title_sort',
            field=spectator.core.fields.NaturalSortField('title', db_index=True, default='', editable=False, help_text="e.g. 'big piece, a' or 'biggest piece, the'.", max_length=255),
        ),
        migrations.AlterField(
            model_name='play',
            name='title_sort',
            field=spectator.core.fields.NaturalSortField('title', db_index=True, default='', editable=False, help_text="e.g. 'big piece, a' or 'biggest piece, the'.", max_length=255),
        ),
        migrations.AddField(
            model_name='dancepiece',
            name='creators',
            field=models.ManyToManyField(related_name='dance_pieces', through='events.DancePieceRole', to='core.Creator'),
        ),
        migrations.AddField(
            model_name='classicalwork',
            name='creators',
            field=models.ManyToManyField(related_name='classical_works', through='events.ClassicalWorkRole', to='core.Creator'),
        ),
        migrations.AddField(
            model_name='event',
            name='classical_works',
            field=models.ManyToManyField(help_text="Only used if event is of 'Classical Concert' kind.", to='events.ClassicalWork'),
        ),
        migrations.AddField(
            model_name='event',
            name='dance_pieces',
            field=models.ManyToManyField(help_text="Only used if event is of 'Dance' kind.", to='events.DancePiece'),
        ),
    ]
