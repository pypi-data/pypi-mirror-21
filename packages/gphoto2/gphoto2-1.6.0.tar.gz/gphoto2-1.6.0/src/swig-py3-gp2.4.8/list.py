# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _list.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_list')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_list')
    _list = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_list', [dirname(__file__)])
        except ImportError:
            import _list
            return _list
        try:
            _mod = imp.load_module('_list', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _list = swig_import_helper()
    del swig_import_helper
else:
    import _list
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CameraList(object):
    """Proxy of C _CameraList struct."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CameraList"""
        _list.CameraList_swiginit(self, _list.new_CameraList())
    __swig_destroy__ = _list.delete_CameraList

    def __len__(self) -> "int":
        """
        __len__(self) -> int

        Parameters
        ----------
        self: struct _CameraList *


        See also: gphoto2.gp_list_count
        """
        return _list.CameraList___len__(self)


    def __getitem__(self, idx: 'int') -> "PyObject *":
        """
        __getitem__(self, idx) -> PyObject *

        Parameters
        ----------
        idx: int


        See also: gphoto2.gp_list_count
        """
        return _list.CameraList___getitem__(self, idx)


    def count(self) -> "int":
        """
        count(self) -> int

        Parameters
        ----------
        self: struct _CameraList *


        See also: gphoto2.gp_list_count
        """
        return _list.CameraList_count(self)


    def append(self, name: 'char const *', value: 'char const *') -> "void":
        """
        append(self, name, value)

        Parameters
        ----------
        name: str
        value: str


        See also: gphoto2.gp_list_append
        """
        return _list.CameraList_append(self, name, value)


    def reset(self) -> "void":
        """
        reset(self)

        Parameters
        ----------
        self: struct _CameraList *


        See also: gphoto2.gp_list_reset
        """
        return _list.CameraList_reset(self)


    def sort(self) -> "void":
        """
        sort(self)

        Parameters
        ----------
        self: struct _CameraList *


        See also: gphoto2.gp_list_sort
        """
        return _list.CameraList_sort(self)


    def find_by_name(self, index: 'int *', name: 'char const *') -> "void":
        """
        find_by_name(self, index, name)

        Parameters
        ----------
        index: int *
        name: str


        See also: gphoto2.gp_list_find_by_name
        """
        return _list.CameraList_find_by_name(self, index, name)


    def get_name(self, index: 'int') -> "void":
        """
        get_name(self, index)

        Parameters
        ----------
        index: int


        See also: gphoto2.gp_list_get_name
        """
        return _list.CameraList_get_name(self, index)


    def get_value(self, index: 'int') -> "void":
        """
        get_value(self, index)

        Parameters
        ----------
        index: int


        See also: gphoto2.gp_list_get_value
        """
        return _list.CameraList_get_value(self, index)


    def set_name(self, index: 'int', name: 'char const *') -> "void":
        """
        set_name(self, index, name)

        Parameters
        ----------
        index: int
        name: str


        See also: gphoto2.gp_list_set_name
        """
        return _list.CameraList_set_name(self, index, name)


    def set_value(self, index: 'int', value: 'char const *') -> "void":
        """
        set_value(self, index, value)

        Parameters
        ----------
        index: int
        value: str


        See also: gphoto2.gp_list_set_value
        """
        return _list.CameraList_set_value(self, index, value)


    def populate(self, format: 'char const *', count: 'int') -> "void":
        """
        populate(self, format, count)

        Parameters
        ----------
        format: str
        count: int


        See also: gphoto2.gp_list_populate
        """
        return _list.CameraList_populate(self, format, count)

CameraList.__len__ = new_instancemethod(_list.CameraList___len__, None, CameraList)
CameraList.__getitem__ = new_instancemethod(_list.CameraList___getitem__, None, CameraList)
CameraList.count = new_instancemethod(_list.CameraList_count, None, CameraList)
CameraList.append = new_instancemethod(_list.CameraList_append, None, CameraList)
CameraList.reset = new_instancemethod(_list.CameraList_reset, None, CameraList)
CameraList.sort = new_instancemethod(_list.CameraList_sort, None, CameraList)
CameraList.find_by_name = new_instancemethod(_list.CameraList_find_by_name, None, CameraList)
CameraList.get_name = new_instancemethod(_list.CameraList_get_name, None, CameraList)
CameraList.get_value = new_instancemethod(_list.CameraList_get_value, None, CameraList)
CameraList.set_name = new_instancemethod(_list.CameraList_set_name, None, CameraList)
CameraList.set_value = new_instancemethod(_list.CameraList_set_value, None, CameraList)
CameraList.populate = new_instancemethod(_list.CameraList_populate, None, CameraList)
CameraList_swigregister = _list.CameraList_swigregister
CameraList_swigregister(CameraList)


def gp_list_new() -> "CameraList **":
    """
    gp_list_new() -> int

    See also: gphoto2.CameraList
    """
    return _list.gp_list_new()

def gp_list_count(list: 'CameraList') -> "int":
    """
    gp_list_count(list) -> int

    Parameters
    ----------
    list: CameraList


    See also: gphoto2.CameraList.count
    """
    return _list.gp_list_count(list)

def gp_list_append(list: 'CameraList', name: 'char const *', value: 'char const *') -> "int":
    """
    gp_list_append(list, name, value) -> int

    Parameters
    ----------
    list: CameraList
    name: str
    value: str


    See also: gphoto2.CameraList.append
    """
    return _list.gp_list_append(list, name, value)

def gp_list_reset(list: 'CameraList') -> "int":
    """
    gp_list_reset(list) -> int

    Parameters
    ----------
    list: CameraList


    See also: gphoto2.CameraList.reset
    """
    return _list.gp_list_reset(list)

def gp_list_sort(list: 'CameraList') -> "int":
    """
    gp_list_sort(list) -> int

    Parameters
    ----------
    list: CameraList


    See also: gphoto2.CameraList.sort
    """
    return _list.gp_list_sort(list)

def gp_list_find_by_name(list: 'CameraList', index: 'int *', name: 'char const *') -> "int":
    """
    gp_list_find_by_name(list, index, name) -> int

    Parameters
    ----------
    list: CameraList
    index: int *
    name: str


    See also: gphoto2.CameraList.find_by_name
    """
    return _list.gp_list_find_by_name(list, index, name)

def gp_list_get_name(list: 'CameraList', index: 'int') -> "char **":
    """
    gp_list_get_name(list, index) -> int

    Parameters
    ----------
    list: CameraList
    index: int


    See also: gphoto2.CameraList.get_name
    """
    return _list.gp_list_get_name(list, index)

def gp_list_get_value(list: 'CameraList', index: 'int') -> "char **":
    """
    gp_list_get_value(list, index) -> int

    Parameters
    ----------
    list: CameraList
    index: int


    See also: gphoto2.CameraList.get_value
    """
    return _list.gp_list_get_value(list, index)

def gp_list_set_name(list: 'CameraList', index: 'int', name: 'char const *') -> "int":
    """
    gp_list_set_name(list, index, name) -> int

    Parameters
    ----------
    list: CameraList
    index: int
    name: str


    See also: gphoto2.CameraList.set_name
    """
    return _list.gp_list_set_name(list, index, name)

def gp_list_set_value(list: 'CameraList', index: 'int', value: 'char const *') -> "int":
    """
    gp_list_set_value(list, index, value) -> int

    Parameters
    ----------
    list: CameraList
    index: int
    value: str


    See also: gphoto2.CameraList.set_value
    """
    return _list.gp_list_set_value(list, index, value)

def gp_list_populate(list: 'CameraList', format: 'char const *', count: 'int') -> "int":
    """
    gp_list_populate(list, format, count) -> int

    Parameters
    ----------
    list: CameraList
    format: str
    count: int


    See also: gphoto2.CameraList.populate
    """
    return _list.gp_list_populate(list, format, count)


