# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _abilities_list.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_abilities_list')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_abilities_list')
    _abilities_list = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_abilities_list', [dirname(__file__)])
        except ImportError:
            import _abilities_list
            return _abilities_list
        try:
            _mod = imp.load_module('_abilities_list', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _abilities_list = swig_import_helper()
    del swig_import_helper
else:
    import _abilities_list
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import gphoto2.context
import gphoto2.list
import gphoto2.port_info_list
import gphoto2.port
import gphoto2.port_log
class CameraAbilitiesList(object):
    """Proxy of C _CameraAbilitiesList struct."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CameraAbilitiesList"""
        _abilities_list.CameraAbilitiesList_swiginit(self, _abilities_list.new_CameraAbilitiesList())
    __swig_destroy__ = _abilities_list.delete_CameraAbilitiesList

    def __len__(self) -> "int":
        """
        __len__(self) -> int

        Parameters
        ----------
        self: struct _CameraAbilitiesList *


        See also: gphoto2.gp_abilities_list_count
        """
        return _abilities_list.CameraAbilitiesList___len__(self)


    def __getitem__(self, idx: 'int') -> "void":
        """
        __getitem__(self, idx)

        Parameters
        ----------
        idx: int


        See also: gphoto2.gp_abilities_list_count
        """
        return _abilities_list.CameraAbilitiesList___getitem__(self, idx)


    def load(self, context: 'Context') -> "void":
        """
        load(self, context)

        Parameters
        ----------
        context: Context


        See also: gphoto2.gp_abilities_list_load
        """
        return _abilities_list.CameraAbilitiesList_load(self, context)


    def load_dir(self, dir: 'char const *', context: 'Context') -> "void":
        """
        load_dir(self, dir, context)

        Parameters
        ----------
        dir: str
        context: Context


        See also: gphoto2.gp_abilities_list_load_dir
        """
        return _abilities_list.CameraAbilitiesList_load_dir(self, dir, context)


    def reset(self) -> "void":
        """
        reset(self)

        Parameters
        ----------
        self: struct _CameraAbilitiesList *


        See also: gphoto2.gp_abilities_list_reset
        """
        return _abilities_list.CameraAbilitiesList_reset(self)


    def detect(self, info_list: 'PortInfoList', context: 'Context') -> "void":
        """
        detect(self, info_list, context)

        Parameters
        ----------
        info_list: PortInfoList
        context: Context


        See also: gphoto2.gp_abilities_list_detect
        """
        return _abilities_list.CameraAbilitiesList_detect(self, info_list, context)


    def append(self, abilities: 'CameraAbilities') -> "void":
        """
        append(self, abilities)

        Parameters
        ----------
        abilities: CameraAbilities


        See also: gphoto2.gp_abilities_list_append
        """
        return _abilities_list.CameraAbilitiesList_append(self, abilities)


    def count(self) -> "int":
        """
        count(self) -> int

        Parameters
        ----------
        self: struct _CameraAbilitiesList *


        See also: gphoto2.gp_abilities_list_count
        """
        return _abilities_list.CameraAbilitiesList_count(self)


    def lookup_model(self, model: 'char const *') -> "int":
        """
        lookup_model(self, model) -> int

        Parameters
        ----------
        model: str


        See also: gphoto2.gp_abilities_list_lookup_model
        """
        return _abilities_list.CameraAbilitiesList_lookup_model(self, model)


    def get_abilities(self, index: 'int') -> "void":
        """
        get_abilities(self, index)

        Parameters
        ----------
        index: int


        See also: gphoto2.gp_abilities_list_get_abilities
        """
        return _abilities_list.CameraAbilitiesList_get_abilities(self, index)

CameraAbilitiesList.__len__ = new_instancemethod(_abilities_list.CameraAbilitiesList___len__, None, CameraAbilitiesList)
CameraAbilitiesList.__getitem__ = new_instancemethod(_abilities_list.CameraAbilitiesList___getitem__, None, CameraAbilitiesList)
CameraAbilitiesList.load = new_instancemethod(_abilities_list.CameraAbilitiesList_load, None, CameraAbilitiesList)
CameraAbilitiesList.load_dir = new_instancemethod(_abilities_list.CameraAbilitiesList_load_dir, None, CameraAbilitiesList)
CameraAbilitiesList.reset = new_instancemethod(_abilities_list.CameraAbilitiesList_reset, None, CameraAbilitiesList)
CameraAbilitiesList.detect = new_instancemethod(_abilities_list.CameraAbilitiesList_detect, None, CameraAbilitiesList)
CameraAbilitiesList.append = new_instancemethod(_abilities_list.CameraAbilitiesList_append, None, CameraAbilitiesList)
CameraAbilitiesList.count = new_instancemethod(_abilities_list.CameraAbilitiesList_count, None, CameraAbilitiesList)
CameraAbilitiesList.lookup_model = new_instancemethod(_abilities_list.CameraAbilitiesList_lookup_model, None, CameraAbilitiesList)
CameraAbilitiesList.get_abilities = new_instancemethod(_abilities_list.CameraAbilitiesList_get_abilities, None, CameraAbilitiesList)
CameraAbilitiesList_swigregister = _abilities_list.CameraAbilitiesList_swigregister
CameraAbilitiesList_swigregister(CameraAbilitiesList)

GP_DRIVER_STATUS_PRODUCTION = _abilities_list.GP_DRIVER_STATUS_PRODUCTION
GP_DRIVER_STATUS_TESTING = _abilities_list.GP_DRIVER_STATUS_TESTING
GP_DRIVER_STATUS_EXPERIMENTAL = _abilities_list.GP_DRIVER_STATUS_EXPERIMENTAL
GP_DRIVER_STATUS_DEPRECATED = _abilities_list.GP_DRIVER_STATUS_DEPRECATED
GP_DEVICE_STILL_CAMERA = _abilities_list.GP_DEVICE_STILL_CAMERA
GP_DEVICE_AUDIO_PLAYER = _abilities_list.GP_DEVICE_AUDIO_PLAYER
GP_OPERATION_NONE = _abilities_list.GP_OPERATION_NONE
GP_OPERATION_CAPTURE_IMAGE = _abilities_list.GP_OPERATION_CAPTURE_IMAGE
GP_OPERATION_CAPTURE_VIDEO = _abilities_list.GP_OPERATION_CAPTURE_VIDEO
GP_OPERATION_CAPTURE_AUDIO = _abilities_list.GP_OPERATION_CAPTURE_AUDIO
GP_OPERATION_CAPTURE_PREVIEW = _abilities_list.GP_OPERATION_CAPTURE_PREVIEW
GP_OPERATION_CONFIG = _abilities_list.GP_OPERATION_CONFIG
GP_OPERATION_TRIGGER_CAPTURE = _abilities_list.GP_OPERATION_TRIGGER_CAPTURE
GP_FILE_OPERATION_NONE = _abilities_list.GP_FILE_OPERATION_NONE
GP_FILE_OPERATION_DELETE = _abilities_list.GP_FILE_OPERATION_DELETE
GP_FILE_OPERATION_PREVIEW = _abilities_list.GP_FILE_OPERATION_PREVIEW
GP_FILE_OPERATION_RAW = _abilities_list.GP_FILE_OPERATION_RAW
GP_FILE_OPERATION_AUDIO = _abilities_list.GP_FILE_OPERATION_AUDIO
GP_FILE_OPERATION_EXIF = _abilities_list.GP_FILE_OPERATION_EXIF
GP_FOLDER_OPERATION_NONE = _abilities_list.GP_FOLDER_OPERATION_NONE
GP_FOLDER_OPERATION_DELETE_ALL = _abilities_list.GP_FOLDER_OPERATION_DELETE_ALL
GP_FOLDER_OPERATION_PUT_FILE = _abilities_list.GP_FOLDER_OPERATION_PUT_FILE
GP_FOLDER_OPERATION_MAKE_DIR = _abilities_list.GP_FOLDER_OPERATION_MAKE_DIR
GP_FOLDER_OPERATION_REMOVE_DIR = _abilities_list.GP_FOLDER_OPERATION_REMOVE_DIR
class CameraAbilities(object):
    """Proxy of C CameraAbilities struct."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    model = _swig_property(_abilities_list.CameraAbilities_model_get)
    status = _swig_property(_abilities_list.CameraAbilities_status_get)
    port = _swig_property(_abilities_list.CameraAbilities_port_get)
    speed = _swig_property(_abilities_list.CameraAbilities_speed_get)
    operations = _swig_property(_abilities_list.CameraAbilities_operations_get)
    file_operations = _swig_property(_abilities_list.CameraAbilities_file_operations_get)
    folder_operations = _swig_property(_abilities_list.CameraAbilities_folder_operations_get)
    usb_vendor = _swig_property(_abilities_list.CameraAbilities_usb_vendor_get)
    usb_product = _swig_property(_abilities_list.CameraAbilities_usb_product_get)
    usb_class = _swig_property(_abilities_list.CameraAbilities_usb_class_get)
    usb_subclass = _swig_property(_abilities_list.CameraAbilities_usb_subclass_get)
    usb_protocol = _swig_property(_abilities_list.CameraAbilities_usb_protocol_get)
    library = _swig_property(_abilities_list.CameraAbilities_library_get)
    id = _swig_property(_abilities_list.CameraAbilities_id_get)
    device_type = _swig_property(_abilities_list.CameraAbilities_device_type_get)
    reserved2 = _swig_property(_abilities_list.CameraAbilities_reserved2_get)
    reserved3 = _swig_property(_abilities_list.CameraAbilities_reserved3_get)
    reserved4 = _swig_property(_abilities_list.CameraAbilities_reserved4_get)
    reserved5 = _swig_property(_abilities_list.CameraAbilities_reserved5_get)
    reserved6 = _swig_property(_abilities_list.CameraAbilities_reserved6_get)
    reserved7 = _swig_property(_abilities_list.CameraAbilities_reserved7_get)
    reserved8 = _swig_property(_abilities_list.CameraAbilities_reserved8_get)
    __swig_destroy__ = _abilities_list.delete_CameraAbilities
CameraAbilities_swigregister = _abilities_list.CameraAbilities_swigregister
CameraAbilities_swigregister(CameraAbilities)


def gp_abilities_list_new() -> "CameraAbilitiesList **":
    """
    gp_abilities_list_new() -> int

    See also: gphoto2.CameraAbilitiesList
    """
    return _abilities_list.gp_abilities_list_new()

def gp_abilities_list_load(list: 'CameraAbilitiesList', context: 'Context') -> "int":
    """
    gp_abilities_list_load(list, context) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    context: Context


    See also: gphoto2.CameraAbilitiesList.load
    """
    return _abilities_list.gp_abilities_list_load(list, context)

def gp_abilities_list_load_dir(list: 'CameraAbilitiesList', dir: 'char const *', context: 'Context') -> "int":
    """
    gp_abilities_list_load_dir(list, dir, context) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    dir: str
    context: Context


    See also: gphoto2.CameraAbilitiesList.load_dir
    """
    return _abilities_list.gp_abilities_list_load_dir(list, dir, context)

def gp_abilities_list_reset(list: 'CameraAbilitiesList') -> "int":
    """
    gp_abilities_list_reset(list) -> int

    Parameters
    ----------
    list: CameraAbilitiesList


    See also: gphoto2.CameraAbilitiesList.reset
    """
    return _abilities_list.gp_abilities_list_reset(list)

def gp_abilities_list_detect(list: 'CameraAbilitiesList', info_list: 'PortInfoList', context: 'Context') -> "CameraList *":
    """
    gp_abilities_list_detect(list, info_list, context) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    info_list: PortInfoList
    context: Context


    See also: gphoto2.CameraAbilitiesList.detect
    """
    return _abilities_list.gp_abilities_list_detect(list, info_list, context)

def gp_abilities_list_append(list: 'CameraAbilitiesList', abilities: 'CameraAbilities') -> "int":
    """
    gp_abilities_list_append(list, abilities) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    abilities: CameraAbilities


    See also: gphoto2.CameraAbilitiesList.append
    """
    return _abilities_list.gp_abilities_list_append(list, abilities)

def gp_abilities_list_count(list: 'CameraAbilitiesList') -> "int":
    """
    gp_abilities_list_count(list) -> int

    Parameters
    ----------
    list: CameraAbilitiesList


    See also: gphoto2.CameraAbilitiesList.count
    """
    return _abilities_list.gp_abilities_list_count(list)

def gp_abilities_list_lookup_model(list: 'CameraAbilitiesList', model: 'char const *') -> "int":
    """
    gp_abilities_list_lookup_model(list, model) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    model: str


    See also: gphoto2.CameraAbilitiesList.lookup_model
    """
    return _abilities_list.gp_abilities_list_lookup_model(list, model)

def gp_abilities_list_get_abilities(list: 'CameraAbilitiesList', index: 'int') -> "CameraAbilities *":
    """
    gp_abilities_list_get_abilities(list, index) -> int

    Parameters
    ----------
    list: CameraAbilitiesList
    index: int


    See also: gphoto2.CameraAbilitiesList.get_abilities
    """
    return _abilities_list.gp_abilities_list_get_abilities(list, index)

def gp_message_codeset(arg1: 'char const *') -> "char const *":
    """
    gp_message_codeset(arg1) -> char const *

    Parameters
    ----------
    arg1: str

    """
    return _abilities_list.gp_message_codeset(arg1)


