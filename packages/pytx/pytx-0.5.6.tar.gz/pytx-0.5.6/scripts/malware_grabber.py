#!/usr/bin/env python

import argparse
import base64
import cStringIO
import os
import zipfile

from pytx import Malware
from pytx.vocabulary import Malware as m


def run(md5s, output_dir):

    print('Fetching %d MD5s' % len(md5s))

    for md5 in md5s:
        results = Malware.objects(text=md5, strict_text=True)
        for result in results:
            result.details()
            try:
                zipfilehandle = cStringIO.StringIO()
                zipfilehandle.write(base64.b64decode(result.get(m.SAMPLE)))
                with zipfile.ZipFile(zipfilehandle, 'r') as zf:
                    for entry in zf.infolist():

                        if not os.path.exists(output_dir):
                            os.path.makedirs(output_dir)

                        with open(os.path.join(output_dir,
                                               entry.filename), 'w') as f:
                            print('Writing to %s' % entry.filename)
                            f.write(zf.read(entry.filename,
                                            result.get(m.PASSWORD)))
            except Exception, e:
                print str(e)


def get_args():
    parser = argparse.ArgumentParser(description='Download Malware Samples from ThreatExchange')
    parser.add_argument('-m', '--md5s', default=[], action='append',
                        help='[OPTIONAL] md5 hash to lookup. May be specified more than once.')
    parser.add_argument('-f', '--hash-file', default='md5s.txt',
                        help='[OPTIONAL] file path for a file with one md5 hash per line')
    parser.add_argument('-o', '--output-dir', default='out',
                        help='[OPTIONAL] director for storing output.')
    return parser.parse_args()


def main():
    args = get_args()

    # If the file doesn't exist, no big deal
    if os.path.exists(args.hash_file):
        with open(args.hash_file) as fp:
            for line in fp.readlines():
                args.md5s.append(line.strip())

    # Set a default hash if none was specified
    if not args.md5s:
        args.md5s = ['681f1b31baa671a81e4b803dbf8a9f10']

    run(args.md5s, args.output_dir)

if __name__ == '__main__':
    main()
