# coding: UTF-8
//
//  ${model.name}.m
//  ${model.name}
//
//  Created by tencent
//  Copyright (c) 2015年 tencent. All rights reserved.
//
<%
from chameleon.core.codegen.property import ObjectProperty
from chameleon.core.codegen.property import FundamentalProperty
from chameleon.core.codegen.property import CharProperty
from chameleon.core.codegen.property import UnsignedCharProperty
from chameleon.core.codegen.property import ShortProperty
from chameleon.core.codegen.property import UnsignedShortProperty
from chameleon.core.codegen.property import IntProperty
from chameleon.core.codegen.property import UnsignedIntProperty
from chameleon.core.codegen.property import LongProperty
from chameleon.core.codegen.property import UnsignedLongProperty
from chameleon.core.codegen.property import LongLongProperty
from chameleon.core.codegen.property import UnsignedLongLongProperty
from chameleon.core.codegen.property import FloatProperty
from chameleon.core.codegen.property import DoubleProperty
from chameleon.core.codegen.property import NSIntegerProperty
from chameleon.core.codegen.property import NSUIntegerProperty
from chameleon.core.codegen.property import Int8Property
from chameleon.core.codegen.property import Int16Property
from chameleon.core.codegen.property import Int32Property
from chameleon.core.codegen.property import Int64Property
from chameleon.core.codegen.property import UInt8Property
from chameleon.core.codegen.property import UInt16Property
from chameleon.core.codegen.property import UInt32Property
from chameleon.core.codegen.property import UInt64Property
from chameleon.core.codegen.property import BoolProperty
from chameleon.core.codegen.property import NSArrayProperty
from chameleon.core.codegen.property import NSStringProperty
from chameleon.core.codegen.property import NSDictionaryProperty
from chameleon.core.codegen.property import NSNumberProperty
from chameleon.core.codegen.property import NSURLProperty
from chameleon.core.codegen.property import NSDataProperty
from chameleon.core.codegen.property import CustomObjectProperty
from chameleon.core.codegen.property import DZFileProperty
from chameleon.core.codegen.property import DZServerProperty
from chameleon.core.codegen.property import DZMethodProperty
from chameleon.core.codegen.property import DZHeaderProperty
from chameleon.core.codegen.property import DZResponseProperty
from chameleon.core.codegen.property import is_foundation_object_propery
from chameleon.core.codegen.property import is_oc_object_propery
from chameleon.core.codegen.property import DZPathProperty
from chameleon.core.utilities.constant import ModelType
%>

#import "QCloud${model.name}Service.h"
#import "QCloud${model.name}Service+Configuration.h"
#import "QCloud${model.name}Service+Private.h"
#import "QCloudThreadSafeMutableDictionary.h"
#import "QCLoudError.h"

% for request in model.subrequests:
#import "QCloud${request.name}Request.h"
% endfor
QCloudThreadSafeMutableDictionary* QCloud${model.name}ServiceCache()
{
    static QCloudThreadSafeMutableDictionary* Cloud${model.name.lower()}Service = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        Cloud${model.name.lower()}Service = [QCloudThreadSafeMutableDictionary new];
    });
    return Cloud${model.name.lower()}Service;
}

@implementation QCloud${model.name}Service
static QCloud${model.name}Service* ${model.name}Service = nil;


+ (QCloud${model.name}Service*) default${model.name.upper()}
{
    @synchronized (self) {
        if (!${model.name}Service) {
            @throw [NSException exceptionWithName:QCloudErrorDomain reason:@"您没有配置默认的OCR服务配置，请配置之后再调用该方法" userInfo:nil];
        }
        return ${model.name}Service;
    }
}

+ (QCloud${model.name}Service*) registerDefault${model.name}WithConfiguration:(QCloudServiceConfiguration*)configuration
{
    @synchronized (self) {
        ${model.name}Service = [[QCloud${model.name}Service alloc] initWithConfiguration:configuration];
    }
    return ${model.name}Service;
}

+ (QCloud${model.name}Service*) ${model.name.lower()}ServiceForKey:(NSString*)key
{
    QCloud${model.name}Service* ${model.name.lower()}Service = [QCloud${model.name}ServiceCache() objectForKey:key];
    if (!${model.name.lower()}Service) {
        @throw [NSException exceptionWithName:QCloudErrorDomain reason:[NSString stringWithFormat:@"您没有配置Key为%@的OCR服务配置，请配置之后再调用该方法", key] userInfo:nil];
    }
    return ${model.name.lower()}Service;
}

+ (QCloud${model.name}Service*) register${model.name}WithConfiguration:(QCloudServiceConfiguration*)configuration withKey:(NSString*)key;
{
    QCloud${model.name}Service* ${model.name.lower()}Service =[[QCloud${model.name}Service alloc] initWithConfiguration:configuration];
    [QCloud${model.name}ServiceCache() setObject:${model.name.lower()}Service  forKey:key];
    return ${model.name.lower()}Service;
}

% for request in model.subrequests:
- (void) ${request.name}:(QCloud${request.name}Request*)request
{
    [super performRequest:request];
}
% endfor


@end
