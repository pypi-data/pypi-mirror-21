{#
    template for html fragment injected by auto_redirect extension

    args
    ----
    redirector -- RedirectSettings instance
        .subject
        .domain_url
        .domain_root
        .timeout
#}

<div class="admonition warning without-title c-redirect-warning">
    <p class="c-redirect-warning__header">
        {{ redirector.domain_subject }} has moved to
        <a class="c-redirect-warning__link" href="{{ redirector.domain_url }}">{{ redirector.domain_url }}</a>
    </p>
    <p class="c-redirect-warning__auto" style="display: none">
        You will be redirected to the new location in
        <span class="c-redirect-warning__count">{{ redirector.timeout }}</span> seconds.
    </p>
    {% if redirector.domain_footer %}
        <p class="c-redirect-warning__footer">
            {{ redirector.domain_footer|safe }}
        </p>
    {% endif %}
</div>

{% if redirector.timeout >= 0 %}
<script type="text/javascript">
    $(function (){
        // locate components
        var $warning = $(".c-redirect-warning"),
            $link = $(".c-redirect-warning__link"),
            $auto = $(".c-redirect-warning__auto"),
            $count = $(".c-redirect-warning__count");

        // mute everything but warning
        $(" .relbar-top, .relbar-bottom, .document > .related, " +
          ".sphinxsidebarwrapper, .body > *").addClass("c-redirect-muted");
        $warning.prependTo(".body").addClass("is-sticky").removeClass("c-redirect-muted");

        // init redirect state
        var timeout = +new Date + {{ redirector.timeout }} * 1000,
            pending = null,
            target = "{{ redirector.domain_url }}",
            domain_root = "{{ redirector.domain_root }}";

        // make url page-relative
        if(domain_root && CST){
            var url = document.location.href,
                rooturl = CST.hosturl + CST.rootpath;
            if(url.slice(0, rooturl.length) == rooturl && url.slice(rooturl.length).match(/^[/#?]/)){
                // safe to strip off document-relative porition of url, and add to target
                target = domain_root + url.slice(rooturl.length);
            }
            $link.attr("href", target);
        }

        // update counter & redirect after timeout
        function update(){
            var delta = timeout - new Date;
            if(delta < 0){
                window.location = target;
                setTimeout(function (){ $auto.hide(); }, 250);
            } else {
                $count.html(Math.ceil(delta / 1000));
                pending = setTimeout(update, 250);
            }
        }

        // start counter
        update();
        $auto.show();

        // don't let clicks in window propagate to next handler...
        $warning.click(function (evt){
            if(evt.which == 1) { window.location = target; }
            evt.stopPropagation();
        }).addClass("is-clickable");

        // stop auto-redirect if they click outside of warning
        $(window).one("click", function (evt){
{#            if($(evt.target).closest(".c-redirect-warning").length){{ return; }}#}
            $auto.hide();
            clearTimeout(pending);
            $(".c-redirect-muted").removeClass("c-redirect-muted");
            $warning.removeClass("is-sticky");
        });
    });
</script>
{% endif %}