
//
// WARNING: This file was auto generated and should not be modified directly!
// Any changes here will be overwritten!
//

#include "setup_module_auto_defines.h"
#include <Python.h>
#include "ics/icsnVC40.h"
#include "ics/icsnVC40Internal.h"

int setup_module_auto_defines(PyObject * module)
{
	int result = 0;

	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_RS232);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_USB_BULK);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_TCPIP);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_FIRE_USB);
	result += PyModule_AddIntMacro(module, NETID_DEVICE);
	result += PyModule_AddIntMacro(module, NETID_HSCAN);
	result += PyModule_AddIntMacro(module, NETID_MSCAN);
	result += PyModule_AddIntMacro(module, NETID_SWCAN);
	result += PyModule_AddIntMacro(module, NETID_LSFTCAN);
	result += PyModule_AddIntMacro(module, NETID_FORDSCP);
	result += PyModule_AddIntMacro(module, NETID_J1708);
	result += PyModule_AddIntMacro(module, NETID_AUX);
	result += PyModule_AddIntMacro(module, NETID_JVPW);
	result += PyModule_AddIntMacro(module, NETID_ISO);
	result += PyModule_AddIntMacro(module, NETID_ISOPIC);
	result += PyModule_AddIntMacro(module, NETID_MAIN51);
	result += PyModule_AddIntMacro(module, NETID_RED);
	result += PyModule_AddIntMacro(module, NETID_SCI);
	result += PyModule_AddIntMacro(module, NETID_ISO2);
	result += PyModule_AddIntMacro(module, NETID_ISO14230);
	result += PyModule_AddIntMacro(module, NETID_LIN);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET1);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET2);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET3);
	result += PyModule_AddIntMacro(module, NETID_ISO3);
	result += PyModule_AddIntMacro(module, NETID_HSCAN2);
	result += PyModule_AddIntMacro(module, NETID_HSCAN3);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET4);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET5);
	result += PyModule_AddIntMacro(module, NETID_ISO4);
	result += PyModule_AddIntMacro(module, NETID_LIN2);
	result += PyModule_AddIntMacro(module, NETID_LIN3);
	result += PyModule_AddIntMacro(module, NETID_LIN4);
	result += PyModule_AddIntMacro(module, NETID_MOST);
	result += PyModule_AddIntMacro(module, NETID_RED_APP_ERROR);
	result += PyModule_AddIntMacro(module, NETID_CGI);
	result += PyModule_AddIntMacro(module, NETID_3G_RESET_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_FB_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_APP_SIGNAL_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_DATALINK_CM_TX_MSG);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_DATALINK_CM_RX_MSG);
	result += PyModule_AddIntMacro(module, NETID_3G_LOGGING_OVERFLOW);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_SETTINGS_EX);
	result += PyModule_AddIntMacro(module, NETID_HSCAN4);
	result += PyModule_AddIntMacro(module, NETID_HSCAN5);
	result += PyModule_AddIntMacro(module, NETID_RS232);
	result += PyModule_AddIntMacro(module, NETID_UART);
	result += PyModule_AddIntMacro(module, NETID_UART2);
	result += PyModule_AddIntMacro(module, NETID_UART3);
	result += PyModule_AddIntMacro(module, NETID_UART4);
	result += PyModule_AddIntMacro(module, NETID_SWCAN2);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NETID_DATA_TO_HOST);
	result += PyModule_AddIntMacro(module, NETID_TEXTAPI_TO_HOST);
	result += PyModule_AddIntMacro(module, NETID_I2C1);
	result += PyModule_AddIntMacro(module, NETID_SPI1);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET6);
	result += PyModule_AddIntMacro(module, NETID_RED_VBAT);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET7);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET8);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET9);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET10);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET11);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY1A);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY1B);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2A);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2B);
	result += PyModule_AddIntMacro(module, NETID_LIN5);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET12);
	result += PyModule_AddIntMacro(module, NETID_MOST25);
	result += PyModule_AddIntMacro(module, NETID_MOST50);
	result += PyModule_AddIntMacro(module, NETID_MOST150);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET);
	result += PyModule_AddIntMacro(module, NETID_GMFSA);
	result += PyModule_AddIntMacro(module, NETID_TCP);
	result += PyModule_AddIntMacro(module, NETID_HSCAN6);
	result += PyModule_AddIntMacro(module, NETID_HSCAN7);
	result += PyModule_AddIntMacro(module, NETID_LIN6);
	result += PyModule_AddIntMacro(module, NETID_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NETID_HW_COM_LATENCY_TEST);
	result += PyModule_AddIntMacro(module, NETID_MAX);
	result += PyModule_AddIntMacro(module, NETID_INVALID);
	result += PyModule_AddIntMacro(module, NEODEVICE_UNKNOWN);
	result += PyModule_AddIntMacro(module, NEODEVICE_BLUE);
	result += PyModule_AddIntMacro(module, NEODEVICE_SW_VCAN);
	result += PyModule_AddIntMacro(module, NEODEVICE_DW_VCAN);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN3);
	result += PyModule_AddIntMacro(module, NEODEVICE_RED);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU);
	result += PyModule_AddIntMacro(module, NEODEVICE_IEVB);
	result += PyModule_AddIntMacro(module, NEODEVICE_PENDANT);
	result += PyModule_AddIntMacro(module, NEODEVICE_VIRTUAL_NEOVI);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECUCHIP_UART);
	result += PyModule_AddIntMacro(module, NEODEVICE_PLASMA_1_11);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE_VNET);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEOANALOG);
	result += PyModule_AddIntMacro(module, NEODEVICE_CT_OBD);
	result += PyModule_AddIntMacro(module, NEODEVICE_PLASMA_1_12);
	result += PyModule_AddIntMacro(module, NEODEVICE_PLASMA_1_13);
	result += PyModule_AddIntMacro(module, NEODEVICE_ION_2);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADSTAR);
	result += PyModule_AddIntMacro(module, NEODEVICE_ION_3);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN4);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU15);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU25);
	result += PyModule_AddIntMacro(module, NEODEVICE_EEVB);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCANRF);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE2);
	result += PyModule_AddIntMacro(module, NEODEVICE_FLEX);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADGALAXY);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADSTAR2);
	result += PyModule_AddIntMacro(module, NEODEVICE_VIVIDCAN);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_SIM);
	result += PyModule_AddIntMacro(module, NEODEVICE_ANY_PLASMA);
	result += PyModule_AddIntMacro(module, NEODEVICE_ANY_ION);
	result += PyModule_AddIntMacro(module, NEODEVICE_ALL);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEOECUCHIP);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_MSCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN2);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN3);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_SWCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN4);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN5);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN6);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN7);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_SWCAN2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE1_OFFSET);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE2_OFFSET);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE_NUM);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE1_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE2_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE3_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, SCRIPT_STATUS_STOPPED);
	result += PyModule_AddIntMacro(module, SCRIPT_STATUS_RUNNING);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_FLASH_MEM);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_INTERNAL_FLASH);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_SDCARD);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_VCAN3_MEM);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CUSTOM);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GMLAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1850VPW);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1850PWM);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_ISO9141);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_Keyword2000);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GM_ALDL_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_CCD);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_SCI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_FORD_UBP);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_BEAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_LIN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1708);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_JVPW);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1939);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_FLEXRAY);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_MOST);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CGI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GME_CIM_SCL_KLINE);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_SPI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_I2C);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GENERIC_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_JTAG);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_UNIO);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_DALLAS_1WIRE);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GENERIC_MANCHSESTER);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_SENT_PROTOCOL);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_ETHERNET);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CANFD);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GMFSA);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_TCP);
	result += PyModule_AddIntMacro(module, SPY_STATUS_GLOBAL_ERR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TX_MSG);
	result += PyModule_AddIntMacro(module, SPY_STATUS_XTD_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_REMOTE_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CAN_ERROR_PASSIVE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_HEADERCRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_INCOMPLETE_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_LOST_ARBITRATION);
	result += PyModule_AddIntMacro(module, SPY_STATUS_UNDEFINED_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CAN_BUS_OFF);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_RECOVERED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_SHORTED_PLUS);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_SHORTED_GND);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CHECKSUM_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BAD_MESSAGE_BIT_TIME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TX_NOMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_COMM_IN_OVERFLOW);
	result += PyModule_AddIntMacro(module, SPY_STATUS_EXPECTED_LEN_MISMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_MSG_NO_MATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BREAK);
	result += PyModule_AddIntMacro(module, SPY_STATUS_AVSI_REC_OVERFLOW);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TEST_TRIGGER);
	result += PyModule_AddIntMacro(module, SPY_STATUS_AUDIO_COMMENT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_GPS_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS_ANALOG_DIGITAL_INPUT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TEXT_COMMENT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_NETWORK_MESSAGE_TYPE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_VSI_TX_UNDERRUN);
	result += PyModule_AddIntMacro(module, SPY_STATUS_VSI_IFR_CRC_BIT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_INIT_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_LIN_MASTER);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CANFD);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU);
	result += PyModule_AddIntMacro(module, SPY_STATUS_HIGH_SPEED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_EXTENDED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU_UPDATE_BIT_SET);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU_NO_UPDATE_BIT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_HAS_VALUE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_VALUE_IS_BOOLEAN);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_HIGH_VOLTAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LONG_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_GLOBAL_CHANGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ERROR_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_END_OF_LONG_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_BREAK_NOT_0);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_BREAK_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_SYNC_NOT_55);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_DATA_GREATER_8);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_TX_RX_MISMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_MSG_ID_PARITY);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_SYNC_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_OVERFLOW_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ID_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_PARITY_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_SLAVE_BYTE_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_RX_TIMEOUT_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_NO_SLAVE_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_JUST_BREAK_SYNC);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_SLAVE_DATA_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_ONLY_UPDATE_SLAVE_TABLE_ONCE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_PACKET_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_STATUS);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_LOW_LEVEL);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_CONTROL_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MHP_USER_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MHP_CONTROL_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_I2S_DUMP);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MOST50);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MOST150);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_CHANGED_PAR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_CRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_FRAME_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_FCS_AVAILABLE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_NO_PADDING);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_PREEMPTION_ENABLED);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_A);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_B);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_MATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_NO_CRC);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_NO_HEADERCRC);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_CAN_ISO15765_LOGICAL_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_CAN_HAVE_LINK_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_ESI);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_IDE);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_RTR);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_FDF);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_BRS);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_MODE);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEOVI_TIMESTAMP_2);
	result += PyModule_AddIntMacro(module, NEOVI_TIMESTAMP_1);
	result += PyModule_AddIntMacro(module, NEOVIPRO_VCAN_TIMESTAMP_2);
	result += PyModule_AddIntMacro(module, NEOVIPRO_VCAN_TIMESTAMP_1);
	result += PyModule_AddIntMacro(module, NEOVI6_VCAN_TIMESTAMP_2);
	result += PyModule_AddIntMacro(module, NEOVI6_VCAN_TIMESTAMP_1);
	result += PyModule_AddIntMacro(module, NEOVI_RED_TIMESTAMP_2_25NS);
	result += PyModule_AddIntMacro(module, NEOVI_RED_TIMESTAMP_1_25NS);
	result += PyModule_AddIntMacro(module, NEOVI_RED_TIMESTAMP_2_10NS);
	result += PyModule_AddIntMacro(module, NEOVI_RED_TIMESTAMP_1_10NS);
	// enum
	result += PyModule_AddIntMacro(module, AUTO);
	result += PyModule_AddIntMacro(module, USE_TQ);
	// enum
	result += PyModule_AddIntMacro(module, BPS20);
	result += PyModule_AddIntMacro(module, BPS33);
	result += PyModule_AddIntMacro(module, BPS50);
	result += PyModule_AddIntMacro(module, BPS62);
	result += PyModule_AddIntMacro(module, BPS83);
	result += PyModule_AddIntMacro(module, BPS100);
	result += PyModule_AddIntMacro(module, BPS125);
	result += PyModule_AddIntMacro(module, BPS250);
	result += PyModule_AddIntMacro(module, BPS500);
	result += PyModule_AddIntMacro(module, BPS800);
	result += PyModule_AddIntMacro(module, BPS1000);
	result += PyModule_AddIntMacro(module, BPS666);
	result += PyModule_AddIntMacro(module, BPS2000);
	result += PyModule_AddIntMacro(module, BPS4000);
	result += PyModule_AddIntMacro(module, CAN_BPS5000);
	result += PyModule_AddIntMacro(module, CAN_BPS6667);
	result += PyModule_AddIntMacro(module, CAN_BPS8000);
	result += PyModule_AddIntMacro(module, CAN_BPS10000);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, NORMAL);
	result += PyModule_AddIntMacro(module, DISABLE);
	result += PyModule_AddIntMacro(module, LOOPBACK);
	result += PyModule_AddIntMacro(module, LISTEN_ONLY);
	result += PyModule_AddIntMacro(module, LISTEN_ALL);
	result += PyModule_AddIntMacro(module, CAN_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, NO_CANFD);
	result += PyModule_AddIntMacro(module, CANFD_ENABLED);
	result += PyModule_AddIntMacro(module, CANFD_BRS_ENABLED);
	result += PyModule_AddIntMacro(module, CANFD_ENABLED_ISO);
	result += PyModule_AddIntMacro(module, CANFD_BRS_ENABLED_ISO);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, CANFD_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_DISABLED);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_NO_RESISTOR);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_WITH_RESISTOR);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_DISABLED_RESISTOR_ENABLED);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SWCAN_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, BPS5000);
	result += PyModule_AddIntMacro(module, BPS10400);
	result += PyModule_AddIntMacro(module, BPS33333);
	result += PyModule_AddIntMacro(module, BPS50000);
	result += PyModule_AddIntMacro(module, BPS62500);
	result += PyModule_AddIntMacro(module, BPS71429);
	result += PyModule_AddIntMacro(module, BPS83333);
	result += PyModule_AddIntMacro(module, BPS100000);
	result += PyModule_AddIntMacro(module, BPS117647);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, RESISTOR_ON);
	result += PyModule_AddIntMacro(module, RESISTOR_OFF);
	// enum
	result += PyModule_AddIntMacro(module, SLEEP_MODE);
	result += PyModule_AddIntMacro(module, SLOW_MODE);
	result += PyModule_AddIntMacro(module, NORMAL_MODE);
	result += PyModule_AddIntMacro(module, FAST_MODE);
	result += PyModule_AddIntMacro(module, LIN_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ISO9141_KEYWORD2000__INIT_STEP_SIZE);
	result += PyModule_AddIntMacro(module, ISO9141_KEYWORD2000_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, UART_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, J1708_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, SRedSettings_SIZE);
	result += PyModule_AddIntMacro(module, STextAPISettings_SIZE);
	result += PyModule_AddIntMacro(module, stChipVersions_SIZE);
	result += PyModule_AddIntMacro(module, SNeoMostGatewaySettings_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, OPETH_FUNC_TAP);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_MEDIACONVERTER);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_TAP_LOW_LATENCY);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, OP_ETH_GENERAL_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, OPETH_LINK_AUTO);
	result += PyModule_AddIntMacro(module, OPETH_LINK_MASTER);
	result += PyModule_AddIntMacro(module, OPETH_LINK_SLAVE);
	result += PyModule_AddIntMacro(module, OP_ETH_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, CANTERM_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, REPORT_ON_PERIODIC);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC1);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC2);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC3);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC4);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC5);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC6);
	result += PyModule_AddIntMacro(module, REPORT_ON_LED1);
	result += PyModule_AddIntMacro(module, REPORT_ON_LED2);
	result += PyModule_AddIntMacro(module, REPORT_ON_KLINE);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC3_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC4_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC5_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC6_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_PWM_IN1);
	result += PyModule_AddIntMacro(module, REPORT_ON_GPS);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_ANDROID_MSGS);
	result += PyModule_AddIntMacro(module, SFireSettings_SIZE);
	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_ANDROID_MSGS);
	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_DISABLE_USB_CHECK);
	result += PyModule_AddIntMacro(module, SFireVnetSettings_SIZE);
	result += PyModule_AddIntMacro(module, SCyanSettings_SIZE);
	result += PyModule_AddIntMacro(module, SVCAN3Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVCAN4Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVCANRFSettings_SIZE);
	result += PyModule_AddIntMacro(module, SECUSettings_SIZE);
	result += PyModule_AddIntMacro(module, SPendantSettings_SIZE);
	result += PyModule_AddIntMacro(module, SIEVBSettings_SIZE);
	result += PyModule_AddIntMacro(module, SEEVBSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADGalaxySettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADStar2Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVividCANSettings_SIZE);
	result += PyModule_AddIntMacro(module, SOBD2SimSettings_SIZE);
	result += PyModule_AddIntMacro(module, GS_VERSION);
	result += PyModule_AddIntMacro(module, GLOBAL_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, NEOVI_3G_MAX_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, stCM_ISO157652_TxMessage_SIZE);
	result += PyModule_AddIntMacro(module, stCM_ISO157652_RxMessage_SIZE);
	result += PyModule_AddIntMacro(module, spyFilterLong_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageLong_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageJ1850_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageVSB_SIZE);
	// enum

#ifdef _USE_INTERNAL_HEADER_ /* ALL THESE DEFINES ARE SPECIFIED IN THE INTERNAL HEADER */

	result += PyModule_AddIntMacro(module, INTREPIDCS_DRIVER_STANDARD);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DRIVER_TEST);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DRIVER_CYPRESS);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DRIVER_SYNCTOPC);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DRIVER_ENHANCED_3G);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_NEO4);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_NEO6);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_UNKNOWN);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN2_DW);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN2_SW);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN2_LSFT);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN2_WIFI);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN3_CANDOC);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_NEOFIRE);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_VCAN3);
	result += PyModule_AddIntMacro(module, INTREPIDCS_DEVICE_NEORED);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE2_CYAN);
	result += PyModule_AddIntMacro(module, NETID_FIRE_HSCAN2);
	result += PyModule_AddIntMacro(module, NETID_FIRE_MSCAN2);
	result += PyModule_AddIntMacro(module, NETID_FIRE_HSCAN3);
	result += PyModule_AddIntMacro(module, NETID_FIRE_LIN2);
	result += PyModule_AddIntMacro(module, NETID_FIRE_LIN3);
	result += PyModule_AddIntMacro(module, NETID_FIRE_LIN4);
	result += PyModule_AddIntMacro(module, NETID_FIRE_CGI);
	result += PyModule_AddIntMacro(module, DEVICE_OPTION_ENABLE_TIMESYNC);
	result += PyModule_AddIntMacro(module, DEVICE_OPTION_DISABLE_AUTO_UPDATE);
	result += PyModule_AddIntMacro(module, DEVICE_OPTION_DONT_ENABLE_NETCOMS);
	result += PyModule_AddIntMacro(module, DEVICE_OPTION_DONT_USE_NEOVISERVER);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_GLOBAL);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_CFRX_EXP_FF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_FCRX_EXP_FF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_SFRX_EXP_CF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_FFRX_EXP_CF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_FCRX_EXP_CF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_CF_TIME_OUT);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_COMPLETE);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_IN_PROGRESS);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_SEQ_ERR_CF);
	result += PyModule_AddIntMacro(module, INTREPIDCS_15765_RX_ERR_INVALID_LEN);
	result += PyModule_AddIntMacro(module, NETID_RED_EXT_MEMORYREAD);
	result += PyModule_AddIntMacro(module, NETID_RED_INT_MEMORYREAD);
	result += PyModule_AddIntMacro(module, NETID_RED_DFLASH_READ);
	result += PyModule_AddIntMacro(module, NETID_RED_SDCARD_READ);
	result += PyModule_AddIntMacro(module, NETID_3G_CAN_ERRBITS);
	result += PyModule_AddIntMacro(module, NETID_RED_DFLASH_WRITE_DONE);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_CAN1_LOGICAL);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_CAN2_LOGICAL);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_LIN1_LOGICAL);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_LIN2_LOGICAL);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_LIN1_ANALOG);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_LIN2_ANALOG);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_MISC_ANALOG);
	result += PyModule_AddIntMacro(module, NETID_RED_WAVE_MISCDIO2_LOGICAL);
	result += PyModule_AddIntMacro(module, NETID_RED_NEOVI_NETWORK);
	result += PyModule_AddIntMacro(module, NETID_RED_READ_BAUD_SETTINGS);
	result += PyModule_AddIntMacro(module, NETID_RED_OLDFORMAT);
	result += PyModule_AddIntMacro(module, NETID_RED_SCOPE_CAPTURE);
	result += PyModule_AddIntMacro(module, NETID_RED_HARDWARE_EXCEP);
	result += PyModule_AddIntMacro(module, NETID_RED_GET_RTC);
	result += PyModule_AddIntMacro(module, DEVELOPER_BACKDOOR);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_DWCAN1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_DWCAN2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_DWCAN3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_DWCAN4);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_HSCAN1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_HSCAN2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_HSCAN3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_HSCAN4);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_MSCAN1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_MSCAN2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_MSCAN3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_MSCAN4);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SWCAN1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SWCAN2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SWCAN3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SWCAN4);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_LSFTCAN1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_LSFTCAN2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_LSFTCAN3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_LSFTCAN4);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SLAVEFIREVNET);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL_SUBVER_LATEST);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL_SUBVER_LEGACY_0);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL_SUBVER_LEGACY_1);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL_SUBVER_LEGACY_2);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_GLOBAL_SUBVER_LEGACY_3);
	result += PyModule_AddIntMacro(module, GS_EX_SUBVER_STANDARD_STRUCT);
	result += PyModule_AddIntMacro(module, GS_EX_SUBCMD_SLAVEFIREVNET_SUBVER_LATEST);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_OK);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_GENERAL_FAILURE);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_INVALID_SUBCMD);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_INVALID_SUBVER);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_NOT_ENOUGH_MEM);
	result += PyModule_AddIntMacro(module, GS_EX_ERR_API_FAILURE);
	result += PyModule_AddIntMacro(module, SPY_GPS_LOCATION);
	result += PyModule_AddIntMacro(module, SPY_GPS_SPEED);
	result += PyModule_AddIntMacro(module, SPY_GPS_ALTITUDE);
	result += PyModule_AddIntMacro(module, CANNODE_STATUS_COREMINI_IS_RUNNING);
	result += PyModule_AddIntMacro(module, CANNODE_STATUS_IN_BOOTLOADER);
	result += PyModule_AddIntMacro(module, MAIN_VNET);
	result += PyModule_AddIntMacro(module, SLAVE_VNET_A);
	result += PyModule_AddIntMacro(module, SLAVE_VNET_B);
	result += PyModule_AddIntMacro(module, WIFI_CONNECTION);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TX_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ERROR_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_USB_SEND_DATA_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISO_DATA_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISO_DATA_READ_BUFFER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISO_DATA_ZERO_PACKETS);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_MSG_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_STOP_ISO_STREAM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_INVALID_NETID);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_RX_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_TX_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN_PIC_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_INVALID_DEVICE_RESPONSE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISOTX_DATA_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_CMD_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_RX_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_READCOMERR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_READ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_TX_BUFFER_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_MISC_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_FIND_WRITE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_FIND_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_FIND_CLEARCOMM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_FIND_READCOMM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_FIND_TIMEOUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_BREAK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_FRAME);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_IOE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_OVERRUN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_ERR_PARITY);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_TXBUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_USB_TX_RS232_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_CREATE_FILE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_GET_COMM_STATE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_SET_COMM_STATE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_START_COMM_RX_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RS232_START_COMM_TX_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SYNC_COUNT_ERR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_MSG_FRAME_ERR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_MSG_FIFO_OVER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_MSG_CHK_SUM_ERR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_BULKIN_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_BULKIN_ERR_READ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_RX_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_DEV_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RESET_STATUS_CHANGED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISO_LONG_CACHE_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISORX_LONG_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_J1708_LONG_CACHE_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_J1708_LONG_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_DEVICE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_HSCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_MSCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_FORDSCP);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_J1708);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_AUX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_ISO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_ISOPIC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_MAIN51);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_HOST);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_READ_ENTIRE_DEEPROM_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_WRITE_ENTIRE_DEEPROM_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_USB_PORT_ALREADY_OPEN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_JVPW_TX_REPORT_FIFO_ERR_IN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISOJ_TX_REPORT_FIFO_ERR_IN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_JVPW_TX_REPORT_FIFO_ERR_OUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISOJ_TX_REPORT_FIFO_ERR_OUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_IN_FROM_HOST_FIFO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_HOST_CHKSUM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ISOJ_TX_HOST_MISSED_BYTE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NEOVI_NO_RESPONSE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RX_SOCKET_FIFO_OVER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_TXSOCKET_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_RXSOCKET_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_RXSOCKET_CLIENT_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TCP_CLIENT_TX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TCP_CLIENT_RX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TCP_CLIENT_RX_SOCK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_UNABLE_CONNECT_TO_SRVR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_UNABLE_CREATE_CLIENT_SOCK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_UNABLE_WSASTARTUP);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SOCK_CL_RD_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SOCK_CL_TX_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SOCK_SRVR_RX_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SOCK_SRVR_TX_BUFFER_ALLOC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ILLEGAL_TX_NETWORK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_HOST_OVERRUN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_OPEN_GET_COMM_TIMEOUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_OPEN_SET_COMM_TIMEOUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_OPEN_READ_DEVICE_TYPE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_OPEN_READ_DEVICE_TYPE_TOUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_CLOSE_PURGE_COMM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TX_COM_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_GET_USBSERIAL_DEVICES);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_USB_TX_RS232_BCOUNT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_OPEN_INBOOTLOADER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TOO_MANY_PERIODICS);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_FIRMWARE_INFO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NRED_ODDNUMBYTES);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NRED_UNKNOWN_RED_NETID);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_NOT_SUPPORTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_BL_START_INDEX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3G_BL_FAILURE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_BL_END_INDEX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_FAILED_TO_ENTER_BL);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_REQ_SERIAL_NUMBER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_AUTHENTICATE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_APP_VERSION);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SET_BAUD_COMM_FAILURE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_INVALID_BAUD_SPECIFIED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_READ_BAUD_COMM_FAILURE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_FAILED_TO_SAVE_EEPROM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_FAILED_TO_UPDATE_WAVEFORM_CHANNEL);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_UNKNOWN_NETWORK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_UNKNOWN_NETWORK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_UNKNOWN_NETWORK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_MSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_MSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_MSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_MSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_USB_PURGE_FAILED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_FIRE_COMM_BAD_PACKET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_FIRE_CGI_COMM_BAD_PACKET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_MSCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_SWCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LSFTCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_UNKNOWN_NETWORK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_INTERNAL_SERIAL_NO_DOES_NOT_MATCH_REGISTRY_SERIAL_NO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_JVPW_LONG_CACHE_OVERFLOW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_FAILED_TO_SET_LICENSE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3G_DEVICE_LICENSE_NEEDS_TO_BE_UPGRADED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_MSCAN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LSFT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_SW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_KYW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_J1708);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_RTC_INVALID);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_LOADED_DEFAULT_SETTINGS);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_CGI);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_JVPW);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_INVALID_SCRIPT_LOCATION);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SDCARD_NOT_INSERTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SDCARD_NOT_FORMATTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SDCARD_WRITE_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SDCARD_READ_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_START_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_INVALID_FUNCBLOCK_INDEX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_ERROR_DOWNLOADING_SCRIPT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_ERROR_CLEARING_SCRIPT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ISO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ISO);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_INVALID_MSG_INDEX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_INVALID_APPSIG_INDEX);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SCRIPT_NO_SCRIPT_RUNNING);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_COULD_NOT_SET_SETTINGS_FIRMWARE_MISMATCH);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_FIRE_CGI_TX_NOT_ENABLED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SEND_DEVICE_CONFIG_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_GET_DEVICE_CONFIG_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_UNKNOWN_NEOVI_TYPE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ISO2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ISO3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ISO4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_FAILED_TO_CLEAR_LIN_SLAVE_DATA);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ISO1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ISO1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ISO1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ISO1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ISO1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_DROPPED_RTC_CMD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_J1850_TX_REQUESTS_FLUSHED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_J1708_COMM_BAD_PACKET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_SUPPORTED_BY_HARDWARE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_FEATURE_NOT_UNLOCKED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_DEVICE_NOT_POWERED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_OK);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORBADINIT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORNOCANPIPE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORISONEG7FRESPONSE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORTOOLNOTSELECTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORINVALIDDEVICESELECTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORCOULDNOTOPENTOOL);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORNOFLOWCONTROL);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORUNSPECIFIC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORCOREMININULLPTR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORCOREMINIZEROLEN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORRESERVED3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_3GCANDOWNLOADER_ERRORRESERVED4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_HARDWARE_FAILURE_SRAM);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_ACTIVE_CONNECTION_ALREADY_EXISTS);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_RTC_FAILED_READ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_RTC_AUTO_RTC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_PLASMA_CORE_RESTARTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_REQ_VBATT_FAILED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_TXRX_PAIRS_TIMEOUT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_TXRX_PAIRS_BUSY);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_COREMINI_IN_USE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_PROBLEM_STOPPING_TXSOCKET_CLIENT_THREAD);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_ABORTED_FOR_SHUTDOWN);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_SEND_DEVICE_CONFIG_NOTPOSSIBLE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_CHANNEL_LOCKED_BY_OTHER_CLIENT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_NEOVISERVER_GENERAL_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_CHANNEL_LOCKING_NOT_SUPPORTED_FOR_DEVICE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TOO_MANY_TXRXPAIRS);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_TXRXPAIRS_NOT_SUPPORTED_FOR_DEVICE);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_TXRX_PAIRS_FAILED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_DEVICE_USB_CONNECTED_BUT_NOT_POWER);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_MAIN51_TX_FIFO_OVERFLOW_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_SWCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_SW2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_TX_INTERFACE_NOT_IMPLEMENTED);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_TX_MESSAGES_COMM_ENABLE_IS_OFF);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_RX_FILTER_MATCH_COUNT_EXCEEDED);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_NO_DEVICES_ATTACHED);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_DEVICE_COULD_NOT_BE_OPENED);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_BIT_FILE_NOT_FOUND);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_FPGA_CONFIG_FAILED);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_OUTPUT_MESSAGE_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_DATA_INCORRECT_SEQUENCE_ERROR);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_DATA_SYNCHRONIZATION_ERROR);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_HELPER_DLL_COULD_NOT_BE_LOADED);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_INPUT_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_INVALID_ESCAPE_SEQUENCE);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_USB_LOW_LEVEL_READ_FAILURE);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_ERROR_FIFO_OVERFLOW);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_HEARTBEAT_SEQUENCE_ERROR);
	result += PyModule_AddIntMacro(module, FLEXRAY_ERROR_HEARTBEAT_TIMEOUT_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_FAILED_TO_SET_RTC);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_FR1A);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_FR1A);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_FR1B);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_FR2A);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_FR2B);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_HSCAN7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_LIN6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_CONTACT_TECH_SUPPORT);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ETHERNET);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_RX_MSG_FULL_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_MSG_FULL_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_TX_REPORT_MSG_FULL_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_DRIVER_OVERFLOW_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_NETWORK_NOT_ENABLED_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_SETTINGS_NOT_SET_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH1);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH2);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH3);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH4);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH5);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH6);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH7);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH8);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH9);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH10);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH11);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_RED_PREEMPTION_NOT_ENABLED_OP_ETH12);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ETH_PCAP_TX_ERROR);
	result += PyModule_AddIntMacro(module, NEOVI_ERROR_DLL_ETH_PCAP_RX_ERROR);
	result += PyModule_AddIntMacro(module, icsspyErrCritical);
	result += PyModule_AddIntMacro(module, icsspyErrQuestion);
	result += PyModule_AddIntMacro(module, icsspyErrExclamation);
	result += PyModule_AddIntMacro(module, icsspyErrInformation);
	result += PyModule_AddIntMacro(module, NEOVI_RED_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCAN3_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_IEVB_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PENDANT_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_NEOANALOG_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCAN4_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU15_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU25_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_EEVB_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADSTAR_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCANRF_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADGALAXY_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADSTAR2_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VIVIDCAN_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOOBD2_SIM_PROD_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE_UCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE_JCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCAN3_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU_MPIC_ID);
	result += PyModule_AddIntMacro(module, NEOVI_IEVB_MPIC_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PENDANT_MPIC_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_HID_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ANALOG_MPIC_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_ANALOG_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_FLEXRAY_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_CORE_ID_1_12);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_VNETFIRE_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_VNETFIRE_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_HID_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_CORE_LOADER_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_HID_LOADER_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ION_FPGA_BIT_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_EP_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_EP_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_AOUT_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_MOST25_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_MOST50_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_MOST150_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_VCAN4_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCAN4_SCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU15_STM32_ID);
	result += PyModule_AddIntMacro(module, NEOVI_ECU25_STM32_ID);
	result += PyModule_AddIntMacro(module, NEOVI_EEVB_STM32_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_SLAVE_EP_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_SLAVE_EP_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADSTAR_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VCANRF_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_CCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_BLECHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, NEOVI_FIRE2_CYAN_SECURITYCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADGALAXY_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, FIRE2_VNET_MCHIP_ID);
	result += PyModule_AddIntMacro(module, SLAVE_A_FIRE2_VNET_MCHIP_ID);
	result += PyModule_AddIntMacro(module, SLAVE_A_FIRE2_VNET_CCHIP_ID);
	result += PyModule_AddIntMacro(module, FIRE2_VNET_CCHIP_ID);
	result += PyModule_AddIntMacro(module, FIRE2_VNET_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_RADSTAR2_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VIVIDCAN_STM32_ID);
	result += PyModule_AddIntMacro(module, NEOVI_OBD2_SIM_MCHIP_ID);
	result += PyModule_AddIntMacro(module, FIRE2_VNETZ_MCHIP_ID);
	result += PyModule_AddIntMacro(module, FIRE2_VNETZ_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, SLAVE_A_FIRE2_VNETZ_MCHIP_ID);
	result += PyModule_AddIntMacro(module, SLAVE_A_FIRE2_VNETZ_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, SLAVE_B_FIRE2_VNETZ_ZYNQ_ID);
	result += PyModule_AddIntMacro(module, SLAVE_B_FIRE2_VNETZ_MCHIP_ID);
	result += PyModule_AddIntMacro(module, SLAVE_B_FIRE2_VNET_MCHIP_ID);
	result += PyModule_AddIntMacro(module, SLAVE_B_FIRE2_VNET_CCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_VNETFIRE_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_VNETFIRE_LCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_SLAVE_B_ANALOG_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_PLASMA_SLAVE_B_FLEXRAY_CORE_ID);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_MOST25_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_MOST50_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_MOST150_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_SLAVE_B_AOUT_MCHIP);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_SLAVE_B_EP_MCHIP_ID);
	result += PyModule_AddIntMacro(module, NEOVI_VNETFIRE_SLAVE_B_EP_LCHIP_ID);
	result += PyModule_AddIntMacro(module, VNET_ID_FIRE);
	result += PyModule_AddIntMacro(module, VNET_ID_FIRE_EP);
	result += PyModule_AddIntMacro(module, VNET_ID_SLAVEFIRE);
	result += PyModule_AddIntMacro(module, VNET_ID_SLAVEFIRE_EP);
	result += PyModule_AddIntMacro(module, VNET_ID_AIN);
	result += PyModule_AddIntMacro(module, VNET_ID_FLEXRAY);
	result += PyModule_AddIntMacro(module, VNET_ID_FIRE2);
	result += PyModule_AddIntMacro(module, VNET_ID_SLAVEFIRE2);
	result += PyModule_AddIntMacro(module, VNET_ID_FIRE2Z);
	result += PyModule_AddIntMacro(module, VNET_ID_SLAVEFIRE2Z);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NONE);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_VSI);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_AVT_716);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NI_CAN);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEOVI);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_AVT_717);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEOv6_VCAN);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_DOUBLE_SEC);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_10US);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_25NS);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_10NS);
	result += PyModule_AddIntMacro(module, SYSTEM_TIMESTAMP_ID_NONE);
	result += PyModule_AddIntMacro(module, SYSTEM_TIMESTAMP_ID_TIMEGETTIME_API);
	result += PyModule_AddIntMacro(module, icsspystatusChangeLength);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitH1);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitH2);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitH3);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB1);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB2);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB3);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB4);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB5);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB6);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB7);
	result += PyModule_AddIntMacro(module, icsspystatusChangeBitB8);
	result += PyModule_AddIntMacro(module, icsspystatusChangedGlobal);
	// enum
	// enum
	result += PyModule_AddIntMacro(module, CAN_CLK_FIRE2_40MHz);
	result += PyModule_AddIntMacro(module, CAN_CLK_FIRE2_80MHz);
	// end of enum -  } can_clock_fire2_t;

	// enum
	result += PyModule_AddIntMacro(module, MSCAN2);
	result += PyModule_AddIntMacro(module, LSFTCAN2);
	result += PyModule_AddIntMacro(module, SWCAN2);
	// end of enum -  };// CAN2 Network Type

	// enum
	result += PyModule_AddIntMacro(module, LL_DEAD);
	result += PyModule_AddIntMacro(module, LL_PRODUCTION);
	result += PyModule_AddIntMacro(module, LL_FIRE_DEMO);
	result += PyModule_AddIntMacro(module, LL_FIRE);
	result += PyModule_AddIntMacro(module, LL_RED_LIMITED);
	result += PyModule_AddIntMacro(module, LL_RED);
	result += PyModule_AddIntMacro(module, LL_YELLOW_LIMITED);
	result += PyModule_AddIntMacro(module, LL_YELLOW);
	result += PyModule_AddIntMacro(module, LL_VCAN3_LIMITED);
	result += PyModule_AddIntMacro(module, LL_VCAN3);
	result += PyModule_AddIntMacro(module, LL_VCAN3_PRODUCTION);
	result += PyModule_AddIntMacro(module, LL_FIRE_PRODUCTION);
	result += PyModule_AddIntMacro(module, LL_ECU_40);
	result += PyModule_AddIntMacro(module, LL_IEVB);
	result += PyModule_AddIntMacro(module, LL_ECU_20);
	result += PyModule_AddIntMacro(module, LL_NEO_HDA);
	result += PyModule_AddIntMacro(module, LL_NEOOBD_LOGGER);
	result += PyModule_AddIntMacro(module, LL_ETHERNET_EVB);
	result += PyModule_AddIntMacro(module, LL_VALUECAN_RF);
	result += PyModule_AddIntMacro(module, LL_FIRE2_CYAN);
	result += PyModule_AddIntMacro(module, LL_RADGALAXY);
	result += PyModule_AddIntMacro(module, LL_RADSTAR2);
	result += PyModule_AddIntMacro(module, LL_VIVIDCAN);
	result += PyModule_AddIntMacro(module, LL_NEOOBD2_SIM);
	// end of enum -  };


#endif // _USE_INTERNAL_HEADER_


	return result == 0 ? 1 : 0;
}
