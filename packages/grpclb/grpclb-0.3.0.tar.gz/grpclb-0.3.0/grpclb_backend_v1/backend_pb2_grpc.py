# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import grpclb_backend_v1.backend_pb2 as grpclb__backend__v1_dot_backend__pb2


class LoadReportStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Load = channel.unary_unary(
        '/grpclb.backend.v1.LoadReport/Load',
        request_serializer=grpclb__backend__v1_dot_backend__pb2.LoadRequest.SerializeToString,
        response_deserializer=grpclb__backend__v1_dot_backend__pb2.LoadResponse.FromString,
        )


class LoadReportServicer(object):

  def Load(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoadReportServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Load': grpc.unary_unary_rpc_method_handler(
          servicer.Load,
          request_deserializer=grpclb__backend__v1_dot_backend__pb2.LoadRequest.FromString,
          response_serializer=grpclb__backend__v1_dot_backend__pb2.LoadResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpclb.backend.v1.LoadReport', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
