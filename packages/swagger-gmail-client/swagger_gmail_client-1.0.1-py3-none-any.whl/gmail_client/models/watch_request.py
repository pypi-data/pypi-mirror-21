# coding: utf-8

"""
    Gmail

    Access Gmail mailboxes including sending user email.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WatchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label_filter_action=None, label_ids=None, topic_name=None):
        """
        WatchRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'label_filter_action': 'str',
            'label_ids': 'list[str]',
            'topic_name': 'str'
        }

        self.attribute_map = {
            'label_filter_action': 'labelFilterAction',
            'label_ids': 'labelIds',
            'topic_name': 'topicName'
        }

        self._label_filter_action = label_filter_action
        self._label_ids = label_ids
        self._topic_name = topic_name

    @property
    def label_filter_action(self):
        """
        Gets the label_filter_action of this WatchRequest.
        Filtering behavior of labelIds list specified.

        :return: The label_filter_action of this WatchRequest.
        :rtype: str
        """
        return self._label_filter_action

    @label_filter_action.setter
    def label_filter_action(self, label_filter_action):
        """
        Sets the label_filter_action of this WatchRequest.
        Filtering behavior of labelIds list specified.

        :param label_filter_action: The label_filter_action of this WatchRequest.
        :type: str
        """
        allowed_values = ["exclude", "include"]
        if label_filter_action not in allowed_values:
            raise ValueError(
                "Invalid value for `label_filter_action` ({0}), must be one of {1}"
                .format(label_filter_action, allowed_values)
            )

        self._label_filter_action = label_filter_action

    @property
    def label_ids(self):
        """
        Gets the label_ids of this WatchRequest.
        List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.

        :return: The label_ids of this WatchRequest.
        :rtype: list[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """
        Sets the label_ids of this WatchRequest.
        List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.

        :param label_ids: The label_ids of this WatchRequest.
        :type: list[str]
        """

        self._label_ids = label_ids

    @property
    def topic_name(self):
        """
        Gets the topic_name of this WatchRequest.
        A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format).  Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).

        :return: The topic_name of this WatchRequest.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """
        Sets the topic_name of this WatchRequest.
        A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format).  Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).

        :param topic_name: The topic_name of this WatchRequest.
        :type: str
        """

        self._topic_name = topic_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
