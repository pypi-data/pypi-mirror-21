# coding: utf-8

"""
    Gmail

    Access Gmail mailboxes including sending user email.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UsersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def gmail_users_drafts_create(self, user_id, **kwargs):
        """
        Creates a new draft with the DRAFT label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_create(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_create_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_create_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_drafts_create_with_http_info(self, user_id, **kwargs):
        """
        Creates a new draft with the DRAFT label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_create_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_create`")


        collection_formats = {}

        resource_path = '/{userId}/drafts'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Draft',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_drafts_delete(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified draft. Does not simply trash it.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_delete(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_delete_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_delete_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_drafts_delete_with_http_info(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified draft. Does not simply trash it.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_delete_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_drafts_delete`")


        collection_formats = {}

        resource_path = '/{userId}/drafts/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_drafts_get(self, user_id, id, **kwargs):
        """
        Gets the specified draft.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_get(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the draft in.
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_get_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_get_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_drafts_get_with_http_info(self, user_id, id, **kwargs):
        """
        Gets the specified draft.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_get_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the draft in.
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_drafts_get`")


        collection_formats = {}

        resource_path = '/{userId}/drafts/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Draft',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_drafts_list(self, user_id, **kwargs):
        """
        Lists the drafts in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include drafts from SPAM and TRASH in the results.
        :param int max_results: Maximum number of drafts to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".
        :return: ListDraftsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_drafts_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the drafts in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include drafts from SPAM and TRASH in the results.
        :param int max_results: Maximum number of drafts to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".
        :return: ListDraftsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'include_spam_trash', 'max_results', 'page_token', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_list`")


        collection_formats = {}

        resource_path = '/{userId}/drafts'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'include_spam_trash' in params:
            query_params['includeSpamTrash'] = params['include_spam_trash']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListDraftsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_drafts_send(self, user_id, **kwargs):
        """
        Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_send(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_send_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_send_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_drafts_send_with_http_info(self, user_id, **kwargs):
        """
        Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_send_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_send`")


        collection_formats = {}

        resource_path = '/{userId}/drafts/send'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_drafts_update(self, user_id, id, **kwargs):
        """
        Replaces a draft's content.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_update(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_drafts_update_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_drafts_update_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_drafts_update_with_http_info(self, user_id, id, **kwargs):
        """
        Replaces a draft's content.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_drafts_update_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the draft to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Draft body:
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_drafts_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_drafts_update`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_drafts_update`")


        collection_formats = {}

        resource_path = '/{userId}/drafts/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Draft',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_get_profile(self, user_id, **kwargs):
        """
        Gets the current user's Gmail profile.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_get_profile(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_get_profile_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_get_profile_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_get_profile_with_http_info(self, user_id, **kwargs):
        """
        Gets the current user's Gmail profile.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_get_profile_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_get_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_get_profile`")


        collection_formats = {}

        resource_path = '/{userId}/profile'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Profile',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_history_list(self, user_id, **kwargs):
        """
        Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_history_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param list[str] history_types: History types to be returned by the function
        :param str label_id: Only return messages with a label matching the ID.
        :param int max_results: The maximum number of history records to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str start_history_id: Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.
        :return: ListHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_history_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_history_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_history_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_history_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param list[str] history_types: History types to be returned by the function
        :param str label_id: Only return messages with a label matching the ID.
        :param int max_results: The maximum number of history records to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str start_history_id: Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.
        :return: ListHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'history_types', 'label_id', 'max_results', 'page_token', 'start_history_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_history_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_history_list`")


        collection_formats = {}

        resource_path = '/{userId}/history'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'history_types' in params:
            query_params['historyTypes'] = params['history_types']
            collection_formats['historyTypes'] = 'multi'
        if 'label_id' in params:
            query_params['labelId'] = params['label_id']
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']
        if 'start_history_id' in params:
            query_params['startHistoryId'] = params['start_history_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListHistoryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_create(self, user_id, **kwargs):
        """
        Creates a new label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_create(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_create_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_labels_create_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_labels_create_with_http_info(self, user_id, **kwargs):
        """
        Creates a new label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_create_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_create`")


        collection_formats = {}

        resource_path = '/{userId}/labels'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Label',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_delete(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_delete(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_delete_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_labels_delete_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_labels_delete_with_http_info(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_delete_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_labels_delete`")


        collection_formats = {}

        resource_path = '/{userId}/labels/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_get(self, user_id, id, **kwargs):
        """
        Gets the specified label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_get(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_get_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_labels_get_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_labels_get_with_http_info(self, user_id, id, **kwargs):
        """
        Gets the specified label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_get_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_labels_get`")


        collection_formats = {}

        resource_path = '/{userId}/labels/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Label',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_list(self, user_id, **kwargs):
        """
        Lists all labels in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListLabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_labels_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_labels_list_with_http_info(self, user_id, **kwargs):
        """
        Lists all labels in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListLabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_list`")


        collection_formats = {}

        resource_path = '/{userId}/labels'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListLabelsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_patch(self, user_id, id, **kwargs):
        """
        Updates the specified label. This method supports patch semantics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_patch(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_patch_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_labels_patch_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_labels_patch_with_http_info(self, user_id, id, **kwargs):
        """
        Updates the specified label. This method supports patch semantics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_patch_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_patch`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_labels_patch`")


        collection_formats = {}

        resource_path = '/{userId}/labels/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Label',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_labels_update(self, user_id, id, **kwargs):
        """
        Updates the specified label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_update(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_labels_update_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_labels_update_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_labels_update_with_http_info(self, user_id, id, **kwargs):
        """
        Updates the specified label.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_labels_update_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the label to update. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Label body:
        :return: Label
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_labels_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_labels_update`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_labels_update`")


        collection_formats = {}

        resource_path = '/{userId}/labels/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Label',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_attachments_get(self, user_id, message_id, id, **kwargs):
        """
        Gets the specified message attachment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_attachments_get(user_id, message_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str message_id: The ID of the message containing the attachment. (required)
        :param str id: The ID of the attachment. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: MessagePartBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_attachments_get_with_http_info(user_id, message_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_attachments_get_with_http_info(user_id, message_id, id, **kwargs)
            return data

    def gmail_users_messages_attachments_get_with_http_info(self, user_id, message_id, id, **kwargs):
        """
        Gets the specified message attachment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_attachments_get_with_http_info(user_id, message_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str message_id: The ID of the message containing the attachment. (required)
        :param str id: The ID of the attachment. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: MessagePartBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'message_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_attachments_get`")
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params) or (params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `gmail_users_messages_attachments_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_attachments_get`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{messageId}/attachments/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MessagePartBody',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_batch_delete(self, user_id, **kwargs):
        """
        Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_batch_delete(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param BatchDeleteMessagesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_batch_delete_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_batch_delete_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_batch_delete_with_http_info(self, user_id, **kwargs):
        """
        Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_batch_delete_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param BatchDeleteMessagesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_batch_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_batch_delete`")


        collection_formats = {}

        resource_path = '/{userId}/messages/batchDelete'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_batch_modify(self, user_id, **kwargs):
        """
        Modifies the labels on the specified messages.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_batch_modify(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param BatchModifyMessagesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_batch_modify_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_batch_modify_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_batch_modify_with_http_info(self, user_id, **kwargs):
        """
        Modifies the labels on the specified messages.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_batch_modify_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param BatchModifyMessagesRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_batch_modify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_batch_modify`")


        collection_formats = {}

        resource_path = '/{userId}/messages/batchModify'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_delete(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_delete(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_delete_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_delete_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_messages_delete_with_http_info(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer messages.trash instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_delete_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_delete`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_get(self, user_id, id, **kwargs):
        """
        Gets the specified message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_get(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the message in.
        :param list[str] metadata_headers: When given and format is METADATA, only include headers specified.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_get_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_get_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_messages_get_with_http_info(self, user_id, id, **kwargs):
        """
        Gets the specified message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_get_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the message in.
        :param list[str] metadata_headers: When given and format is METADATA, only include headers specified.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'format', 'metadata_headers']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_get`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'metadata_headers' in params:
            query_params['metadataHeaders'] = params['metadata_headers']
            collection_formats['metadataHeaders'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_import(self, user_id, **kwargs):
        """
        Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_import(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
        :param str internal_date_source: Source for Gmail's internal date of the message.
        :param bool never_mark_spam: Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
        :param bool process_for_calendar: Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_import_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_import_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_import_with_http_info(self, user_id, **kwargs):
        """
        Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. Does not send a message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_import_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
        :param str internal_date_source: Source for Gmail's internal date of the message.
        :param bool never_mark_spam: Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
        :param bool process_for_calendar: Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'deleted', 'internal_date_source', 'never_mark_spam', 'process_for_calendar', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_import`")


        collection_formats = {}

        resource_path = '/{userId}/messages/import'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']
        if 'internal_date_source' in params:
            query_params['internalDateSource'] = params['internal_date_source']
        if 'never_mark_spam' in params:
            query_params['neverMarkSpam'] = params['never_mark_spam']
        if 'process_for_calendar' in params:
            query_params['processForCalendar'] = params['process_for_calendar']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_insert(self, user_id, **kwargs):
        """
        Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_insert(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
        :param str internal_date_source: Source for Gmail's internal date of the message.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_insert_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_insert_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_insert_with_http_info(self, user_id, **kwargs):
        """
        Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_insert_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for G Suite accounts.
        :param str internal_date_source: Source for Gmail's internal date of the message.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'deleted', 'internal_date_source', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_insert`")


        collection_formats = {}

        resource_path = '/{userId}/messages'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']
        if 'internal_date_source' in params:
            query_params['internalDateSource'] = params['internal_date_source']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_list(self, user_id, **kwargs):
        """
        Lists the messages in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include messages from SPAM and TRASH in the results.
        :param list[str] label_ids: Only return messages with labels that match all of the specified label IDs.
        :param int max_results: Maximum number of messages to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.
        :return: ListMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the messages in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include messages from SPAM and TRASH in the results.
        :param list[str] label_ids: Only return messages with labels that match all of the specified label IDs.
        :param int max_results: Maximum number of messages to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.
        :return: ListMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'include_spam_trash', 'label_ids', 'max_results', 'page_token', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_list`")


        collection_formats = {}

        resource_path = '/{userId}/messages'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'include_spam_trash' in params:
            query_params['includeSpamTrash'] = params['include_spam_trash']
        if 'label_ids' in params:
            query_params['labelIds'] = params['label_ids']
            collection_formats['labelIds'] = 'multi'
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListMessagesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_modify(self, user_id, id, **kwargs):
        """
        Modifies the labels on the specified message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_modify(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to modify. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ModifyMessageRequest body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_modify_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_modify_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_messages_modify_with_http_info(self, user_id, id, **kwargs):
        """
        Modifies the labels on the specified message.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_modify_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to modify. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ModifyMessageRequest body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_modify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_modify`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_modify`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{id}/modify'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_send(self, user_id, **kwargs):
        """
        Sends the specified message to the recipients in the To, Cc, and Bcc headers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_send(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_send_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_messages_send_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_messages_send_with_http_info(self, user_id, **kwargs):
        """
        Sends the specified message to the recipients in the To, Cc, and Bcc headers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_send_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Message body:
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_send`")


        collection_formats = {}

        resource_path = '/{userId}/messages/send'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['message/rfc822'])

        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_trash(self, user_id, id, **kwargs):
        """
        Moves the specified message to the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_trash(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_trash_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_trash_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_messages_trash_with_http_info(self, user_id, id, **kwargs):
        """
        Moves the specified message to the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_trash_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_trash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_trash`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_trash`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{id}/trash'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_messages_untrash(self, user_id, id, **kwargs):
        """
        Removes the specified message from the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_untrash(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to remove from Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_messages_untrash_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_messages_untrash_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_messages_untrash_with_http_info(self, user_id, id, **kwargs):
        """
        Removes the specified message from the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_messages_untrash_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the message to remove from Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_messages_untrash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_messages_untrash`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_messages_untrash`")


        collection_formats = {}

        resource_path = '/{userId}/messages/{id}/untrash'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Message',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_filters_create(self, user_id, **kwargs):
        """
        Creates a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_create(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Filter body:
        :return: Filter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_filters_create_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_filters_create_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_filters_create_with_http_info(self, user_id, **kwargs):
        """
        Creates a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_create_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param Filter body:
        :return: Filter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_filters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_filters_create`")


        collection_formats = {}

        resource_path = '/{userId}/settings/filters'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Filter',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_filters_delete(self, user_id, id, **kwargs):
        """
        Deletes a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_delete(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str id: The ID of the filter to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_filters_delete_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_settings_filters_delete_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_settings_filters_delete_with_http_info(self, user_id, id, **kwargs):
        """
        Deletes a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_delete_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str id: The ID of the filter to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_filters_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_filters_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_settings_filters_delete`")


        collection_formats = {}

        resource_path = '/{userId}/settings/filters/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_filters_get(self, user_id, id, **kwargs):
        """
        Gets a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_get(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str id: The ID of the filter to be fetched. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Filter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_filters_get_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_settings_filters_get_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_settings_filters_get_with_http_info(self, user_id, id, **kwargs):
        """
        Gets a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_get_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str id: The ID of the filter to be fetched. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Filter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_filters_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_filters_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_settings_filters_get`")


        collection_formats = {}

        resource_path = '/{userId}/settings/filters/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Filter',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_filters_list(self, user_id, **kwargs):
        """
        Lists the message filters of a Gmail user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListFiltersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_filters_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_filters_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_filters_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the message filters of a Gmail user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_filters_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListFiltersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_filters_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_filters_list`")


        collection_formats = {}

        resource_path = '/{userId}/settings/filters'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListFiltersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_forwarding_addresses_create(self, user_id, **kwargs):
        """
        Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_create(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ForwardingAddress body:
        :return: ForwardingAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_forwarding_addresses_create_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_forwarding_addresses_create_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_forwarding_addresses_create_with_http_info(self, user_id, **kwargs):
        """
        Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_create_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ForwardingAddress body:
        :return: ForwardingAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_forwarding_addresses_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_forwarding_addresses_create`")


        collection_formats = {}

        resource_path = '/{userId}/settings/forwardingAddresses'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ForwardingAddress',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_forwarding_addresses_delete(self, user_id, forwarding_email, **kwargs):
        """
        Deletes the specified forwarding address and revokes any verification that may have been required.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_delete(user_id, forwarding_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str forwarding_email: The forwarding address to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_forwarding_addresses_delete_with_http_info(user_id, forwarding_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_forwarding_addresses_delete_with_http_info(user_id, forwarding_email, **kwargs)
            return data

    def gmail_users_settings_forwarding_addresses_delete_with_http_info(self, user_id, forwarding_email, **kwargs):
        """
        Deletes the specified forwarding address and revokes any verification that may have been required.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_delete_with_http_info(user_id, forwarding_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str forwarding_email: The forwarding address to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'forwarding_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_forwarding_addresses_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_forwarding_addresses_delete`")
        # verify the required parameter 'forwarding_email' is set
        if ('forwarding_email' not in params) or (params['forwarding_email'] is None):
            raise ValueError("Missing the required parameter `forwarding_email` when calling `gmail_users_settings_forwarding_addresses_delete`")


        collection_formats = {}

        resource_path = '/{userId}/settings/forwardingAddresses/{forwardingEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'forwarding_email' in params:
            path_params['forwardingEmail'] = params['forwarding_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_forwarding_addresses_get(self, user_id, forwarding_email, **kwargs):
        """
        Gets the specified forwarding address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_get(user_id, forwarding_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str forwarding_email: The forwarding address to be retrieved. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ForwardingAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_forwarding_addresses_get_with_http_info(user_id, forwarding_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_forwarding_addresses_get_with_http_info(user_id, forwarding_email, **kwargs)
            return data

    def gmail_users_settings_forwarding_addresses_get_with_http_info(self, user_id, forwarding_email, **kwargs):
        """
        Gets the specified forwarding address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_get_with_http_info(user_id, forwarding_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str forwarding_email: The forwarding address to be retrieved. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ForwardingAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'forwarding_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_forwarding_addresses_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_forwarding_addresses_get`")
        # verify the required parameter 'forwarding_email' is set
        if ('forwarding_email' not in params) or (params['forwarding_email'] is None):
            raise ValueError("Missing the required parameter `forwarding_email` when calling `gmail_users_settings_forwarding_addresses_get`")


        collection_formats = {}

        resource_path = '/{userId}/settings/forwardingAddresses/{forwardingEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'forwarding_email' in params:
            path_params['forwardingEmail'] = params['forwarding_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ForwardingAddress',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_forwarding_addresses_list(self, user_id, **kwargs):
        """
        Lists the forwarding addresses for the specified account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListForwardingAddressesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_forwarding_addresses_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_forwarding_addresses_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_forwarding_addresses_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the forwarding addresses for the specified account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_forwarding_addresses_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListForwardingAddressesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_forwarding_addresses_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_forwarding_addresses_list`")


        collection_formats = {}

        resource_path = '/{userId}/settings/forwardingAddresses'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListForwardingAddressesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_get_auto_forwarding(self, user_id, **kwargs):
        """
        Gets the auto-forwarding setting for the specified account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_auto_forwarding(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: AutoForwarding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_get_auto_forwarding_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_get_auto_forwarding_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_get_auto_forwarding_with_http_info(self, user_id, **kwargs):
        """
        Gets the auto-forwarding setting for the specified account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_auto_forwarding_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: AutoForwarding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_get_auto_forwarding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_get_auto_forwarding`")


        collection_formats = {}

        resource_path = '/{userId}/settings/autoForwarding'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AutoForwarding',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_get_imap(self, user_id, **kwargs):
        """
        Gets IMAP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_imap(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ImapSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_get_imap_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_get_imap_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_get_imap_with_http_info(self, user_id, **kwargs):
        """
        Gets IMAP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_imap_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ImapSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_get_imap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_get_imap`")


        collection_formats = {}

        resource_path = '/{userId}/settings/imap'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImapSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_get_pop(self, user_id, **kwargs):
        """
        Gets POP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_pop(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: PopSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_get_pop_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_get_pop_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_get_pop_with_http_info(self, user_id, **kwargs):
        """
        Gets POP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_pop_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: PopSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_get_pop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_get_pop`")


        collection_formats = {}

        resource_path = '/{userId}/settings/pop'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PopSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_get_vacation(self, user_id, **kwargs):
        """
        Gets vacation responder settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_vacation(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: VacationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_get_vacation_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_get_vacation_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_get_vacation_with_http_info(self, user_id, **kwargs):
        """
        Gets vacation responder settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_get_vacation_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: VacationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_get_vacation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_get_vacation`")


        collection_formats = {}

        resource_path = '/{userId}/settings/vacation'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VacationSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_create(self, user_id, **kwargs):
        """
        Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_create(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_create_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_create_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_send_as_create_with_http_info(self, user_id, **kwargs):
        """
        Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to pending; otherwise, the resource will be created with verification status set to accepted. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_create_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_create`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SendAs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_delete(self, user_id, send_as_email, **kwargs):
        """
        Deletes the specified send-as alias. Revokes any verification that may have been required for using it.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_delete(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_delete_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_delete_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_delete_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Deletes the specified send-as alias. Revokes any verification that may have been required for using it.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_delete_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be deleted. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_delete`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_delete`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_get(self, user_id, send_as_email, **kwargs):
        """
        Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_get(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be retrieved. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_get_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_get_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_get_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_get_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be retrieved. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_get`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_get`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SendAs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_list(self, user_id, **kwargs):
        """
        Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListSendAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_send_as_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListSendAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_list`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListSendAsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_patch(self, user_id, send_as_email, **kwargs):
        """
        Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority. This method supports patch semantics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_patch(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be updated. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_patch_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_patch_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_patch_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority. This method supports patch semantics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_patch_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be updated. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_patch`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_patch`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SendAs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_smime_info_delete(self, user_id, send_as_email, id, **kwargs):
        """
        Deletes the specified S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_delete(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_smime_info_delete_with_http_info(user_id, send_as_email, id, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_smime_info_delete_with_http_info(user_id, send_as_email, id, **kwargs)
            return data

    def gmail_users_settings_send_as_smime_info_delete_with_http_info(self, user_id, send_as_email, id, **kwargs):
        """
        Deletes the specified S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_delete_with_http_info(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_smime_info_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_smime_info_delete`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_smime_info_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_settings_send_as_smime_info_delete`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_smime_info_get(self, user_id, send_as_email, id, **kwargs):
        """
        Gets the specified S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_get(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: SmimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_smime_info_get_with_http_info(user_id, send_as_email, id, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_smime_info_get_with_http_info(user_id, send_as_email, id, **kwargs)
            return data

    def gmail_users_settings_send_as_smime_info_get_with_http_info(self, user_id, send_as_email, id, **kwargs):
        """
        Gets the specified S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_get_with_http_info(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: SmimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_smime_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_smime_info_get`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_smime_info_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_settings_send_as_smime_info_get`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SmimeInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_smime_info_insert(self, user_id, send_as_email, **kwargs):
        """
        Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_insert(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SmimeInfo body:
        :return: SmimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_smime_info_insert_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_smime_info_insert_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_smime_info_insert_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_insert_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SmimeInfo body:
        :return: SmimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_smime_info_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_smime_info_insert`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_smime_info_insert`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SmimeInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_smime_info_list(self, user_id, send_as_email, **kwargs):
        """
        Lists S/MIME configs for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_list(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListSmimeInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_smime_info_list_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_smime_info_list_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_smime_info_list_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Lists S/MIME configs for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_list_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: ListSmimeInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_smime_info_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_smime_info_list`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_smime_info_list`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListSmimeInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_smime_info_set_default(self, user_id, send_as_email, id, **kwargs):
        """
        Sets the default S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_set_default(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_smime_info_set_default_with_http_info(user_id, send_as_email, id, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_smime_info_set_default_with_http_info(user_id, send_as_email, id, **kwargs)
            return data

    def gmail_users_settings_send_as_smime_info_set_default_with_http_info(self, user_id, send_as_email, id, **kwargs):
        """
        Sets the default S/MIME config for the specified send-as alias.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_smime_info_set_default_with_http_info(user_id, send_as_email, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str send_as_email: The email address that appears in the \"From:\" header for mail sent using this alias. (required)
        :param str id: The immutable ID for the SmimeInfo. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_smime_info_set_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_smime_info_set_default`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_smime_info_set_default`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_settings_send_as_smime_info_set_default`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_update(self, user_id, send_as_email, **kwargs):
        """
        Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_update(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be updated. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_update_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_update_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_update_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias.  Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_update_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be updated. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param SendAs body:
        :return: SendAs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_update`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_update`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SendAs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_send_as_verify(self, user_id, send_as_email, **kwargs):
        """
        Sends a verification email to the specified send-as alias address. The verification status must be pending.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_verify(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be verified. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_send_as_verify_with_http_info(user_id, send_as_email, **kwargs)
        else:
            (data) = self.gmail_users_settings_send_as_verify_with_http_info(user_id, send_as_email, **kwargs)
            return data

    def gmail_users_settings_send_as_verify_with_http_info(self, user_id, send_as_email, **kwargs):
        """
        Sends a verification email to the specified send-as alias address. The verification status must be pending.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_send_as_verify_with_http_info(user_id, send_as_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str send_as_email: The send-as alias to be verified. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'send_as_email', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_send_as_verify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_send_as_verify`")
        # verify the required parameter 'send_as_email' is set
        if ('send_as_email' not in params) or (params['send_as_email'] is None):
            raise ValueError("Missing the required parameter `send_as_email` when calling `gmail_users_settings_send_as_verify`")


        collection_formats = {}

        resource_path = '/{userId}/settings/sendAs/{sendAsEmail}/verify'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'send_as_email' in params:
            path_params['sendAsEmail'] = params['send_as_email']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_update_auto_forwarding(self, user_id, **kwargs):
        """
        Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_auto_forwarding(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param AutoForwarding body:
        :return: AutoForwarding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_update_auto_forwarding_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_update_auto_forwarding_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_update_auto_forwarding_with_http_info(self, user_id, **kwargs):
        """
        Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled.  This method is only available to service account clients that have been delegated domain-wide authority.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_auto_forwarding_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param AutoForwarding body:
        :return: AutoForwarding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_update_auto_forwarding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_update_auto_forwarding`")


        collection_formats = {}

        resource_path = '/{userId}/settings/autoForwarding'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AutoForwarding',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_update_imap(self, user_id, **kwargs):
        """
        Updates IMAP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_imap(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ImapSettings body:
        :return: ImapSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_update_imap_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_update_imap_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_update_imap_with_http_info(self, user_id, **kwargs):
        """
        Updates IMAP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_imap_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ImapSettings body:
        :return: ImapSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_update_imap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_update_imap`")


        collection_formats = {}

        resource_path = '/{userId}/settings/imap'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImapSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_update_pop(self, user_id, **kwargs):
        """
        Updates POP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_pop(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param PopSettings body:
        :return: PopSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_update_pop_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_update_pop_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_update_pop_with_http_info(self, user_id, **kwargs):
        """
        Updates POP settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_pop_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param PopSettings body:
        :return: PopSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_update_pop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_update_pop`")


        collection_formats = {}

        resource_path = '/{userId}/settings/pop'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PopSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_settings_update_vacation(self, user_id, **kwargs):
        """
        Updates vacation responder settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_vacation(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param VacationSettings body:
        :return: VacationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_settings_update_vacation_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_settings_update_vacation_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_settings_update_vacation_with_http_info(self, user_id, **kwargs):
        """
        Updates vacation responder settings.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_settings_update_vacation_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User's email address. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param VacationSettings body:
        :return: VacationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_settings_update_vacation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_settings_update_vacation`")


        collection_formats = {}

        resource_path = '/{userId}/settings/vacation'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VacationSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_stop(self, user_id, **kwargs):
        """
        Stop receiving push notifications for the given user mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_stop(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_stop_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_stop_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_stop_with_http_info(self, user_id, **kwargs):
        """
        Stop receiving push notifications for the given user mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_stop_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_stop`")


        collection_formats = {}

        resource_path = '/{userId}/stop'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_delete(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer threads.trash instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_delete(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: ID of the Thread to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_delete_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_threads_delete_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_threads_delete_with_http_info(self, user_id, id, **kwargs):
        """
        Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer threads.trash instead.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_delete_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: ID of the Thread to delete. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_threads_delete`")


        collection_formats = {}

        resource_path = '/{userId}/threads/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_get(self, user_id, id, **kwargs):
        """
        Gets the specified thread.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_get(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the messages in.
        :param list[str] metadata_headers: When given and format is METADATA, only include headers specified.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_get_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_threads_get_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_threads_get_with_http_info(self, user_id, id, **kwargs):
        """
        Gets the specified thread.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_get_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to retrieve. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param str format: The format to return the messages in.
        :param list[str] metadata_headers: When given and format is METADATA, only include headers specified.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'format', 'metadata_headers']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_threads_get`")


        collection_formats = {}

        resource_path = '/{userId}/threads/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'metadata_headers' in params:
            query_params['metadataHeaders'] = params['metadata_headers']
            collection_formats['metadataHeaders'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Thread',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_list(self, user_id, **kwargs):
        """
        Lists the threads in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_list(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include threads from SPAM and TRASH in the results.
        :param list[str] label_ids: Only return threads with labels that match all of the specified label IDs.
        :param int max_results: Maximum number of threads to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.
        :return: ListThreadsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_list_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_threads_list_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_threads_list_with_http_info(self, user_id, **kwargs):
        """
        Lists the threads in the user's mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_list_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param bool include_spam_trash: Include threads from SPAM and TRASH in the results.
        :param list[str] label_ids: Only return threads with labels that match all of the specified label IDs.
        :param int max_results: Maximum number of threads to return.
        :param str page_token: Page token to retrieve a specific page of results in the list.
        :param str q: Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\". Parameter cannot be used when accessing the api using the gmail.metadata scope.
        :return: ListThreadsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'include_spam_trash', 'label_ids', 'max_results', 'page_token', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_list`")


        collection_formats = {}

        resource_path = '/{userId}/threads'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']
        if 'include_spam_trash' in params:
            query_params['includeSpamTrash'] = params['include_spam_trash']
        if 'label_ids' in params:
            query_params['labelIds'] = params['label_ids']
            collection_formats['labelIds'] = 'multi'
        if 'max_results' in params:
            query_params['maxResults'] = params['max_results']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListThreadsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_modify(self, user_id, id, **kwargs):
        """
        Modifies the labels applied to the thread. This applies to all messages in the thread.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_modify(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to modify. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ModifyThreadRequest body:
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_modify_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_threads_modify_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_threads_modify_with_http_info(self, user_id, id, **kwargs):
        """
        Modifies the labels applied to the thread. This applies to all messages in the thread.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_modify_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to modify. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param ModifyThreadRequest body:
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_modify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_modify`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_threads_modify`")


        collection_formats = {}

        resource_path = '/{userId}/threads/{id}/modify'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Thread',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_trash(self, user_id, id, **kwargs):
        """
        Moves the specified thread to the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_trash(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_trash_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_threads_trash_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_threads_trash_with_http_info(self, user_id, id, **kwargs):
        """
        Moves the specified thread to the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_trash_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_trash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_trash`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_threads_trash`")


        collection_formats = {}

        resource_path = '/{userId}/threads/{id}/trash'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Thread',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_threads_untrash(self, user_id, id, **kwargs):
        """
        Removes the specified thread from the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_untrash(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to remove from Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_threads_untrash_with_http_info(user_id, id, **kwargs)
        else:
            (data) = self.gmail_users_threads_untrash_with_http_info(user_id, id, **kwargs)
            return data

    def gmail_users_threads_untrash_with_http_info(self, user_id, id, **kwargs):
        """
        Removes the specified thread from the trash.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_threads_untrash_with_http_info(user_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str id: The ID of the thread to remove from Trash. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :return: Thread
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_threads_untrash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_threads_untrash`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gmail_users_threads_untrash`")


        collection_formats = {}

        resource_path = '/{userId}/threads/{id}/untrash'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Thread',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def gmail_users_watch(self, user_id, **kwargs):
        """
        Set up or update a push notification watch on the given user mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_watch(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param WatchRequest body:
        :return: WatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gmail_users_watch_with_http_info(user_id, **kwargs)
        else:
            (data) = self.gmail_users_watch_with_http_info(user_id, **kwargs)
            return data

    def gmail_users_watch_with_http_info(self, user_id, **kwargs):
        """
        Set up or update a push notification watch on the given user mailbox.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gmail_users_watch_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The user's email address. The special value me can be used to indicate the authenticated user. (required)
        :param str alt: Data format for the response.
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
        :param str user_ip: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
        :param WatchRequest body:
        :return: WatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'alt', 'fields', 'key', 'oauth_token', 'pretty_print', 'quota_user', 'user_ip', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gmail_users_watch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `gmail_users_watch`")


        collection_formats = {}

        resource_path = '/{userId}/watch'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'alt' in params:
            query_params['alt'] = params['alt']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'oauth_token' in params:
            query_params['oauth_token'] = params['oauth_token']
        if 'pretty_print' in params:
            query_params['prettyPrint'] = params['pretty_print']
        if 'quota_user' in params:
            query_params['quotaUser'] = params['quota_user']
        if 'user_ip' in params:
            query_params['userIp'] = params['user_ip']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WatchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
