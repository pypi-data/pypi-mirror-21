# coding: utf-8

"""
    Gmail

    Access Gmail mailboxes including sending user email.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FilterCriteria(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, exclude_chats=None, _from=None, has_attachment=None, negated_query=None, query=None, size=None, size_comparison=None, subject=None, to=None):
        """
        FilterCriteria - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'exclude_chats': 'bool',
            '_from': 'str',
            'has_attachment': 'bool',
            'negated_query': 'str',
            'query': 'str',
            'size': 'int',
            'size_comparison': 'str',
            'subject': 'str',
            'to': 'str'
        }

        self.attribute_map = {
            'exclude_chats': 'excludeChats',
            '_from': 'from',
            'has_attachment': 'hasAttachment',
            'negated_query': 'negatedQuery',
            'query': 'query',
            'size': 'size',
            'size_comparison': 'sizeComparison',
            'subject': 'subject',
            'to': 'to'
        }

        self._exclude_chats = exclude_chats
        self.__from = _from
        self._has_attachment = has_attachment
        self._negated_query = negated_query
        self._query = query
        self._size = size
        self._size_comparison = size_comparison
        self._subject = subject
        self._to = to

    @property
    def exclude_chats(self):
        """
        Gets the exclude_chats of this FilterCriteria.
        Whether the response should exclude chats.

        :return: The exclude_chats of this FilterCriteria.
        :rtype: bool
        """
        return self._exclude_chats

    @exclude_chats.setter
    def exclude_chats(self, exclude_chats):
        """
        Sets the exclude_chats of this FilterCriteria.
        Whether the response should exclude chats.

        :param exclude_chats: The exclude_chats of this FilterCriteria.
        :type: bool
        """

        self._exclude_chats = exclude_chats

    @property
    def _from(self):
        """
        Gets the _from of this FilterCriteria.
        The sender's display name or email address.

        :return: The _from of this FilterCriteria.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this FilterCriteria.
        The sender's display name or email address.

        :param _from: The _from of this FilterCriteria.
        :type: str
        """

        self.__from = _from

    @property
    def has_attachment(self):
        """
        Gets the has_attachment of this FilterCriteria.
        Whether the message has any attachment.

        :return: The has_attachment of this FilterCriteria.
        :rtype: bool
        """
        return self._has_attachment

    @has_attachment.setter
    def has_attachment(self, has_attachment):
        """
        Sets the has_attachment of this FilterCriteria.
        Whether the message has any attachment.

        :param has_attachment: The has_attachment of this FilterCriteria.
        :type: bool
        """

        self._has_attachment = has_attachment

    @property
    def negated_query(self):
        """
        Gets the negated_query of this FilterCriteria.
        Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".

        :return: The negated_query of this FilterCriteria.
        :rtype: str
        """
        return self._negated_query

    @negated_query.setter
    def negated_query(self, negated_query):
        """
        Sets the negated_query of this FilterCriteria.
        Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".

        :param negated_query: The negated_query of this FilterCriteria.
        :type: str
        """

        self._negated_query = negated_query

    @property
    def query(self):
        """
        Gets the query of this FilterCriteria.
        Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".

        :return: The query of this FilterCriteria.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this FilterCriteria.
        Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, \"from:someuser@example.com rfc822msgid: is:unread\".

        :param query: The query of this FilterCriteria.
        :type: str
        """

        self._query = query

    @property
    def size(self):
        """
        Gets the size of this FilterCriteria.
        The size of the entire RFC822 message in bytes, including all headers and attachments.

        :return: The size of this FilterCriteria.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this FilterCriteria.
        The size of the entire RFC822 message in bytes, including all headers and attachments.

        :param size: The size of this FilterCriteria.
        :type: int
        """

        self._size = size

    @property
    def size_comparison(self):
        """
        Gets the size_comparison of this FilterCriteria.
        How the message size in bytes should be in relation to the size field.

        :return: The size_comparison of this FilterCriteria.
        :rtype: str
        """
        return self._size_comparison

    @size_comparison.setter
    def size_comparison(self, size_comparison):
        """
        Sets the size_comparison of this FilterCriteria.
        How the message size in bytes should be in relation to the size field.

        :param size_comparison: The size_comparison of this FilterCriteria.
        :type: str
        """
        allowed_values = ["larger", "smaller", "unspecified"]
        if size_comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `size_comparison` ({0}), must be one of {1}"
                .format(size_comparison, allowed_values)
            )

        self._size_comparison = size_comparison

    @property
    def subject(self):
        """
        Gets the subject of this FilterCriteria.
        Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.

        :return: The subject of this FilterCriteria.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this FilterCriteria.
        Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.

        :param subject: The subject of this FilterCriteria.
        :type: str
        """

        self._subject = subject

    @property
    def to(self):
        """
        Gets the to of this FilterCriteria.
        The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.

        :return: The to of this FilterCriteria.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this FilterCriteria.
        The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.

        :param to: The to of this FilterCriteria.
        :type: str
        """

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FilterCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
