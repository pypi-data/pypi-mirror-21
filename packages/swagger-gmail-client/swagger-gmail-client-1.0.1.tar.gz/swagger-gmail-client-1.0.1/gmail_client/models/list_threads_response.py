# coding: utf-8

"""
    Gmail

    Access Gmail mailboxes including sending user email.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ListThreadsResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, next_page_token=None, result_size_estimate=None, threads=None):
        """
        ListThreadsResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'next_page_token': 'str',
            'result_size_estimate': 'int',
            'threads': 'list[Thread]'
        }

        self.attribute_map = {
            'next_page_token': 'nextPageToken',
            'result_size_estimate': 'resultSizeEstimate',
            'threads': 'threads'
        }

        self._next_page_token = next_page_token
        self._result_size_estimate = result_size_estimate
        self._threads = threads

    @property
    def next_page_token(self):
        """
        Gets the next_page_token of this ListThreadsResponse.
        Page token to retrieve the next page of results in the list.

        :return: The next_page_token of this ListThreadsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """
        Sets the next_page_token of this ListThreadsResponse.
        Page token to retrieve the next page of results in the list.

        :param next_page_token: The next_page_token of this ListThreadsResponse.
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def result_size_estimate(self):
        """
        Gets the result_size_estimate of this ListThreadsResponse.
        Estimated total number of results.

        :return: The result_size_estimate of this ListThreadsResponse.
        :rtype: int
        """
        return self._result_size_estimate

    @result_size_estimate.setter
    def result_size_estimate(self, result_size_estimate):
        """
        Sets the result_size_estimate of this ListThreadsResponse.
        Estimated total number of results.

        :param result_size_estimate: The result_size_estimate of this ListThreadsResponse.
        :type: int
        """

        self._result_size_estimate = result_size_estimate

    @property
    def threads(self):
        """
        Gets the threads of this ListThreadsResponse.
        List of threads.

        :return: The threads of this ListThreadsResponse.
        :rtype: list[Thread]
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """
        Sets the threads of this ListThreadsResponse.
        List of threads.

        :param threads: The threads of this ListThreadsResponse.
        :type: list[Thread]
        """

        self._threads = threads

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ListThreadsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
