# coding: utf-8

"""
    Gmail

    Access Gmail mailboxes including sending user email.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Filter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, action=None, criteria=None, id=None):
        """
        Filter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'FilterAction',
            'criteria': 'FilterCriteria',
            'id': 'str'
        }

        self.attribute_map = {
            'action': 'action',
            'criteria': 'criteria',
            'id': 'id'
        }

        self._action = action
        self._criteria = criteria
        self._id = id

    @property
    def action(self):
        """
        Gets the action of this Filter.
        Action that the filter performs.

        :return: The action of this Filter.
        :rtype: FilterAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this Filter.
        Action that the filter performs.

        :param action: The action of this Filter.
        :type: FilterAction
        """

        self._action = action

    @property
    def criteria(self):
        """
        Gets the criteria of this Filter.
        Matching criteria for the filter.

        :return: The criteria of this Filter.
        :rtype: FilterCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """
        Sets the criteria of this Filter.
        Matching criteria for the filter.

        :param criteria: The criteria of this Filter.
        :type: FilterCriteria
        """

        self._criteria = criteria

    @property
    def id(self):
        """
        Gets the id of this Filter.
        The server assigned ID of the filter.

        :return: The id of this Filter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Filter.
        The server assigned ID of the filter.

        :param id: The id of this Filter.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
